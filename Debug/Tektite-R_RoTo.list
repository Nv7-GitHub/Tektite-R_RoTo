
Tektite-R_RoTo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008104  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800829c  0800829c  0000929c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082f4  080082f4  0000a0fc  2**0
                  CONTENTS
  4 .ARM          00000008  080082f4  080082f4  000092f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082fc  080082fc  0000a0fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082fc  080082fc  000092fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008300  08008300  00009300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  08008304  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d34  200000fc  08008400  0000a0fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e30  08008400  0000ae30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000157a7  00000000  00000000  0000a12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a85  00000000  00000000  0001f8d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e8  00000000  00000000  00023358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f27  00000000  00000000  00024740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af72  00000000  00000000  00025667  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001972f  00000000  00000000  000405d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d456  00000000  00000000  00059d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f715e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000525c  00000000  00000000  000f71a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  000fc400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008284 	.word	0x08008284

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	08008284 	.word	0x08008284

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004ce:	463b      	mov	r3, r7
 80004d0:	2200      	movs	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
 80004d4:	605a      	str	r2, [r3, #4]
 80004d6:	609a      	str	r2, [r3, #8]
 80004d8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004da:	4b21      	ldr	r3, [pc, #132]	@ (8000560 <MX_ADC1_Init+0x98>)
 80004dc:	4a21      	ldr	r2, [pc, #132]	@ (8000564 <MX_ADC1_Init+0x9c>)
 80004de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000560 <MX_ADC1_Init+0x98>)
 80004e2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80004e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000560 <MX_ADC1_Init+0x98>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80004ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000560 <MX_ADC1_Init+0x98>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000560 <MX_ADC1_Init+0x98>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004fa:	4b19      	ldr	r3, [pc, #100]	@ (8000560 <MX_ADC1_Init+0x98>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000502:	4b17      	ldr	r3, [pc, #92]	@ (8000560 <MX_ADC1_Init+0x98>)
 8000504:	2200      	movs	r2, #0
 8000506:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000508:	4b15      	ldr	r3, [pc, #84]	@ (8000560 <MX_ADC1_Init+0x98>)
 800050a:	4a17      	ldr	r2, [pc, #92]	@ (8000568 <MX_ADC1_Init+0xa0>)
 800050c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800050e:	4b14      	ldr	r3, [pc, #80]	@ (8000560 <MX_ADC1_Init+0x98>)
 8000510:	2200      	movs	r2, #0
 8000512:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000514:	4b12      	ldr	r3, [pc, #72]	@ (8000560 <MX_ADC1_Init+0x98>)
 8000516:	2201      	movs	r2, #1
 8000518:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800051a:	4b11      	ldr	r3, [pc, #68]	@ (8000560 <MX_ADC1_Init+0x98>)
 800051c:	2200      	movs	r2, #0
 800051e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000522:	4b0f      	ldr	r3, [pc, #60]	@ (8000560 <MX_ADC1_Init+0x98>)
 8000524:	2201      	movs	r2, #1
 8000526:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000528:	480d      	ldr	r0, [pc, #52]	@ (8000560 <MX_ADC1_Init+0x98>)
 800052a:	f000 fcfd 	bl	8000f28 <HAL_ADC_Init>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000534:	f000 f968 	bl	8000808 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000538:	2303      	movs	r3, #3
 800053a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800053c:	2301      	movs	r3, #1
 800053e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000544:	463b      	mov	r3, r7
 8000546:	4619      	mov	r1, r3
 8000548:	4805      	ldr	r0, [pc, #20]	@ (8000560 <MX_ADC1_Init+0x98>)
 800054a:	f000 fd31 	bl	8000fb0 <HAL_ADC_ConfigChannel>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000554:	f000 f958 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000558:	bf00      	nop
 800055a:	3710      	adds	r7, #16
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000118 	.word	0x20000118
 8000564:	40012000 	.word	0x40012000
 8000568:	0f000001 	.word	0x0f000001

0800056c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08a      	sub	sp, #40	@ 0x28
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000574:	f107 0314 	add.w	r3, r7, #20
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a17      	ldr	r2, [pc, #92]	@ (80005e8 <HAL_ADC_MspInit+0x7c>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d127      	bne.n	80005de <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	613b      	str	r3, [r7, #16]
 8000592:	4b16      	ldr	r3, [pc, #88]	@ (80005ec <HAL_ADC_MspInit+0x80>)
 8000594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000596:	4a15      	ldr	r2, [pc, #84]	@ (80005ec <HAL_ADC_MspInit+0x80>)
 8000598:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800059c:	6453      	str	r3, [r2, #68]	@ 0x44
 800059e:	4b13      	ldr	r3, [pc, #76]	@ (80005ec <HAL_ADC_MspInit+0x80>)
 80005a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80005a6:	613b      	str	r3, [r7, #16]
 80005a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	4b0f      	ldr	r3, [pc, #60]	@ (80005ec <HAL_ADC_MspInit+0x80>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b2:	4a0e      	ldr	r2, [pc, #56]	@ (80005ec <HAL_ADC_MspInit+0x80>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ba:	4b0c      	ldr	r3, [pc, #48]	@ (80005ec <HAL_ADC_MspInit+0x80>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VSENSE_Pin;
 80005c6:	2308      	movs	r3, #8
 80005c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ca:	2303      	movs	r3, #3
 80005cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VSENSE_GPIO_Port, &GPIO_InitStruct);
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	4619      	mov	r1, r3
 80005d8:	4805      	ldr	r0, [pc, #20]	@ (80005f0 <HAL_ADC_MspInit+0x84>)
 80005da:	f001 f829 	bl	8001630 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005de:	bf00      	nop
 80005e0:	3728      	adds	r7, #40	@ 0x28
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40012000 	.word	0x40012000
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40020000 	.word	0x40020000

080005f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b088      	sub	sp, #32
 80005f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fa:	f107 030c 	add.w	r3, r7, #12
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	4b3e      	ldr	r3, [pc, #248]	@ (8000708 <MX_GPIO_Init+0x114>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	4a3d      	ldr	r2, [pc, #244]	@ (8000708 <MX_GPIO_Init+0x114>)
 8000614:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000618:	6313      	str	r3, [r2, #48]	@ 0x30
 800061a:	4b3b      	ldr	r3, [pc, #236]	@ (8000708 <MX_GPIO_Init+0x114>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	4b37      	ldr	r3, [pc, #220]	@ (8000708 <MX_GPIO_Init+0x114>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	4a36      	ldr	r2, [pc, #216]	@ (8000708 <MX_GPIO_Init+0x114>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	6313      	str	r3, [r2, #48]	@ 0x30
 8000636:	4b34      	ldr	r3, [pc, #208]	@ (8000708 <MX_GPIO_Init+0x114>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	603b      	str	r3, [r7, #0]
 8000646:	4b30      	ldr	r3, [pc, #192]	@ (8000708 <MX_GPIO_Init+0x114>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	4a2f      	ldr	r2, [pc, #188]	@ (8000708 <MX_GPIO_Init+0x114>)
 800064c:	f043 0302 	orr.w	r3, r3, #2
 8000650:	6313      	str	r3, [r2, #48]	@ 0x30
 8000652:	4b2d      	ldr	r3, [pc, #180]	@ (8000708 <MX_GPIO_Init+0x114>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000656:	f003 0302 	and.w	r3, r3, #2
 800065a:	603b      	str	r3, [r7, #0]
 800065c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GYRO_CS_Pin|ACCEL_CS_Pin, GPIO_PIN_SET);
 800065e:	2201      	movs	r2, #1
 8000660:	2103      	movs	r1, #3
 8000662:	482a      	ldr	r0, [pc, #168]	@ (800070c <MX_GPIO_Init+0x118>)
 8000664:	f001 f968 	bl	8001938 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BPHASE_Pin|APHASE_Pin, GPIO_PIN_RESET);
 8000668:	2200      	movs	r2, #0
 800066a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800066e:	4827      	ldr	r0, [pc, #156]	@ (800070c <MX_GPIO_Init+0x118>)
 8000670:	f001 f962 	bl	8001938 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin|ACCEL_CS_Pin;
 8000674:	2303      	movs	r3, #3
 8000676:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000678:	2301      	movs	r3, #1
 800067a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000680:	2303      	movs	r3, #3
 8000682:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	4619      	mov	r1, r3
 800068a:	4820      	ldr	r0, [pc, #128]	@ (800070c <MX_GPIO_Init+0x118>)
 800068c:	f000 ffd0 	bl	8001630 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = E1B_Pin|E2B_Pin;
 8000690:	f240 4304 	movw	r3, #1028	@ 0x404
 8000694:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000696:	2300      	movs	r3, #0
 8000698:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800069e:	f107 030c 	add.w	r3, r7, #12
 80006a2:	4619      	mov	r1, r3
 80006a4:	4819      	ldr	r0, [pc, #100]	@ (800070c <MX_GPIO_Init+0x118>)
 80006a6:	f000 ffc3 	bl	8001630 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = E1A_Pin|E2A_Pin;
 80006aa:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80006ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006b0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ba:	f107 030c 	add.w	r3, r7, #12
 80006be:	4619      	mov	r1, r3
 80006c0:	4812      	ldr	r0, [pc, #72]	@ (800070c <MX_GPIO_Init+0x118>)
 80006c2:	f000 ffb5 	bl	8001630 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = STOP_Pin|GO_Pin;
 80006c6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80006ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006cc:	2300      	movs	r3, #0
 80006ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006d0:	2301      	movs	r3, #1
 80006d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	4619      	mov	r1, r3
 80006da:	480c      	ldr	r0, [pc, #48]	@ (800070c <MX_GPIO_Init+0x118>)
 80006dc:	f000 ffa8 	bl	8001630 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BPHASE_Pin|APHASE_Pin;
 80006e0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80006e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e6:	2301      	movs	r3, #1
 80006e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f2:	f107 030c 	add.w	r3, r7, #12
 80006f6:	4619      	mov	r1, r3
 80006f8:	4804      	ldr	r0, [pc, #16]	@ (800070c <MX_GPIO_Init+0x118>)
 80006fa:	f000 ff99 	bl	8001630 <HAL_GPIO_Init>

}
 80006fe:	bf00      	nop
 8000700:	3720      	adds	r7, #32
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800
 800070c:	40020400 	.word	0x40020400

08000710 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000714:	f000 fb72 	bl	8000dfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000718:	f000 f80e 	bl	8000738 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071c:	f7ff ff6a 	bl	80005f4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000720:	f000 f878 	bl	8000814 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000724:	f007 f898 	bl	8007858 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000728:	f000 fa1e 	bl	8000b68 <MX_TIM2_Init>
  MX_TIM1_Init();
 800072c:	f000 f964 	bl	80009f8 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000730:	f7ff feca 	bl	80004c8 <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000734:	bf00      	nop
 8000736:	e7fd      	b.n	8000734 <main+0x24>

08000738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b094      	sub	sp, #80	@ 0x50
 800073c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073e:	f107 0320 	add.w	r3, r7, #32
 8000742:	2230      	movs	r2, #48	@ 0x30
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f007 fd70 	bl	800822c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800075c:	2300      	movs	r3, #0
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	4b27      	ldr	r3, [pc, #156]	@ (8000800 <SystemClock_Config+0xc8>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000764:	4a26      	ldr	r2, [pc, #152]	@ (8000800 <SystemClock_Config+0xc8>)
 8000766:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800076a:	6413      	str	r3, [r2, #64]	@ 0x40
 800076c:	4b24      	ldr	r3, [pc, #144]	@ (8000800 <SystemClock_Config+0xc8>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000770:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000778:	2300      	movs	r3, #0
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	4b21      	ldr	r3, [pc, #132]	@ (8000804 <SystemClock_Config+0xcc>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a20      	ldr	r2, [pc, #128]	@ (8000804 <SystemClock_Config+0xcc>)
 8000782:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000786:	6013      	str	r3, [r2, #0]
 8000788:	4b1e      	ldr	r3, [pc, #120]	@ (8000804 <SystemClock_Config+0xcc>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000794:	2301      	movs	r3, #1
 8000796:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000798:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800079c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079e:	2302      	movs	r3, #2
 80007a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007a2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80007a8:	2319      	movs	r3, #25
 80007aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80007ac:	23c0      	movs	r3, #192	@ 0xc0
 80007ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007b0:	2302      	movs	r3, #2
 80007b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007b4:	2304      	movs	r3, #4
 80007b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b8:	f107 0320 	add.w	r3, r7, #32
 80007bc:	4618      	mov	r0, r3
 80007be:	f002 fb25 	bl	8002e0c <HAL_RCC_OscConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007c8:	f000 f81e 	bl	8000808 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007cc:	230f      	movs	r3, #15
 80007ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d0:	2302      	movs	r3, #2
 80007d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007d8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007de:	2300      	movs	r3, #0
 80007e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007e2:	f107 030c 	add.w	r3, r7, #12
 80007e6:	2103      	movs	r1, #3
 80007e8:	4618      	mov	r0, r3
 80007ea:	f002 fd87 	bl	80032fc <HAL_RCC_ClockConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007f4:	f000 f808 	bl	8000808 <Error_Handler>
  }
}
 80007f8:	bf00      	nop
 80007fa:	3750      	adds	r7, #80	@ 0x50
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40023800 	.word	0x40023800
 8000804:	40007000 	.word	0x40007000

08000808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800080c:	b672      	cpsid	i
}
 800080e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000810:	bf00      	nop
 8000812:	e7fd      	b.n	8000810 <Error_Handler+0x8>

08000814 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000818:	4b17      	ldr	r3, [pc, #92]	@ (8000878 <MX_SPI1_Init+0x64>)
 800081a:	4a18      	ldr	r2, [pc, #96]	@ (800087c <MX_SPI1_Init+0x68>)
 800081c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800081e:	4b16      	ldr	r3, [pc, #88]	@ (8000878 <MX_SPI1_Init+0x64>)
 8000820:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000824:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000826:	4b14      	ldr	r3, [pc, #80]	@ (8000878 <MX_SPI1_Init+0x64>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800082c:	4b12      	ldr	r3, [pc, #72]	@ (8000878 <MX_SPI1_Init+0x64>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000832:	4b11      	ldr	r3, [pc, #68]	@ (8000878 <MX_SPI1_Init+0x64>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000838:	4b0f      	ldr	r3, [pc, #60]	@ (8000878 <MX_SPI1_Init+0x64>)
 800083a:	2200      	movs	r2, #0
 800083c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800083e:	4b0e      	ldr	r3, [pc, #56]	@ (8000878 <MX_SPI1_Init+0x64>)
 8000840:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000844:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000846:	4b0c      	ldr	r3, [pc, #48]	@ (8000878 <MX_SPI1_Init+0x64>)
 8000848:	2220      	movs	r2, #32
 800084a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800084c:	4b0a      	ldr	r3, [pc, #40]	@ (8000878 <MX_SPI1_Init+0x64>)
 800084e:	2200      	movs	r2, #0
 8000850:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000852:	4b09      	ldr	r3, [pc, #36]	@ (8000878 <MX_SPI1_Init+0x64>)
 8000854:	2200      	movs	r2, #0
 8000856:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000858:	4b07      	ldr	r3, [pc, #28]	@ (8000878 <MX_SPI1_Init+0x64>)
 800085a:	2200      	movs	r2, #0
 800085c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800085e:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <MX_SPI1_Init+0x64>)
 8000860:	220a      	movs	r2, #10
 8000862:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000864:	4804      	ldr	r0, [pc, #16]	@ (8000878 <MX_SPI1_Init+0x64>)
 8000866:	f002 ff01 	bl	800366c <HAL_SPI_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000870:	f7ff ffca 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20000160 	.word	0x20000160
 800087c:	40013000 	.word	0x40013000

08000880 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08a      	sub	sp, #40	@ 0x28
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a19      	ldr	r2, [pc, #100]	@ (8000904 <HAL_SPI_MspInit+0x84>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d12b      	bne.n	80008fa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	613b      	str	r3, [r7, #16]
 80008a6:	4b18      	ldr	r3, [pc, #96]	@ (8000908 <HAL_SPI_MspInit+0x88>)
 80008a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008aa:	4a17      	ldr	r2, [pc, #92]	@ (8000908 <HAL_SPI_MspInit+0x88>)
 80008ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80008b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80008b2:	4b15      	ldr	r3, [pc, #84]	@ (8000908 <HAL_SPI_MspInit+0x88>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	4b11      	ldr	r3, [pc, #68]	@ (8000908 <HAL_SPI_MspInit+0x88>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	4a10      	ldr	r2, [pc, #64]	@ (8000908 <HAL_SPI_MspInit+0x88>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000908 <HAL_SPI_MspInit+0x88>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80008da:	23e0      	movs	r3, #224	@ 0xe0
 80008dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	2302      	movs	r3, #2
 80008e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e6:	2303      	movs	r3, #3
 80008e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008ea:	2305      	movs	r3, #5
 80008ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	4619      	mov	r1, r3
 80008f4:	4805      	ldr	r0, [pc, #20]	@ (800090c <HAL_SPI_MspInit+0x8c>)
 80008f6:	f000 fe9b 	bl	8001630 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80008fa:	bf00      	nop
 80008fc:	3728      	adds	r7, #40	@ 0x28
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40013000 	.word	0x40013000
 8000908:	40023800 	.word	0x40023800
 800090c:	40020000 	.word	0x40020000

08000910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	4b10      	ldr	r3, [pc, #64]	@ (800095c <HAL_MspInit+0x4c>)
 800091c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800091e:	4a0f      	ldr	r2, [pc, #60]	@ (800095c <HAL_MspInit+0x4c>)
 8000920:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000924:	6453      	str	r3, [r2, #68]	@ 0x44
 8000926:	4b0d      	ldr	r3, [pc, #52]	@ (800095c <HAL_MspInit+0x4c>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800092a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	603b      	str	r3, [r7, #0]
 8000936:	4b09      	ldr	r3, [pc, #36]	@ (800095c <HAL_MspInit+0x4c>)
 8000938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800093a:	4a08      	ldr	r2, [pc, #32]	@ (800095c <HAL_MspInit+0x4c>)
 800093c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000940:	6413      	str	r3, [r2, #64]	@ 0x40
 8000942:	4b06      	ldr	r3, [pc, #24]	@ (800095c <HAL_MspInit+0x4c>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094e:	bf00      	nop
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	40023800 	.word	0x40023800

08000960 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <NMI_Handler+0x4>

08000968 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <HardFault_Handler+0x4>

08000970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <MemManage_Handler+0x4>

08000978 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <BusFault_Handler+0x4>

08000980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <UsageFault_Handler+0x4>

08000988 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr

08000996 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b6:	f000 fa73 	bl	8000ea0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
	...

080009c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009c4:	4802      	ldr	r0, [pc, #8]	@ (80009d0 <OTG_FS_IRQHandler+0x10>)
 80009c6:	f001 f914 	bl	8001bf2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	2000172c 	.word	0x2000172c

080009d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009d8:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <SystemInit+0x20>)
 80009da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009de:	4a05      	ldr	r2, [pc, #20]	@ (80009f4 <SystemInit+0x20>)
 80009e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b096      	sub	sp, #88	@ 0x58
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009fe:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a0c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
 8000a24:	611a      	str	r2, [r3, #16]
 8000a26:	615a      	str	r2, [r3, #20]
 8000a28:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	2220      	movs	r2, #32
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4618      	mov	r0, r3
 8000a32:	f007 fbfb 	bl	800822c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a36:	4b4a      	ldr	r3, [pc, #296]	@ (8000b60 <MX_TIM1_Init+0x168>)
 8000a38:	4a4a      	ldr	r2, [pc, #296]	@ (8000b64 <MX_TIM1_Init+0x16c>)
 8000a3a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a3c:	4b48      	ldr	r3, [pc, #288]	@ (8000b60 <MX_TIM1_Init+0x168>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a42:	4b47      	ldr	r3, [pc, #284]	@ (8000b60 <MX_TIM1_Init+0x168>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8000a48:	4b45      	ldr	r3, [pc, #276]	@ (8000b60 <MX_TIM1_Init+0x168>)
 8000a4a:	22ff      	movs	r2, #255	@ 0xff
 8000a4c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a4e:	4b44      	ldr	r3, [pc, #272]	@ (8000b60 <MX_TIM1_Init+0x168>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a54:	4b42      	ldr	r3, [pc, #264]	@ (8000b60 <MX_TIM1_Init+0x168>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a5a:	4b41      	ldr	r3, [pc, #260]	@ (8000b60 <MX_TIM1_Init+0x168>)
 8000a5c:	2280      	movs	r2, #128	@ 0x80
 8000a5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a60:	483f      	ldr	r0, [pc, #252]	@ (8000b60 <MX_TIM1_Init+0x168>)
 8000a62:	f002 fe8c 	bl	800377e <HAL_TIM_Base_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000a6c:	f7ff fecc 	bl	8000808 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a74:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a76:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4838      	ldr	r0, [pc, #224]	@ (8000b60 <MX_TIM1_Init+0x168>)
 8000a7e:	f002 ffe9 	bl	8003a54 <HAL_TIM_ConfigClockSource>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000a88:	f7ff febe 	bl	8000808 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a8c:	4834      	ldr	r0, [pc, #208]	@ (8000b60 <MX_TIM1_Init+0x168>)
 8000a8e:	f002 fec5 	bl	800381c <HAL_TIM_PWM_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000a98:	f7ff feb6 	bl	8000808 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000aa4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	482d      	ldr	r0, [pc, #180]	@ (8000b60 <MX_TIM1_Init+0x168>)
 8000aac:	f003 fb4c 	bl	8004148 <HAL_TIMEx_MasterConfigSynchronization>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000ab6:	f7ff fea7 	bl	8000808 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aba:	2360      	movs	r3, #96	@ 0x60
 8000abc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aca:	2300      	movs	r3, #0
 8000acc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ad6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ada:	2200      	movs	r2, #0
 8000adc:	4619      	mov	r1, r3
 8000ade:	4820      	ldr	r0, [pc, #128]	@ (8000b60 <MX_TIM1_Init+0x168>)
 8000ae0:	f002 fef6 	bl	80038d0 <HAL_TIM_PWM_ConfigChannel>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000aea:	f7ff fe8d 	bl	8000808 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000aee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000af2:	2204      	movs	r2, #4
 8000af4:	4619      	mov	r1, r3
 8000af6:	481a      	ldr	r0, [pc, #104]	@ (8000b60 <MX_TIM1_Init+0x168>)
 8000af8:	f002 feea 	bl	80038d0 <HAL_TIM_PWM_ConfigChannel>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000b02:	f7ff fe81 	bl	8000808 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b0a:	2208      	movs	r2, #8
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4814      	ldr	r0, [pc, #80]	@ (8000b60 <MX_TIM1_Init+0x168>)
 8000b10:	f002 fede 	bl	80038d0 <HAL_TIM_PWM_ConfigChannel>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8000b1a:	f7ff fe75 	bl	8000808 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b22:	2300      	movs	r3, #0
 8000b24:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b36:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4807      	ldr	r0, [pc, #28]	@ (8000b60 <MX_TIM1_Init+0x168>)
 8000b42:	f003 fb6f 	bl	8004224 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8000b4c:	f7ff fe5c 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b50:	4803      	ldr	r0, [pc, #12]	@ (8000b60 <MX_TIM1_Init+0x168>)
 8000b52:	f000 f8cb 	bl	8000cec <HAL_TIM_MspPostInit>

}
 8000b56:	bf00      	nop
 8000b58:	3758      	adds	r7, #88	@ 0x58
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	200001b8 	.word	0x200001b8
 8000b64:	40010000 	.word	0x40010000

08000b68 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08e      	sub	sp, #56	@ 0x38
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b6e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b7c:	f107 0320 	add.w	r3, r7, #32
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
 8000b94:	615a      	str	r2, [r3, #20]
 8000b96:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b98:	4b38      	ldr	r3, [pc, #224]	@ (8000c7c <MX_TIM2_Init+0x114>)
 8000b9a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b9e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 960;
 8000ba0:	4b36      	ldr	r3, [pc, #216]	@ (8000c7c <MX_TIM2_Init+0x114>)
 8000ba2:	f44f 7270 	mov.w	r2, #960	@ 0x3c0
 8000ba6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba8:	4b34      	ldr	r3, [pc, #208]	@ (8000c7c <MX_TIM2_Init+0x114>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000bae:	4b33      	ldr	r3, [pc, #204]	@ (8000c7c <MX_TIM2_Init+0x114>)
 8000bb0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000bb4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb6:	4b31      	ldr	r3, [pc, #196]	@ (8000c7c <MX_TIM2_Init+0x114>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bbc:	4b2f      	ldr	r3, [pc, #188]	@ (8000c7c <MX_TIM2_Init+0x114>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bc2:	482e      	ldr	r0, [pc, #184]	@ (8000c7c <MX_TIM2_Init+0x114>)
 8000bc4:	f002 fddb 	bl	800377e <HAL_TIM_Base_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000bce:	f7ff fe1b 	bl	8000808 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bd2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bd8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4827      	ldr	r0, [pc, #156]	@ (8000c7c <MX_TIM2_Init+0x114>)
 8000be0:	f002 ff38 	bl	8003a54 <HAL_TIM_ConfigClockSource>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000bea:	f7ff fe0d 	bl	8000808 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000bee:	4823      	ldr	r0, [pc, #140]	@ (8000c7c <MX_TIM2_Init+0x114>)
 8000bf0:	f002 fe14 	bl	800381c <HAL_TIM_PWM_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000bfa:	f7ff fe05 	bl	8000808 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c02:	2300      	movs	r3, #0
 8000c04:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c06:	f107 0320 	add.w	r3, r7, #32
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	481b      	ldr	r0, [pc, #108]	@ (8000c7c <MX_TIM2_Init+0x114>)
 8000c0e:	f003 fa9b 	bl	8004148 <HAL_TIMEx_MasterConfigSynchronization>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000c18:	f7ff fdf6 	bl	8000808 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c1c:	2360      	movs	r3, #96	@ 0x60
 8000c1e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c24:	2300      	movs	r3, #0
 8000c26:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c2c:	1d3b      	adds	r3, r7, #4
 8000c2e:	2200      	movs	r2, #0
 8000c30:	4619      	mov	r1, r3
 8000c32:	4812      	ldr	r0, [pc, #72]	@ (8000c7c <MX_TIM2_Init+0x114>)
 8000c34:	f002 fe4c 	bl	80038d0 <HAL_TIM_PWM_ConfigChannel>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000c3e:	f7ff fde3 	bl	8000808 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	2204      	movs	r2, #4
 8000c46:	4619      	mov	r1, r3
 8000c48:	480c      	ldr	r0, [pc, #48]	@ (8000c7c <MX_TIM2_Init+0x114>)
 8000c4a:	f002 fe41 	bl	80038d0 <HAL_TIM_PWM_ConfigChannel>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000c54:	f7ff fdd8 	bl	8000808 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	2208      	movs	r2, #8
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4807      	ldr	r0, [pc, #28]	@ (8000c7c <MX_TIM2_Init+0x114>)
 8000c60:	f002 fe36 	bl	80038d0 <HAL_TIM_PWM_ConfigChannel>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8000c6a:	f7ff fdcd 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c6e:	4803      	ldr	r0, [pc, #12]	@ (8000c7c <MX_TIM2_Init+0x114>)
 8000c70:	f000 f83c 	bl	8000cec <HAL_TIM_MspPostInit>

}
 8000c74:	bf00      	nop
 8000c76:	3738      	adds	r7, #56	@ 0x38
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000200 	.word	0x20000200

08000c80 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a15      	ldr	r2, [pc, #84]	@ (8000ce4 <HAL_TIM_Base_MspInit+0x64>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d10e      	bne.n	8000cb0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	4b14      	ldr	r3, [pc, #80]	@ (8000ce8 <HAL_TIM_Base_MspInit+0x68>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c9a:	4a13      	ldr	r2, [pc, #76]	@ (8000ce8 <HAL_TIM_Base_MspInit+0x68>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ca2:	4b11      	ldr	r3, [pc, #68]	@ (8000ce8 <HAL_TIM_Base_MspInit+0x68>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000cae:	e012      	b.n	8000cd6 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM2)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000cb8:	d10d      	bne.n	8000cd6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60bb      	str	r3, [r7, #8]
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce8 <HAL_TIM_Base_MspInit+0x68>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc2:	4a09      	ldr	r2, [pc, #36]	@ (8000ce8 <HAL_TIM_Base_MspInit+0x68>)
 8000cc4:	f043 0301 	orr.w	r3, r3, #1
 8000cc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cca:	4b07      	ldr	r3, [pc, #28]	@ (8000ce8 <HAL_TIM_Base_MspInit+0x68>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
}
 8000cd6:	bf00      	nop
 8000cd8:	3714      	adds	r7, #20
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	40010000 	.word	0x40010000
 8000ce8:	40023800 	.word	0x40023800

08000cec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08a      	sub	sp, #40	@ 0x28
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a24      	ldr	r2, [pc, #144]	@ (8000d9c <HAL_TIM_MspPostInit+0xb0>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d11f      	bne.n	8000d4e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	613b      	str	r3, [r7, #16]
 8000d12:	4b23      	ldr	r3, [pc, #140]	@ (8000da0 <HAL_TIM_MspPostInit+0xb4>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d16:	4a22      	ldr	r2, [pc, #136]	@ (8000da0 <HAL_TIM_MspPostInit+0xb4>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1e:	4b20      	ldr	r3, [pc, #128]	@ (8000da0 <HAL_TIM_MspPostInit+0xb4>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	613b      	str	r3, [r7, #16]
 8000d28:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = LED_B_Pin|LED_R_Pin|LED_G_Pin;
 8000d2a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000d2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2302      	movs	r3, #2
 8000d32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	4619      	mov	r1, r3
 8000d46:	4817      	ldr	r0, [pc, #92]	@ (8000da4 <HAL_TIM_MspPostInit+0xb8>)
 8000d48:	f000 fc72 	bl	8001630 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d4c:	e022      	b.n	8000d94 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM2)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d56:	d11d      	bne.n	8000d94 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	4b10      	ldr	r3, [pc, #64]	@ (8000da0 <HAL_TIM_MspPostInit+0xb4>)
 8000d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d60:	4a0f      	ldr	r2, [pc, #60]	@ (8000da0 <HAL_TIM_MspPostInit+0xb4>)
 8000d62:	f043 0301 	orr.w	r3, r3, #1
 8000d66:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d68:	4b0d      	ldr	r3, [pc, #52]	@ (8000da0 <HAL_TIM_MspPostInit+0xb4>)
 8000d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ESC1_Pin|AENBL_Pin|BENBL_Pin;
 8000d74:	2307      	movs	r3, #7
 8000d76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2300      	movs	r3, #0
 8000d82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d84:	2301      	movs	r3, #1
 8000d86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4805      	ldr	r0, [pc, #20]	@ (8000da4 <HAL_TIM_MspPostInit+0xb8>)
 8000d90:	f000 fc4e 	bl	8001630 <HAL_GPIO_Init>
}
 8000d94:	bf00      	nop
 8000d96:	3728      	adds	r7, #40	@ 0x28
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40010000 	.word	0x40010000
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40020000 	.word	0x40020000

08000da8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000da8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000de0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dac:	f7ff fe12 	bl	80009d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000db0:	480c      	ldr	r0, [pc, #48]	@ (8000de4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000db2:	490d      	ldr	r1, [pc, #52]	@ (8000de8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000db4:	4a0d      	ldr	r2, [pc, #52]	@ (8000dec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db8:	e002      	b.n	8000dc0 <LoopCopyDataInit>

08000dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dbe:	3304      	adds	r3, #4

08000dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc4:	d3f9      	bcc.n	8000dba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000df0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dc8:	4c0a      	ldr	r4, [pc, #40]	@ (8000df4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dcc:	e001      	b.n	8000dd2 <LoopFillZerobss>

08000dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd0:	3204      	adds	r2, #4

08000dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd4:	d3fb      	bcc.n	8000dce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dd6:	f007 fa31 	bl	800823c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dda:	f7ff fc99 	bl	8000710 <main>
  bx  lr    
 8000dde:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000de0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de8:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000dec:	08008304 	.word	0x08008304
  ldr r2, =_sbss
 8000df0:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000df4:	20001e30 	.word	0x20001e30

08000df8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df8:	e7fe      	b.n	8000df8 <ADC_IRQHandler>
	...

08000dfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e00:	4b0e      	ldr	r3, [pc, #56]	@ (8000e3c <HAL_Init+0x40>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a0d      	ldr	r2, [pc, #52]	@ (8000e3c <HAL_Init+0x40>)
 8000e06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e3c <HAL_Init+0x40>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a0a      	ldr	r2, [pc, #40]	@ (8000e3c <HAL_Init+0x40>)
 8000e12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e18:	4b08      	ldr	r3, [pc, #32]	@ (8000e3c <HAL_Init+0x40>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a07      	ldr	r2, [pc, #28]	@ (8000e3c <HAL_Init+0x40>)
 8000e1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e24:	2003      	movs	r0, #3
 8000e26:	f000 fbc1 	bl	80015ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e2a:	200f      	movs	r0, #15
 8000e2c:	f000 f808 	bl	8000e40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e30:	f7ff fd6e 	bl	8000910 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40023c00 	.word	0x40023c00

08000e40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e48:	4b12      	ldr	r3, [pc, #72]	@ (8000e94 <HAL_InitTick+0x54>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	4b12      	ldr	r3, [pc, #72]	@ (8000e98 <HAL_InitTick+0x58>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	4619      	mov	r1, r3
 8000e52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 fbd9 	bl	8001616 <HAL_SYSTICK_Config>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e00e      	b.n	8000e8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2b0f      	cmp	r3, #15
 8000e72:	d80a      	bhi.n	8000e8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e74:	2200      	movs	r2, #0
 8000e76:	6879      	ldr	r1, [r7, #4]
 8000e78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e7c:	f000 fba1 	bl	80015c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e80:	4a06      	ldr	r2, [pc, #24]	@ (8000e9c <HAL_InitTick+0x5c>)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e86:	2300      	movs	r3, #0
 8000e88:	e000      	b.n	8000e8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000000 	.word	0x20000000
 8000e98:	20000008 	.word	0x20000008
 8000e9c:	20000004 	.word	0x20000004

08000ea0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea4:	4b06      	ldr	r3, [pc, #24]	@ (8000ec0 <HAL_IncTick+0x20>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <HAL_IncTick+0x24>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4413      	add	r3, r2
 8000eb0:	4a04      	ldr	r2, [pc, #16]	@ (8000ec4 <HAL_IncTick+0x24>)
 8000eb2:	6013      	str	r3, [r2, #0]
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	20000008 	.word	0x20000008
 8000ec4:	20000248 	.word	0x20000248

08000ec8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  return uwTick;
 8000ecc:	4b03      	ldr	r3, [pc, #12]	@ (8000edc <HAL_GetTick+0x14>)
 8000ece:	681b      	ldr	r3, [r3, #0]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	20000248 	.word	0x20000248

08000ee0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee8:	f7ff ffee 	bl	8000ec8 <HAL_GetTick>
 8000eec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000ef8:	d005      	beq.n	8000f06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000efa:	4b0a      	ldr	r3, [pc, #40]	@ (8000f24 <HAL_Delay+0x44>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	461a      	mov	r2, r3
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	4413      	add	r3, r2
 8000f04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f06:	bf00      	nop
 8000f08:	f7ff ffde 	bl	8000ec8 <HAL_GetTick>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	68fa      	ldr	r2, [r7, #12]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d8f7      	bhi.n	8000f08 <HAL_Delay+0x28>
  {
  }
}
 8000f18:	bf00      	nop
 8000f1a:	bf00      	nop
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000008 	.word	0x20000008

08000f28 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f30:	2300      	movs	r3, #0
 8000f32:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d101      	bne.n	8000f3e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e033      	b.n	8000fa6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d109      	bne.n	8000f5a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f7ff fb10 	bl	800056c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5e:	f003 0310 	and.w	r3, r3, #16
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d118      	bne.n	8000f98 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000f6e:	f023 0302 	bic.w	r3, r3, #2
 8000f72:	f043 0202 	orr.w	r2, r3, #2
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f000 f94a 	bl	8001214 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2200      	movs	r2, #0
 8000f84:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8a:	f023 0303 	bic.w	r3, r3, #3
 8000f8e:	f043 0201 	orr.w	r2, r3, #1
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f96:	e001      	b.n	8000f9c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
	...

08000fb0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d101      	bne.n	8000fcc <HAL_ADC_ConfigChannel+0x1c>
 8000fc8:	2302      	movs	r3, #2
 8000fca:	e113      	b.n	80011f4 <HAL_ADC_ConfigChannel+0x244>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2201      	movs	r2, #1
 8000fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b09      	cmp	r3, #9
 8000fda:	d925      	bls.n	8001028 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	68d9      	ldr	r1, [r3, #12]
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4613      	mov	r3, r2
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	4413      	add	r3, r2
 8000ff0:	3b1e      	subs	r3, #30
 8000ff2:	2207      	movs	r2, #7
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43da      	mvns	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	400a      	ands	r2, r1
 8001000:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	68d9      	ldr	r1, [r3, #12]
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	689a      	ldr	r2, [r3, #8]
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	b29b      	uxth	r3, r3
 8001012:	4618      	mov	r0, r3
 8001014:	4603      	mov	r3, r0
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	4403      	add	r3, r0
 800101a:	3b1e      	subs	r3, #30
 800101c:	409a      	lsls	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	430a      	orrs	r2, r1
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	e022      	b.n	800106e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	6919      	ldr	r1, [r3, #16]
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	b29b      	uxth	r3, r3
 8001034:	461a      	mov	r2, r3
 8001036:	4613      	mov	r3, r2
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	4413      	add	r3, r2
 800103c:	2207      	movs	r2, #7
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43da      	mvns	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	400a      	ands	r2, r1
 800104a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	6919      	ldr	r1, [r3, #16]
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	689a      	ldr	r2, [r3, #8]
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	b29b      	uxth	r3, r3
 800105c:	4618      	mov	r0, r3
 800105e:	4603      	mov	r3, r0
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	4403      	add	r3, r0
 8001064:	409a      	lsls	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	430a      	orrs	r2, r1
 800106c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	2b06      	cmp	r3, #6
 8001074:	d824      	bhi.n	80010c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685a      	ldr	r2, [r3, #4]
 8001080:	4613      	mov	r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	4413      	add	r3, r2
 8001086:	3b05      	subs	r3, #5
 8001088:	221f      	movs	r2, #31
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43da      	mvns	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	400a      	ands	r2, r1
 8001096:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	4618      	mov	r0, r3
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685a      	ldr	r2, [r3, #4]
 80010aa:	4613      	mov	r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	3b05      	subs	r3, #5
 80010b2:	fa00 f203 	lsl.w	r2, r0, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	430a      	orrs	r2, r1
 80010bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80010be:	e04c      	b.n	800115a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	2b0c      	cmp	r3, #12
 80010c6:	d824      	bhi.n	8001112 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685a      	ldr	r2, [r3, #4]
 80010d2:	4613      	mov	r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	4413      	add	r3, r2
 80010d8:	3b23      	subs	r3, #35	@ 0x23
 80010da:	221f      	movs	r2, #31
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43da      	mvns	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	400a      	ands	r2, r1
 80010e8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	4618      	mov	r0, r3
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685a      	ldr	r2, [r3, #4]
 80010fc:	4613      	mov	r3, r2
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	4413      	add	r3, r2
 8001102:	3b23      	subs	r3, #35	@ 0x23
 8001104:	fa00 f203 	lsl.w	r2, r0, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	430a      	orrs	r2, r1
 800110e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001110:	e023      	b.n	800115a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685a      	ldr	r2, [r3, #4]
 800111c:	4613      	mov	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	4413      	add	r3, r2
 8001122:	3b41      	subs	r3, #65	@ 0x41
 8001124:	221f      	movs	r2, #31
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43da      	mvns	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	400a      	ands	r2, r1
 8001132:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	b29b      	uxth	r3, r3
 8001140:	4618      	mov	r0, r3
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685a      	ldr	r2, [r3, #4]
 8001146:	4613      	mov	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	4413      	add	r3, r2
 800114c:	3b41      	subs	r3, #65	@ 0x41
 800114e:	fa00 f203 	lsl.w	r2, r0, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	430a      	orrs	r2, r1
 8001158:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800115a:	4b29      	ldr	r3, [pc, #164]	@ (8001200 <HAL_ADC_ConfigChannel+0x250>)
 800115c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a28      	ldr	r2, [pc, #160]	@ (8001204 <HAL_ADC_ConfigChannel+0x254>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d10f      	bne.n	8001188 <HAL_ADC_ConfigChannel+0x1d8>
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b12      	cmp	r3, #18
 800116e:	d10b      	bne.n	8001188 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a1d      	ldr	r2, [pc, #116]	@ (8001204 <HAL_ADC_ConfigChannel+0x254>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d12b      	bne.n	80011ea <HAL_ADC_ConfigChannel+0x23a>
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a1c      	ldr	r2, [pc, #112]	@ (8001208 <HAL_ADC_ConfigChannel+0x258>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d003      	beq.n	80011a4 <HAL_ADC_ConfigChannel+0x1f4>
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2b11      	cmp	r3, #17
 80011a2:	d122      	bne.n	80011ea <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a11      	ldr	r2, [pc, #68]	@ (8001208 <HAL_ADC_ConfigChannel+0x258>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d111      	bne.n	80011ea <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011c6:	4b11      	ldr	r3, [pc, #68]	@ (800120c <HAL_ADC_ConfigChannel+0x25c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a11      	ldr	r2, [pc, #68]	@ (8001210 <HAL_ADC_ConfigChannel+0x260>)
 80011cc:	fba2 2303 	umull	r2, r3, r2, r3
 80011d0:	0c9a      	lsrs	r2, r3, #18
 80011d2:	4613      	mov	r3, r2
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	4413      	add	r3, r2
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80011dc:	e002      	b.n	80011e4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	3b01      	subs	r3, #1
 80011e2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d1f9      	bne.n	80011de <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80011f2:	2300      	movs	r3, #0
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	40012300 	.word	0x40012300
 8001204:	40012000 	.word	0x40012000
 8001208:	10000012 	.word	0x10000012
 800120c:	20000000 	.word	0x20000000
 8001210:	431bde83 	.word	0x431bde83

08001214 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800121c:	4b79      	ldr	r3, [pc, #484]	@ (8001404 <ADC_Init+0x1f0>)
 800121e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	685a      	ldr	r2, [r3, #4]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	431a      	orrs	r2, r3
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	685a      	ldr	r2, [r3, #4]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001248:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	6859      	ldr	r1, [r3, #4]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	691b      	ldr	r3, [r3, #16]
 8001254:	021a      	lsls	r2, r3, #8
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	430a      	orrs	r2, r1
 800125c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	685a      	ldr	r2, [r3, #4]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800126c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	6859      	ldr	r1, [r3, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689a      	ldr	r2, [r3, #8]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	430a      	orrs	r2, r1
 800127e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	689a      	ldr	r2, [r3, #8]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800128e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	6899      	ldr	r1, [r3, #8]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	68da      	ldr	r2, [r3, #12]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	430a      	orrs	r2, r1
 80012a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012a6:	4a58      	ldr	r2, [pc, #352]	@ (8001408 <ADC_Init+0x1f4>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d022      	beq.n	80012f2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	689a      	ldr	r2, [r3, #8]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80012ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	6899      	ldr	r1, [r3, #8]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	430a      	orrs	r2, r1
 80012cc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	689a      	ldr	r2, [r3, #8]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80012dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	6899      	ldr	r1, [r3, #8]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	430a      	orrs	r2, r1
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	e00f      	b.n	8001312 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	689a      	ldr	r2, [r3, #8]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001300:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	689a      	ldr	r2, [r3, #8]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001310:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	689a      	ldr	r2, [r3, #8]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f022 0202 	bic.w	r2, r2, #2
 8001320:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	6899      	ldr	r1, [r3, #8]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	7e1b      	ldrb	r3, [r3, #24]
 800132c:	005a      	lsls	r2, r3, #1
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	430a      	orrs	r2, r1
 8001334:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f893 3020 	ldrb.w	r3, [r3, #32]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d01b      	beq.n	8001378 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	685a      	ldr	r2, [r3, #4]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800134e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	685a      	ldr	r2, [r3, #4]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800135e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	6859      	ldr	r1, [r3, #4]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800136a:	3b01      	subs	r3, #1
 800136c:	035a      	lsls	r2, r3, #13
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	430a      	orrs	r2, r1
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	e007      	b.n	8001388 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	685a      	ldr	r2, [r3, #4]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001386:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001396:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	3b01      	subs	r3, #1
 80013a4:	051a      	lsls	r2, r3, #20
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	430a      	orrs	r2, r1
 80013ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	689a      	ldr	r2, [r3, #8]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80013bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	6899      	ldr	r1, [r3, #8]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80013ca:	025a      	lsls	r2, r3, #9
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	430a      	orrs	r2, r1
 80013d2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	689a      	ldr	r2, [r3, #8]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80013e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	6899      	ldr	r1, [r3, #8]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	029a      	lsls	r2, r3, #10
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	430a      	orrs	r2, r1
 80013f6:	609a      	str	r2, [r3, #8]
}
 80013f8:	bf00      	nop
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	40012300 	.word	0x40012300
 8001408:	0f000001 	.word	0x0f000001

0800140c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800141c:	4b0c      	ldr	r3, [pc, #48]	@ (8001450 <__NVIC_SetPriorityGrouping+0x44>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001428:	4013      	ands	r3, r2
 800142a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001434:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001438:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800143c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800143e:	4a04      	ldr	r2, [pc, #16]	@ (8001450 <__NVIC_SetPriorityGrouping+0x44>)
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	60d3      	str	r3, [r2, #12]
}
 8001444:	bf00      	nop
 8001446:	3714      	adds	r7, #20
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001458:	4b04      	ldr	r3, [pc, #16]	@ (800146c <__NVIC_GetPriorityGrouping+0x18>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	0a1b      	lsrs	r3, r3, #8
 800145e:	f003 0307 	and.w	r3, r3, #7
}
 8001462:	4618      	mov	r0, r3
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	2b00      	cmp	r3, #0
 8001480:	db0b      	blt.n	800149a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	f003 021f 	and.w	r2, r3, #31
 8001488:	4907      	ldr	r1, [pc, #28]	@ (80014a8 <__NVIC_EnableIRQ+0x38>)
 800148a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148e:	095b      	lsrs	r3, r3, #5
 8001490:	2001      	movs	r0, #1
 8001492:	fa00 f202 	lsl.w	r2, r0, r2
 8001496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	e000e100 	.word	0xe000e100

080014ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	6039      	str	r1, [r7, #0]
 80014b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	db0a      	blt.n	80014d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	490c      	ldr	r1, [pc, #48]	@ (80014f8 <__NVIC_SetPriority+0x4c>)
 80014c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ca:	0112      	lsls	r2, r2, #4
 80014cc:	b2d2      	uxtb	r2, r2
 80014ce:	440b      	add	r3, r1
 80014d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d4:	e00a      	b.n	80014ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	4908      	ldr	r1, [pc, #32]	@ (80014fc <__NVIC_SetPriority+0x50>)
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	f003 030f 	and.w	r3, r3, #15
 80014e2:	3b04      	subs	r3, #4
 80014e4:	0112      	lsls	r2, r2, #4
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	440b      	add	r3, r1
 80014ea:	761a      	strb	r2, [r3, #24]
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	e000e100 	.word	0xe000e100
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001500:	b480      	push	{r7}
 8001502:	b089      	sub	sp, #36	@ 0x24
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	f1c3 0307 	rsb	r3, r3, #7
 800151a:	2b04      	cmp	r3, #4
 800151c:	bf28      	it	cs
 800151e:	2304      	movcs	r3, #4
 8001520:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	3304      	adds	r3, #4
 8001526:	2b06      	cmp	r3, #6
 8001528:	d902      	bls.n	8001530 <NVIC_EncodePriority+0x30>
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3b03      	subs	r3, #3
 800152e:	e000      	b.n	8001532 <NVIC_EncodePriority+0x32>
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001534:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43da      	mvns	r2, r3
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	401a      	ands	r2, r3
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001548:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	fa01 f303 	lsl.w	r3, r1, r3
 8001552:	43d9      	mvns	r1, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001558:	4313      	orrs	r3, r2
         );
}
 800155a:	4618      	mov	r0, r3
 800155c:	3724      	adds	r7, #36	@ 0x24
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
	...

08001568 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3b01      	subs	r3, #1
 8001574:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001578:	d301      	bcc.n	800157e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800157a:	2301      	movs	r3, #1
 800157c:	e00f      	b.n	800159e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800157e:	4a0a      	ldr	r2, [pc, #40]	@ (80015a8 <SysTick_Config+0x40>)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3b01      	subs	r3, #1
 8001584:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001586:	210f      	movs	r1, #15
 8001588:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800158c:	f7ff ff8e 	bl	80014ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001590:	4b05      	ldr	r3, [pc, #20]	@ (80015a8 <SysTick_Config+0x40>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001596:	4b04      	ldr	r3, [pc, #16]	@ (80015a8 <SysTick_Config+0x40>)
 8001598:	2207      	movs	r2, #7
 800159a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	e000e010 	.word	0xe000e010

080015ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff ff29 	bl	800140c <__NVIC_SetPriorityGrouping>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b086      	sub	sp, #24
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	4603      	mov	r3, r0
 80015ca:	60b9      	str	r1, [r7, #8]
 80015cc:	607a      	str	r2, [r7, #4]
 80015ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015d4:	f7ff ff3e 	bl	8001454 <__NVIC_GetPriorityGrouping>
 80015d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	68b9      	ldr	r1, [r7, #8]
 80015de:	6978      	ldr	r0, [r7, #20]
 80015e0:	f7ff ff8e 	bl	8001500 <NVIC_EncodePriority>
 80015e4:	4602      	mov	r2, r0
 80015e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ea:	4611      	mov	r1, r2
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff ff5d 	bl	80014ac <__NVIC_SetPriority>
}
 80015f2:	bf00      	nop
 80015f4:	3718      	adds	r7, #24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	4603      	mov	r3, r0
 8001602:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff ff31 	bl	8001470 <__NVIC_EnableIRQ>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff ffa2 	bl	8001568 <SysTick_Config>
 8001624:	4603      	mov	r3, r0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
	...

08001630 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001630:	b480      	push	{r7}
 8001632:	b089      	sub	sp, #36	@ 0x24
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800163e:	2300      	movs	r3, #0
 8001640:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001642:	2300      	movs	r3, #0
 8001644:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001646:	2300      	movs	r3, #0
 8001648:	61fb      	str	r3, [r7, #28]
 800164a:	e159      	b.n	8001900 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800164c:	2201      	movs	r2, #1
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	697a      	ldr	r2, [r7, #20]
 800165c:	4013      	ands	r3, r2
 800165e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	429a      	cmp	r2, r3
 8001666:	f040 8148 	bne.w	80018fa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f003 0303 	and.w	r3, r3, #3
 8001672:	2b01      	cmp	r3, #1
 8001674:	d005      	beq.n	8001682 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800167e:	2b02      	cmp	r3, #2
 8001680:	d130      	bne.n	80016e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	2203      	movs	r2, #3
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	43db      	mvns	r3, r3
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4013      	ands	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	68da      	ldr	r2, [r3, #12]
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016b8:	2201      	movs	r2, #1
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	43db      	mvns	r3, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	091b      	lsrs	r3, r3, #4
 80016ce:	f003 0201 	and.w	r2, r3, #1
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	4313      	orrs	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f003 0303 	and.w	r3, r3, #3
 80016ec:	2b03      	cmp	r3, #3
 80016ee:	d017      	beq.n	8001720 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	2203      	movs	r2, #3
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	43db      	mvns	r3, r3
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	4013      	ands	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	4313      	orrs	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f003 0303 	and.w	r3, r3, #3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d123      	bne.n	8001774 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	08da      	lsrs	r2, r3, #3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3208      	adds	r2, #8
 8001734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001738:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	f003 0307 	and.w	r3, r3, #7
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	220f      	movs	r2, #15
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	4013      	ands	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	691a      	ldr	r2, [r3, #16]
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4313      	orrs	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	08da      	lsrs	r2, r3, #3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	3208      	adds	r2, #8
 800176e:	69b9      	ldr	r1, [r7, #24]
 8001770:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	2203      	movs	r2, #3
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4013      	ands	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f003 0203 	and.w	r2, r3, #3
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	4313      	orrs	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f000 80a2 	beq.w	80018fa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	4b57      	ldr	r3, [pc, #348]	@ (8001918 <HAL_GPIO_Init+0x2e8>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017be:	4a56      	ldr	r2, [pc, #344]	@ (8001918 <HAL_GPIO_Init+0x2e8>)
 80017c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017c6:	4b54      	ldr	r3, [pc, #336]	@ (8001918 <HAL_GPIO_Init+0x2e8>)
 80017c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017d2:	4a52      	ldr	r2, [pc, #328]	@ (800191c <HAL_GPIO_Init+0x2ec>)
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	089b      	lsrs	r3, r3, #2
 80017d8:	3302      	adds	r3, #2
 80017da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	f003 0303 	and.w	r3, r3, #3
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	220f      	movs	r2, #15
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	43db      	mvns	r3, r3
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4013      	ands	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a49      	ldr	r2, [pc, #292]	@ (8001920 <HAL_GPIO_Init+0x2f0>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d019      	beq.n	8001832 <HAL_GPIO_Init+0x202>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a48      	ldr	r2, [pc, #288]	@ (8001924 <HAL_GPIO_Init+0x2f4>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d013      	beq.n	800182e <HAL_GPIO_Init+0x1fe>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a47      	ldr	r2, [pc, #284]	@ (8001928 <HAL_GPIO_Init+0x2f8>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d00d      	beq.n	800182a <HAL_GPIO_Init+0x1fa>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a46      	ldr	r2, [pc, #280]	@ (800192c <HAL_GPIO_Init+0x2fc>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d007      	beq.n	8001826 <HAL_GPIO_Init+0x1f6>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a45      	ldr	r2, [pc, #276]	@ (8001930 <HAL_GPIO_Init+0x300>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d101      	bne.n	8001822 <HAL_GPIO_Init+0x1f2>
 800181e:	2304      	movs	r3, #4
 8001820:	e008      	b.n	8001834 <HAL_GPIO_Init+0x204>
 8001822:	2307      	movs	r3, #7
 8001824:	e006      	b.n	8001834 <HAL_GPIO_Init+0x204>
 8001826:	2303      	movs	r3, #3
 8001828:	e004      	b.n	8001834 <HAL_GPIO_Init+0x204>
 800182a:	2302      	movs	r3, #2
 800182c:	e002      	b.n	8001834 <HAL_GPIO_Init+0x204>
 800182e:	2301      	movs	r3, #1
 8001830:	e000      	b.n	8001834 <HAL_GPIO_Init+0x204>
 8001832:	2300      	movs	r3, #0
 8001834:	69fa      	ldr	r2, [r7, #28]
 8001836:	f002 0203 	and.w	r2, r2, #3
 800183a:	0092      	lsls	r2, r2, #2
 800183c:	4093      	lsls	r3, r2
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	4313      	orrs	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001844:	4935      	ldr	r1, [pc, #212]	@ (800191c <HAL_GPIO_Init+0x2ec>)
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	089b      	lsrs	r3, r3, #2
 800184a:	3302      	adds	r3, #2
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001852:	4b38      	ldr	r3, [pc, #224]	@ (8001934 <HAL_GPIO_Init+0x304>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	43db      	mvns	r3, r3
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	4013      	ands	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	4313      	orrs	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001876:	4a2f      	ldr	r2, [pc, #188]	@ (8001934 <HAL_GPIO_Init+0x304>)
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800187c:	4b2d      	ldr	r3, [pc, #180]	@ (8001934 <HAL_GPIO_Init+0x304>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	43db      	mvns	r3, r3
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4013      	ands	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d003      	beq.n	80018a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	4313      	orrs	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018a0:	4a24      	ldr	r2, [pc, #144]	@ (8001934 <HAL_GPIO_Init+0x304>)
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018a6:	4b23      	ldr	r3, [pc, #140]	@ (8001934 <HAL_GPIO_Init+0x304>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	43db      	mvns	r3, r3
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4013      	ands	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018ca:	4a1a      	ldr	r2, [pc, #104]	@ (8001934 <HAL_GPIO_Init+0x304>)
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018d0:	4b18      	ldr	r3, [pc, #96]	@ (8001934 <HAL_GPIO_Init+0x304>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	43db      	mvns	r3, r3
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4013      	ands	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d003      	beq.n	80018f4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018f4:	4a0f      	ldr	r2, [pc, #60]	@ (8001934 <HAL_GPIO_Init+0x304>)
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3301      	adds	r3, #1
 80018fe:	61fb      	str	r3, [r7, #28]
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	2b0f      	cmp	r3, #15
 8001904:	f67f aea2 	bls.w	800164c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001908:	bf00      	nop
 800190a:	bf00      	nop
 800190c:	3724      	adds	r7, #36	@ 0x24
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	40023800 	.word	0x40023800
 800191c:	40013800 	.word	0x40013800
 8001920:	40020000 	.word	0x40020000
 8001924:	40020400 	.word	0x40020400
 8001928:	40020800 	.word	0x40020800
 800192c:	40020c00 	.word	0x40020c00
 8001930:	40021000 	.word	0x40021000
 8001934:	40013c00 	.word	0x40013c00

08001938 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	460b      	mov	r3, r1
 8001942:	807b      	strh	r3, [r7, #2]
 8001944:	4613      	mov	r3, r2
 8001946:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001948:	787b      	ldrb	r3, [r7, #1]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800194e:	887a      	ldrh	r2, [r7, #2]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001954:	e003      	b.n	800195e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001956:	887b      	ldrh	r3, [r7, #2]
 8001958:	041a      	lsls	r2, r3, #16
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	619a      	str	r2, [r3, #24]
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b086      	sub	sp, #24
 800196e:	af02      	add	r7, sp, #8
 8001970:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d101      	bne.n	800197c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e101      	b.n	8001b80 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2b00      	cmp	r3, #0
 800198c:	d106      	bne.n	800199c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f006 f93e 	bl	8007c18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2203      	movs	r2, #3
 80019a0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80019aa:	d102      	bne.n	80019b2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f002 fd9d 	bl	80044f6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6818      	ldr	r0, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	7c1a      	ldrb	r2, [r3, #16]
 80019c4:	f88d 2000 	strb.w	r2, [sp]
 80019c8:	3304      	adds	r3, #4
 80019ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019cc:	f002 fc7c 	bl	80042c8 <USB_CoreInit>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d005      	beq.n	80019e2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2202      	movs	r2, #2
 80019da:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e0ce      	b.n	8001b80 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2100      	movs	r1, #0
 80019e8:	4618      	mov	r0, r3
 80019ea:	f002 fd95 	bl	8004518 <USB_SetCurrentMode>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d005      	beq.n	8001a00 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2202      	movs	r2, #2
 80019f8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e0bf      	b.n	8001b80 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a00:	2300      	movs	r3, #0
 8001a02:	73fb      	strb	r3, [r7, #15]
 8001a04:	e04a      	b.n	8001a9c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a06:	7bfa      	ldrb	r2, [r7, #15]
 8001a08:	6879      	ldr	r1, [r7, #4]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	4413      	add	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	440b      	add	r3, r1
 8001a14:	3315      	adds	r3, #21
 8001a16:	2201      	movs	r2, #1
 8001a18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a1a:	7bfa      	ldrb	r2, [r7, #15]
 8001a1c:	6879      	ldr	r1, [r7, #4]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	4413      	add	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	440b      	add	r3, r1
 8001a28:	3314      	adds	r3, #20
 8001a2a:	7bfa      	ldrb	r2, [r7, #15]
 8001a2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a2e:	7bfa      	ldrb	r2, [r7, #15]
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
 8001a32:	b298      	uxth	r0, r3
 8001a34:	6879      	ldr	r1, [r7, #4]
 8001a36:	4613      	mov	r3, r2
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	4413      	add	r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	440b      	add	r3, r1
 8001a40:	332e      	adds	r3, #46	@ 0x2e
 8001a42:	4602      	mov	r2, r0
 8001a44:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a46:	7bfa      	ldrb	r2, [r7, #15]
 8001a48:	6879      	ldr	r1, [r7, #4]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	4413      	add	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	440b      	add	r3, r1
 8001a54:	3318      	adds	r3, #24
 8001a56:	2200      	movs	r2, #0
 8001a58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a5a:	7bfa      	ldrb	r2, [r7, #15]
 8001a5c:	6879      	ldr	r1, [r7, #4]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	4413      	add	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	440b      	add	r3, r1
 8001a68:	331c      	adds	r3, #28
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a6e:	7bfa      	ldrb	r2, [r7, #15]
 8001a70:	6879      	ldr	r1, [r7, #4]
 8001a72:	4613      	mov	r3, r2
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	4413      	add	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	440b      	add	r3, r1
 8001a7c:	3320      	adds	r3, #32
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a82:	7bfa      	ldrb	r2, [r7, #15]
 8001a84:	6879      	ldr	r1, [r7, #4]
 8001a86:	4613      	mov	r3, r2
 8001a88:	00db      	lsls	r3, r3, #3
 8001a8a:	4413      	add	r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	440b      	add	r3, r1
 8001a90:	3324      	adds	r3, #36	@ 0x24
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a96:	7bfb      	ldrb	r3, [r7, #15]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	73fb      	strb	r3, [r7, #15]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	791b      	ldrb	r3, [r3, #4]
 8001aa0:	7bfa      	ldrb	r2, [r7, #15]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d3af      	bcc.n	8001a06 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	73fb      	strb	r3, [r7, #15]
 8001aaa:	e044      	b.n	8001b36 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001aac:	7bfa      	ldrb	r2, [r7, #15]
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	4413      	add	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	440b      	add	r3, r1
 8001aba:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001abe:	2200      	movs	r2, #0
 8001ac0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ac2:	7bfa      	ldrb	r2, [r7, #15]
 8001ac4:	6879      	ldr	r1, [r7, #4]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	4413      	add	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	440b      	add	r3, r1
 8001ad0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001ad4:	7bfa      	ldrb	r2, [r7, #15]
 8001ad6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ad8:	7bfa      	ldrb	r2, [r7, #15]
 8001ada:	6879      	ldr	r1, [r7, #4]
 8001adc:	4613      	mov	r3, r2
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	4413      	add	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001aea:	2200      	movs	r2, #0
 8001aec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001aee:	7bfa      	ldrb	r2, [r7, #15]
 8001af0:	6879      	ldr	r1, [r7, #4]
 8001af2:	4613      	mov	r3, r2
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	4413      	add	r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	440b      	add	r3, r1
 8001afc:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b04:	7bfa      	ldrb	r2, [r7, #15]
 8001b06:	6879      	ldr	r1, [r7, #4]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	4413      	add	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	440b      	add	r3, r1
 8001b12:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b1a:	7bfa      	ldrb	r2, [r7, #15]
 8001b1c:	6879      	ldr	r1, [r7, #4]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	4413      	add	r3, r2
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	440b      	add	r3, r1
 8001b28:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
 8001b32:	3301      	adds	r3, #1
 8001b34:	73fb      	strb	r3, [r7, #15]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	791b      	ldrb	r3, [r3, #4]
 8001b3a:	7bfa      	ldrb	r2, [r7, #15]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d3b5      	bcc.n	8001aac <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6818      	ldr	r0, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	7c1a      	ldrb	r2, [r3, #16]
 8001b48:	f88d 2000 	strb.w	r2, [sp]
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b50:	f002 fd2e 	bl	80045b0 <USB_DevInit>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d005      	beq.n	8001b66 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2202      	movs	r2, #2
 8001b5e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e00c      	b.n	8001b80 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f003 fd72 	bl	8005662 <USB_DevDisconnect>

  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3710      	adds	r7, #16
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d101      	bne.n	8001ba4 <HAL_PCD_Start+0x1c>
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	e022      	b.n	8001bea <HAL_PCD_Start+0x62>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d009      	beq.n	8001bcc <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d105      	bne.n	8001bcc <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bc4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f002 fc7f 	bl	80044d4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f003 fd20 	bl	8005620 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001bf2:	b590      	push	{r4, r7, lr}
 8001bf4:	b08d      	sub	sp, #52	@ 0x34
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c00:	6a3b      	ldr	r3, [r7, #32]
 8001c02:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f003 fdde 	bl	80057ca <USB_GetMode>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f040 848c 	bne.w	800252e <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f003 fd42 	bl	80056a4 <USB_ReadInterrupts>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f000 8482 	beq.w	800252c <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	0a1b      	lsrs	r3, r3, #8
 8001c32:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f003 fd2f 	bl	80056a4 <USB_ReadInterrupts>
 8001c46:	4603      	mov	r3, r0
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d107      	bne.n	8001c60 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	695a      	ldr	r2, [r3, #20]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f002 0202 	and.w	r2, r2, #2
 8001c5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f003 fd1d 	bl	80056a4 <USB_ReadInterrupts>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	f003 0310 	and.w	r3, r3, #16
 8001c70:	2b10      	cmp	r3, #16
 8001c72:	d161      	bne.n	8001d38 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	699a      	ldr	r2, [r3, #24]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f022 0210 	bic.w	r2, r2, #16
 8001c82:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001c84:	6a3b      	ldr	r3, [r7, #32]
 8001c86:	6a1b      	ldr	r3, [r3, #32]
 8001c88:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	f003 020f 	and.w	r2, r3, #15
 8001c90:	4613      	mov	r3, r2
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	4413      	add	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	0c5b      	lsrs	r3, r3, #17
 8001ca8:	f003 030f 	and.w	r3, r3, #15
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d124      	bne.n	8001cfa <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d035      	beq.n	8001d28 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	091b      	lsrs	r3, r3, #4
 8001cc4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001cc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	461a      	mov	r2, r3
 8001cce:	6a38      	ldr	r0, [r7, #32]
 8001cd0:	f003 fb54 	bl	800537c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	68da      	ldr	r2, [r3, #12]
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	091b      	lsrs	r3, r3, #4
 8001cdc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ce0:	441a      	add	r2, r3
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	695a      	ldr	r2, [r3, #20]
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	091b      	lsrs	r3, r3, #4
 8001cee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cf2:	441a      	add	r2, r3
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	615a      	str	r2, [r3, #20]
 8001cf8:	e016      	b.n	8001d28 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	0c5b      	lsrs	r3, r3, #17
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	2b06      	cmp	r3, #6
 8001d04:	d110      	bne.n	8001d28 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001d0c:	2208      	movs	r2, #8
 8001d0e:	4619      	mov	r1, r3
 8001d10:	6a38      	ldr	r0, [r7, #32]
 8001d12:	f003 fb33 	bl	800537c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	695a      	ldr	r2, [r3, #20]
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	091b      	lsrs	r3, r3, #4
 8001d1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d22:	441a      	add	r2, r3
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	699a      	ldr	r2, [r3, #24]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f042 0210 	orr.w	r2, r2, #16
 8001d36:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f003 fcb1 	bl	80056a4 <USB_ReadInterrupts>
 8001d42:	4603      	mov	r3, r0
 8001d44:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d48:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001d4c:	f040 80a7 	bne.w	8001e9e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f003 fcb6 	bl	80056ca <USB_ReadDevAllOutEpInterrupt>
 8001d5e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001d60:	e099      	b.n	8001e96 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f000 808e 	beq.w	8001e8a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d74:	b2d2      	uxtb	r2, r2
 8001d76:	4611      	mov	r1, r2
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f003 fcda 	bl	8005732 <USB_ReadDevOutEPInterrupt>
 8001d7e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00c      	beq.n	8001da4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d8c:	015a      	lsls	r2, r3, #5
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	4413      	add	r3, r2
 8001d92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d96:	461a      	mov	r2, r3
 8001d98:	2301      	movs	r3, #1
 8001d9a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001d9c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 fea2 	bl	8002ae8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	f003 0308 	and.w	r3, r3, #8
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d00c      	beq.n	8001dc8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db0:	015a      	lsls	r2, r3, #5
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	4413      	add	r3, r2
 8001db6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001dba:	461a      	mov	r2, r3
 8001dbc:	2308      	movs	r3, #8
 8001dbe:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001dc0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 ff78 	bl	8002cb8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	f003 0310 	and.w	r3, r3, #16
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d008      	beq.n	8001de4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd4:	015a      	lsls	r2, r3, #5
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	4413      	add	r3, r2
 8001dda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001dde:	461a      	mov	r2, r3
 8001de0:	2310      	movs	r3, #16
 8001de2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d030      	beq.n	8001e50 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001dee:	6a3b      	ldr	r3, [r7, #32]
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001df6:	2b80      	cmp	r3, #128	@ 0x80
 8001df8:	d109      	bne.n	8001e0e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	69fa      	ldr	r2, [r7, #28]
 8001e04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e08:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e0c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001e0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e10:	4613      	mov	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	4413      	add	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	4413      	add	r3, r2
 8001e20:	3304      	adds	r3, #4
 8001e22:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	78db      	ldrb	r3, [r3, #3]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d108      	bne.n	8001e3e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	4619      	mov	r1, r3
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f005 ffe9 	bl	8007e10 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e40:	015a      	lsls	r2, r3, #5
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	4413      	add	r3, r2
 8001e46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	f003 0320 	and.w	r3, r3, #32
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d008      	beq.n	8001e6c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e5c:	015a      	lsls	r2, r3, #5
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	4413      	add	r3, r2
 8001e62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e66:	461a      	mov	r2, r3
 8001e68:	2320      	movs	r3, #32
 8001e6a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d009      	beq.n	8001e8a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e78:	015a      	lsls	r2, r3, #5
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e82:	461a      	mov	r2, r3
 8001e84:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e88:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e92:	085b      	lsrs	r3, r3, #1
 8001e94:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	f47f af62 	bne.w	8001d62 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f003 fbfe 	bl	80056a4 <USB_ReadInterrupts>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001eae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001eb2:	f040 80db 	bne.w	800206c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f003 fc1f 	bl	80056fe <USB_ReadDevAllInEpInterrupt>
 8001ec0:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001ec6:	e0cd      	b.n	8002064 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f000 80c2 	beq.w	8002058 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001eda:	b2d2      	uxtb	r2, r2
 8001edc:	4611      	mov	r1, r2
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f003 fc45 	bl	800576e <USB_ReadDevInEPInterrupt>
 8001ee4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d057      	beq.n	8001fa0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	69f9      	ldr	r1, [r7, #28]
 8001f0c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001f10:	4013      	ands	r3, r2
 8001f12:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f16:	015a      	lsls	r2, r3, #5
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f20:	461a      	mov	r2, r3
 8001f22:	2301      	movs	r3, #1
 8001f24:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	799b      	ldrb	r3, [r3, #6]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d132      	bne.n	8001f94 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f32:	4613      	mov	r3, r2
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	4413      	add	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	440b      	add	r3, r1
 8001f3c:	3320      	adds	r3, #32
 8001f3e:	6819      	ldr	r1, [r3, #0]
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f44:	4613      	mov	r3, r2
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	4413      	add	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4403      	add	r3, r0
 8001f4e:	331c      	adds	r3, #28
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4419      	add	r1, r3
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f58:	4613      	mov	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	4413      	add	r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4403      	add	r3, r0
 8001f62:	3320      	adds	r3, #32
 8001f64:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d113      	bne.n	8001f94 <HAL_PCD_IRQHandler+0x3a2>
 8001f6c:	6879      	ldr	r1, [r7, #4]
 8001f6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f70:	4613      	mov	r3, r2
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	4413      	add	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	440b      	add	r3, r1
 8001f7a:	3324      	adds	r3, #36	@ 0x24
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d108      	bne.n	8001f94 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6818      	ldr	r0, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	2101      	movs	r1, #1
 8001f90:	f003 fc4c 	bl	800582c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	4619      	mov	r1, r3
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f005 febd 	bl	8007d1a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d008      	beq.n	8001fbc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fac:	015a      	lsls	r2, r3, #5
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	2308      	movs	r3, #8
 8001fba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	f003 0310 	and.w	r3, r3, #16
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d008      	beq.n	8001fd8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc8:	015a      	lsls	r2, r3, #5
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	4413      	add	r3, r2
 8001fce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	2310      	movs	r3, #16
 8001fd6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d008      	beq.n	8001ff4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe4:	015a      	lsls	r2, r3, #5
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	4413      	add	r3, r2
 8001fea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001fee:	461a      	mov	r2, r3
 8001ff0:	2340      	movs	r3, #64	@ 0x40
 8001ff2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d023      	beq.n	8002046 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001ffe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002000:	6a38      	ldr	r0, [r7, #32]
 8002002:	f002 fc39 	bl	8004878 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002006:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002008:	4613      	mov	r3, r2
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	4413      	add	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	3310      	adds	r3, #16
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	4413      	add	r3, r2
 8002016:	3304      	adds	r3, #4
 8002018:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	78db      	ldrb	r3, [r3, #3]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d108      	bne.n	8002034 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	2200      	movs	r2, #0
 8002026:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202a:	b2db      	uxtb	r3, r3
 800202c:	4619      	mov	r1, r3
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f005 ff00 	bl	8007e34 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002036:	015a      	lsls	r2, r3, #5
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	4413      	add	r3, r2
 800203c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002040:	461a      	mov	r2, r3
 8002042:	2302      	movs	r3, #2
 8002044:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800204c:	2b00      	cmp	r3, #0
 800204e:	d003      	beq.n	8002058 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002050:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 fcbb 	bl	80029ce <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205a:	3301      	adds	r3, #1
 800205c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800205e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002060:	085b      	lsrs	r3, r3, #1
 8002062:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002066:	2b00      	cmp	r3, #0
 8002068:	f47f af2e 	bne.w	8001ec8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f003 fb17 	bl	80056a4 <USB_ReadInterrupts>
 8002076:	4603      	mov	r3, r0
 8002078:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800207c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002080:	d122      	bne.n	80020c8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	69fa      	ldr	r2, [r7, #28]
 800208c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002090:	f023 0301 	bic.w	r3, r3, #1
 8002094:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800209c:	2b01      	cmp	r3, #1
 800209e:	d108      	bne.n	80020b2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80020a8:	2100      	movs	r1, #0
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 fea2 	bl	8002df4 <HAL_PCDEx_LPM_Callback>
 80020b0:	e002      	b.n	80020b8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f005 fe9e 	bl	8007df4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	695a      	ldr	r2, [r3, #20]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80020c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f003 fae9 	bl	80056a4 <USB_ReadInterrupts>
 80020d2:	4603      	mov	r3, r0
 80020d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80020dc:	d112      	bne.n	8002104 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d102      	bne.n	80020f4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f005 fe5a 	bl	8007da8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	695a      	ldr	r2, [r3, #20]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002102:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f003 facb 	bl	80056a4 <USB_ReadInterrupts>
 800210e:	4603      	mov	r3, r0
 8002110:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002114:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002118:	f040 80b7 	bne.w	800228a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	69fa      	ldr	r2, [r7, #28]
 8002126:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800212a:	f023 0301 	bic.w	r3, r3, #1
 800212e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2110      	movs	r1, #16
 8002136:	4618      	mov	r0, r3
 8002138:	f002 fb9e 	bl	8004878 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800213c:	2300      	movs	r3, #0
 800213e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002140:	e046      	b.n	80021d0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002144:	015a      	lsls	r2, r3, #5
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	4413      	add	r3, r2
 800214a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800214e:	461a      	mov	r2, r3
 8002150:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002154:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002158:	015a      	lsls	r2, r3, #5
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	4413      	add	r3, r2
 800215e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002166:	0151      	lsls	r1, r2, #5
 8002168:	69fa      	ldr	r2, [r7, #28]
 800216a:	440a      	add	r2, r1
 800216c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002170:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002174:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002178:	015a      	lsls	r2, r3, #5
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	4413      	add	r3, r2
 800217e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002182:	461a      	mov	r2, r3
 8002184:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002188:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800218a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800218c:	015a      	lsls	r2, r3, #5
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	4413      	add	r3, r2
 8002192:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800219a:	0151      	lsls	r1, r2, #5
 800219c:	69fa      	ldr	r2, [r7, #28]
 800219e:	440a      	add	r2, r1
 80021a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80021a4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80021a8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80021aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021ac:	015a      	lsls	r2, r3, #5
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	4413      	add	r3, r2
 80021b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021ba:	0151      	lsls	r1, r2, #5
 80021bc:	69fa      	ldr	r2, [r7, #28]
 80021be:	440a      	add	r2, r1
 80021c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80021c4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80021c8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021cc:	3301      	adds	r3, #1
 80021ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	791b      	ldrb	r3, [r3, #4]
 80021d4:	461a      	mov	r2, r3
 80021d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021d8:	4293      	cmp	r3, r2
 80021da:	d3b2      	bcc.n	8002142 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	69fa      	ldr	r2, [r7, #28]
 80021e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80021ea:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80021ee:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	7bdb      	ldrb	r3, [r3, #15]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d016      	beq.n	8002226 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002202:	69fa      	ldr	r2, [r7, #28]
 8002204:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002208:	f043 030b 	orr.w	r3, r3, #11
 800220c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002216:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002218:	69fa      	ldr	r2, [r7, #28]
 800221a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800221e:	f043 030b 	orr.w	r3, r3, #11
 8002222:	6453      	str	r3, [r2, #68]	@ 0x44
 8002224:	e015      	b.n	8002252 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	69fa      	ldr	r2, [r7, #28]
 8002230:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002234:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002238:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800223c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	69fa      	ldr	r2, [r7, #28]
 8002248:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800224c:	f043 030b 	orr.w	r3, r3, #11
 8002250:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	69fa      	ldr	r2, [r7, #28]
 800225c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002260:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002264:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6818      	ldr	r0, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002274:	461a      	mov	r2, r3
 8002276:	f003 fad9 	bl	800582c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	695a      	ldr	r2, [r3, #20]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002288:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4618      	mov	r0, r3
 8002290:	f003 fa08 	bl	80056a4 <USB_ReadInterrupts>
 8002294:	4603      	mov	r3, r0
 8002296:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800229a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800229e:	d123      	bne.n	80022e8 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f003 fa9e 	bl	80057e6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f002 fb5b 	bl	800496a <USB_GetDevSpeed>
 80022b4:	4603      	mov	r3, r0
 80022b6:	461a      	mov	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681c      	ldr	r4, [r3, #0]
 80022c0:	f001 f9c8 	bl	8003654 <HAL_RCC_GetHCLKFreq>
 80022c4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80022ca:	461a      	mov	r2, r3
 80022cc:	4620      	mov	r0, r4
 80022ce:	f002 f85f 	bl	8004390 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f005 fd49 	bl	8007d6a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	695a      	ldr	r2, [r3, #20]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80022e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f003 f9d9 	bl	80056a4 <USB_ReadInterrupts>
 80022f2:	4603      	mov	r3, r0
 80022f4:	f003 0308 	and.w	r3, r3, #8
 80022f8:	2b08      	cmp	r3, #8
 80022fa:	d10a      	bne.n	8002312 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f005 fd26 	bl	8007d4e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	695a      	ldr	r2, [r3, #20]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f002 0208 	and.w	r2, r2, #8
 8002310:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f003 f9c4 	bl	80056a4 <USB_ReadInterrupts>
 800231c:	4603      	mov	r3, r0
 800231e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002322:	2b80      	cmp	r3, #128	@ 0x80
 8002324:	d123      	bne.n	800236e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002326:	6a3b      	ldr	r3, [r7, #32]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800232e:	6a3b      	ldr	r3, [r7, #32]
 8002330:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002332:	2301      	movs	r3, #1
 8002334:	627b      	str	r3, [r7, #36]	@ 0x24
 8002336:	e014      	b.n	8002362 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800233c:	4613      	mov	r3, r2
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	4413      	add	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	440b      	add	r3, r1
 8002346:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d105      	bne.n	800235c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002352:	b2db      	uxtb	r3, r3
 8002354:	4619      	mov	r1, r3
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 fb08 	bl	800296c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800235c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800235e:	3301      	adds	r3, #1
 8002360:	627b      	str	r3, [r7, #36]	@ 0x24
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	791b      	ldrb	r3, [r3, #4]
 8002366:	461a      	mov	r2, r3
 8002368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236a:	4293      	cmp	r3, r2
 800236c:	d3e4      	bcc.n	8002338 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f003 f996 	bl	80056a4 <USB_ReadInterrupts>
 8002378:	4603      	mov	r3, r0
 800237a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800237e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002382:	d13c      	bne.n	80023fe <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002384:	2301      	movs	r3, #1
 8002386:	627b      	str	r3, [r7, #36]	@ 0x24
 8002388:	e02b      	b.n	80023e2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800238a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800238c:	015a      	lsls	r2, r3, #5
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	4413      	add	r3, r2
 8002392:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800239e:	4613      	mov	r3, r2
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	4413      	add	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	440b      	add	r3, r1
 80023a8:	3318      	adds	r3, #24
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d115      	bne.n	80023dc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80023b0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	da12      	bge.n	80023dc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023ba:	4613      	mov	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	4413      	add	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	440b      	add	r3, r1
 80023c4:	3317      	adds	r3, #23
 80023c6:	2201      	movs	r2, #1
 80023c8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80023ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	4619      	mov	r1, r3
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 fac8 	bl	800296c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023de:	3301      	adds	r3, #1
 80023e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	791b      	ldrb	r3, [r3, #4]
 80023e6:	461a      	mov	r2, r3
 80023e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d3cd      	bcc.n	800238a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	695a      	ldr	r2, [r3, #20]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80023fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f003 f94e 	bl	80056a4 <USB_ReadInterrupts>
 8002408:	4603      	mov	r3, r0
 800240a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800240e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002412:	d156      	bne.n	80024c2 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002414:	2301      	movs	r3, #1
 8002416:	627b      	str	r3, [r7, #36]	@ 0x24
 8002418:	e045      	b.n	80024a6 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800241a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241c:	015a      	lsls	r2, r3, #5
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	4413      	add	r3, r2
 8002422:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800242e:	4613      	mov	r3, r2
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	4413      	add	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	440b      	add	r3, r1
 8002438:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d12e      	bne.n	80024a0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002442:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002444:	2b00      	cmp	r3, #0
 8002446:	da2b      	bge.n	80024a0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002454:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002458:	429a      	cmp	r2, r3
 800245a:	d121      	bne.n	80024a0 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800245c:	6879      	ldr	r1, [r7, #4]
 800245e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002460:	4613      	mov	r3, r2
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	4413      	add	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	440b      	add	r3, r1
 800246a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800246e:	2201      	movs	r2, #1
 8002470:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002472:	6a3b      	ldr	r3, [r7, #32]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800247a:	6a3b      	ldr	r3, [r7, #32]
 800247c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800247e:	6a3b      	ldr	r3, [r7, #32]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10a      	bne.n	80024a0 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	69fa      	ldr	r2, [r7, #28]
 8002494:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002498:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800249c:	6053      	str	r3, [r2, #4]
            break;
 800249e:	e008      	b.n	80024b2 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a2:	3301      	adds	r3, #1
 80024a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	791b      	ldrb	r3, [r3, #4]
 80024aa:	461a      	mov	r2, r3
 80024ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d3b3      	bcc.n	800241a <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	695a      	ldr	r2, [r3, #20]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80024c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f003 f8ec 	bl	80056a4 <USB_ReadInterrupts>
 80024cc:	4603      	mov	r3, r0
 80024ce:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80024d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024d6:	d10a      	bne.n	80024ee <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f005 fcbd 	bl	8007e58 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	695a      	ldr	r2, [r3, #20]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80024ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f003 f8d6 	bl	80056a4 <USB_ReadInterrupts>
 80024f8:	4603      	mov	r3, r0
 80024fa:	f003 0304 	and.w	r3, r3, #4
 80024fe:	2b04      	cmp	r3, #4
 8002500:	d115      	bne.n	800252e <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b00      	cmp	r3, #0
 8002512:	d002      	beq.n	800251a <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f005 fcad 	bl	8007e74 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6859      	ldr	r1, [r3, #4]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	430a      	orrs	r2, r1
 8002528:	605a      	str	r2, [r3, #4]
 800252a:	e000      	b.n	800252e <HAL_PCD_IRQHandler+0x93c>
      return;
 800252c:	bf00      	nop
    }
  }
}
 800252e:	3734      	adds	r7, #52	@ 0x34
 8002530:	46bd      	mov	sp, r7
 8002532:	bd90      	pop	{r4, r7, pc}

08002534 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	460b      	mov	r3, r1
 800253e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002546:	2b01      	cmp	r3, #1
 8002548:	d101      	bne.n	800254e <HAL_PCD_SetAddress+0x1a>
 800254a:	2302      	movs	r3, #2
 800254c:	e012      	b.n	8002574 <HAL_PCD_SetAddress+0x40>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2201      	movs	r2, #1
 8002552:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	78fa      	ldrb	r2, [r7, #3]
 800255a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	78fa      	ldrb	r2, [r7, #3]
 8002562:	4611      	mov	r1, r2
 8002564:	4618      	mov	r0, r3
 8002566:	f003 f835 	bl	80055d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	4608      	mov	r0, r1
 8002586:	4611      	mov	r1, r2
 8002588:	461a      	mov	r2, r3
 800258a:	4603      	mov	r3, r0
 800258c:	70fb      	strb	r3, [r7, #3]
 800258e:	460b      	mov	r3, r1
 8002590:	803b      	strh	r3, [r7, #0]
 8002592:	4613      	mov	r3, r2
 8002594:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002596:	2300      	movs	r3, #0
 8002598:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800259a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	da0f      	bge.n	80025c2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025a2:	78fb      	ldrb	r3, [r7, #3]
 80025a4:	f003 020f 	and.w	r2, r3, #15
 80025a8:	4613      	mov	r3, r2
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	4413      	add	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	3310      	adds	r3, #16
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	4413      	add	r3, r2
 80025b6:	3304      	adds	r3, #4
 80025b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2201      	movs	r2, #1
 80025be:	705a      	strb	r2, [r3, #1]
 80025c0:	e00f      	b.n	80025e2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025c2:	78fb      	ldrb	r3, [r7, #3]
 80025c4:	f003 020f 	and.w	r2, r3, #15
 80025c8:	4613      	mov	r3, r2
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	4413      	add	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	4413      	add	r3, r2
 80025d8:	3304      	adds	r3, #4
 80025da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80025e2:	78fb      	ldrb	r3, [r7, #3]
 80025e4:	f003 030f 	and.w	r3, r3, #15
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80025ee:	883a      	ldrh	r2, [r7, #0]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	78ba      	ldrb	r2, [r7, #2]
 80025f8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	785b      	ldrb	r3, [r3, #1]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d004      	beq.n	800260c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	461a      	mov	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800260c:	78bb      	ldrb	r3, [r7, #2]
 800260e:	2b02      	cmp	r3, #2
 8002610:	d102      	bne.n	8002618 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800261e:	2b01      	cmp	r3, #1
 8002620:	d101      	bne.n	8002626 <HAL_PCD_EP_Open+0xaa>
 8002622:	2302      	movs	r3, #2
 8002624:	e00e      	b.n	8002644 <HAL_PCD_EP_Open+0xc8>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68f9      	ldr	r1, [r7, #12]
 8002634:	4618      	mov	r0, r3
 8002636:	f002 f9bd 	bl	80049b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002642:	7afb      	ldrb	r3, [r7, #11]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	460b      	mov	r3, r1
 8002656:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002658:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800265c:	2b00      	cmp	r3, #0
 800265e:	da0f      	bge.n	8002680 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002660:	78fb      	ldrb	r3, [r7, #3]
 8002662:	f003 020f 	and.w	r2, r3, #15
 8002666:	4613      	mov	r3, r2
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	4413      	add	r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	3310      	adds	r3, #16
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	4413      	add	r3, r2
 8002674:	3304      	adds	r3, #4
 8002676:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2201      	movs	r2, #1
 800267c:	705a      	strb	r2, [r3, #1]
 800267e:	e00f      	b.n	80026a0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002680:	78fb      	ldrb	r3, [r7, #3]
 8002682:	f003 020f 	and.w	r2, r3, #15
 8002686:	4613      	mov	r3, r2
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	4413      	add	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	4413      	add	r3, r2
 8002696:	3304      	adds	r3, #4
 8002698:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2200      	movs	r2, #0
 800269e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80026a0:	78fb      	ldrb	r3, [r7, #3]
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	b2da      	uxtb	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d101      	bne.n	80026ba <HAL_PCD_EP_Close+0x6e>
 80026b6:	2302      	movs	r3, #2
 80026b8:	e00e      	b.n	80026d8 <HAL_PCD_EP_Close+0x8c>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68f9      	ldr	r1, [r7, #12]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f002 f9fb 	bl	8004ac4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	607a      	str	r2, [r7, #4]
 80026ea:	603b      	str	r3, [r7, #0]
 80026ec:	460b      	mov	r3, r1
 80026ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026f0:	7afb      	ldrb	r3, [r7, #11]
 80026f2:	f003 020f 	and.w	r2, r3, #15
 80026f6:	4613      	mov	r3, r2
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	4413      	add	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	4413      	add	r3, r2
 8002706:	3304      	adds	r3, #4
 8002708:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	2200      	movs	r2, #0
 800271a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	2200      	movs	r2, #0
 8002720:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002722:	7afb      	ldrb	r3, [r7, #11]
 8002724:	f003 030f 	and.w	r3, r3, #15
 8002728:	b2da      	uxtb	r2, r3
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	799b      	ldrb	r3, [r3, #6]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d102      	bne.n	800273c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6818      	ldr	r0, [r3, #0]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	799b      	ldrb	r3, [r3, #6]
 8002744:	461a      	mov	r2, r3
 8002746:	6979      	ldr	r1, [r7, #20]
 8002748:	f002 fa98 	bl	8004c7c <USB_EPStartXfer>

  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3718      	adds	r7, #24
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002756:	b480      	push	{r7}
 8002758:	b083      	sub	sp, #12
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
 800275e:	460b      	mov	r3, r1
 8002760:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002762:	78fb      	ldrb	r3, [r7, #3]
 8002764:	f003 020f 	and.w	r2, r3, #15
 8002768:	6879      	ldr	r1, [r7, #4]
 800276a:	4613      	mov	r3, r2
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	4413      	add	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	440b      	add	r3, r1
 8002774:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002778:	681b      	ldr	r3, [r3, #0]
}
 800277a:	4618      	mov	r0, r3
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr

08002786 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b086      	sub	sp, #24
 800278a:	af00      	add	r7, sp, #0
 800278c:	60f8      	str	r0, [r7, #12]
 800278e:	607a      	str	r2, [r7, #4]
 8002790:	603b      	str	r3, [r7, #0]
 8002792:	460b      	mov	r3, r1
 8002794:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002796:	7afb      	ldrb	r3, [r7, #11]
 8002798:	f003 020f 	and.w	r2, r3, #15
 800279c:	4613      	mov	r3, r2
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	4413      	add	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	3310      	adds	r3, #16
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	4413      	add	r3, r2
 80027aa:	3304      	adds	r3, #4
 80027ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	2200      	movs	r2, #0
 80027be:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	2201      	movs	r2, #1
 80027c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027c6:	7afb      	ldrb	r3, [r7, #11]
 80027c8:	f003 030f 	and.w	r3, r3, #15
 80027cc:	b2da      	uxtb	r2, r3
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	799b      	ldrb	r3, [r3, #6]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d102      	bne.n	80027e0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6818      	ldr	r0, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	799b      	ldrb	r3, [r3, #6]
 80027e8:	461a      	mov	r2, r3
 80027ea:	6979      	ldr	r1, [r7, #20]
 80027ec:	f002 fa46 	bl	8004c7c <USB_EPStartXfer>

  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3718      	adds	r7, #24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b084      	sub	sp, #16
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
 8002802:	460b      	mov	r3, r1
 8002804:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002806:	78fb      	ldrb	r3, [r7, #3]
 8002808:	f003 030f 	and.w	r3, r3, #15
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	7912      	ldrb	r2, [r2, #4]
 8002810:	4293      	cmp	r3, r2
 8002812:	d901      	bls.n	8002818 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e04f      	b.n	80028b8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002818:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800281c:	2b00      	cmp	r3, #0
 800281e:	da0f      	bge.n	8002840 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002820:	78fb      	ldrb	r3, [r7, #3]
 8002822:	f003 020f 	and.w	r2, r3, #15
 8002826:	4613      	mov	r3, r2
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	4413      	add	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	3310      	adds	r3, #16
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	4413      	add	r3, r2
 8002834:	3304      	adds	r3, #4
 8002836:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2201      	movs	r2, #1
 800283c:	705a      	strb	r2, [r3, #1]
 800283e:	e00d      	b.n	800285c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002840:	78fa      	ldrb	r2, [r7, #3]
 8002842:	4613      	mov	r3, r2
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	4413      	add	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	4413      	add	r3, r2
 8002852:	3304      	adds	r3, #4
 8002854:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2201      	movs	r2, #1
 8002860:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002862:	78fb      	ldrb	r3, [r7, #3]
 8002864:	f003 030f 	and.w	r3, r3, #15
 8002868:	b2da      	uxtb	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002874:	2b01      	cmp	r3, #1
 8002876:	d101      	bne.n	800287c <HAL_PCD_EP_SetStall+0x82>
 8002878:	2302      	movs	r3, #2
 800287a:	e01d      	b.n	80028b8 <HAL_PCD_EP_SetStall+0xbe>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68f9      	ldr	r1, [r7, #12]
 800288a:	4618      	mov	r0, r3
 800288c:	f002 fdce 	bl	800542c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002890:	78fb      	ldrb	r3, [r7, #3]
 8002892:	f003 030f 	and.w	r3, r3, #15
 8002896:	2b00      	cmp	r3, #0
 8002898:	d109      	bne.n	80028ae <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6818      	ldr	r0, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	7999      	ldrb	r1, [r3, #6]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80028a8:	461a      	mov	r2, r3
 80028aa:	f002 ffbf 	bl	800582c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	460b      	mov	r3, r1
 80028ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80028cc:	78fb      	ldrb	r3, [r7, #3]
 80028ce:	f003 030f 	and.w	r3, r3, #15
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	7912      	ldrb	r2, [r2, #4]
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d901      	bls.n	80028de <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e042      	b.n	8002964 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80028de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	da0f      	bge.n	8002906 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028e6:	78fb      	ldrb	r3, [r7, #3]
 80028e8:	f003 020f 	and.w	r2, r3, #15
 80028ec:	4613      	mov	r3, r2
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	4413      	add	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	3310      	adds	r3, #16
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	4413      	add	r3, r2
 80028fa:	3304      	adds	r3, #4
 80028fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2201      	movs	r2, #1
 8002902:	705a      	strb	r2, [r3, #1]
 8002904:	e00f      	b.n	8002926 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002906:	78fb      	ldrb	r3, [r7, #3]
 8002908:	f003 020f 	and.w	r2, r3, #15
 800290c:	4613      	mov	r3, r2
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	4413      	add	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	4413      	add	r3, r2
 800291c:	3304      	adds	r3, #4
 800291e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800292c:	78fb      	ldrb	r3, [r7, #3]
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	b2da      	uxtb	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800293e:	2b01      	cmp	r3, #1
 8002940:	d101      	bne.n	8002946 <HAL_PCD_EP_ClrStall+0x86>
 8002942:	2302      	movs	r3, #2
 8002944:	e00e      	b.n	8002964 <HAL_PCD_EP_ClrStall+0xa4>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68f9      	ldr	r1, [r7, #12]
 8002954:	4618      	mov	r0, r3
 8002956:	f002 fdd7 	bl	8005508 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	460b      	mov	r3, r1
 8002976:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002978:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800297c:	2b00      	cmp	r3, #0
 800297e:	da0c      	bge.n	800299a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002980:	78fb      	ldrb	r3, [r7, #3]
 8002982:	f003 020f 	and.w	r2, r3, #15
 8002986:	4613      	mov	r3, r2
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	4413      	add	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	3310      	adds	r3, #16
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	4413      	add	r3, r2
 8002994:	3304      	adds	r3, #4
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	e00c      	b.n	80029b4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800299a:	78fb      	ldrb	r3, [r7, #3]
 800299c:	f003 020f 	and.w	r2, r3, #15
 80029a0:	4613      	mov	r3, r2
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	4413      	add	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	4413      	add	r3, r2
 80029b0:	3304      	adds	r3, #4
 80029b2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68f9      	ldr	r1, [r7, #12]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f002 fbf6 	bl	80051ac <USB_EPStopXfer>
 80029c0:	4603      	mov	r3, r0
 80029c2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80029c4:	7afb      	ldrb	r3, [r7, #11]
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b08a      	sub	sp, #40	@ 0x28
 80029d2:	af02      	add	r7, sp, #8
 80029d4:	6078      	str	r0, [r7, #4]
 80029d6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	4613      	mov	r3, r2
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	4413      	add	r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	3310      	adds	r3, #16
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	4413      	add	r3, r2
 80029f2:	3304      	adds	r3, #4
 80029f4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	695a      	ldr	r2, [r3, #20]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d901      	bls.n	8002a06 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e06b      	b.n	8002ade <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	691a      	ldr	r2, [r3, #16]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	69fa      	ldr	r2, [r7, #28]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d902      	bls.n	8002a22 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	3303      	adds	r3, #3
 8002a26:	089b      	lsrs	r3, r3, #2
 8002a28:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a2a:	e02a      	b.n	8002a82 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	691a      	ldr	r2, [r3, #16]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	695b      	ldr	r3, [r3, #20]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	69fa      	ldr	r2, [r7, #28]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d902      	bls.n	8002a48 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	3303      	adds	r3, #3
 8002a4c:	089b      	lsrs	r3, r3, #2
 8002a4e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	68d9      	ldr	r1, [r3, #12]
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	b2da      	uxtb	r2, r3
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	4603      	mov	r3, r0
 8002a64:	6978      	ldr	r0, [r7, #20]
 8002a66:	f002 fc4b 	bl	8005300 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	68da      	ldr	r2, [r3, #12]
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	441a      	add	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	695a      	ldr	r2, [r3, #20]
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	441a      	add	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	015a      	lsls	r2, r3, #5
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	4413      	add	r3, r2
 8002a8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d809      	bhi.n	8002aac <PCD_WriteEmptyTxFifo+0xde>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	695a      	ldr	r2, [r3, #20]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d203      	bcs.n	8002aac <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1bf      	bne.n	8002a2c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	691a      	ldr	r2, [r3, #16]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d811      	bhi.n	8002adc <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	2201      	movs	r2, #1
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002acc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	6939      	ldr	r1, [r7, #16]
 8002ad4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002ad8:	4013      	ands	r3, r2
 8002ada:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3720      	adds	r7, #32
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
	...

08002ae8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b088      	sub	sp, #32
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	333c      	adds	r3, #60	@ 0x3c
 8002b00:	3304      	adds	r3, #4
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	015a      	lsls	r2, r3, #5
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	799b      	ldrb	r3, [r3, #6]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d17b      	bne.n	8002c16 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	f003 0308 	and.w	r3, r3, #8
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d015      	beq.n	8002b54 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	4a61      	ldr	r2, [pc, #388]	@ (8002cb0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	f240 80b9 	bls.w	8002ca4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f000 80b3 	beq.w	8002ca4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	015a      	lsls	r2, r3, #5
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	4413      	add	r3, r2
 8002b46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b50:	6093      	str	r3, [r2, #8]
 8002b52:	e0a7      	b.n	8002ca4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	f003 0320 	and.w	r3, r3, #32
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d009      	beq.n	8002b72 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	015a      	lsls	r2, r3, #5
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	4413      	add	r3, r2
 8002b66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	2320      	movs	r3, #32
 8002b6e:	6093      	str	r3, [r2, #8]
 8002b70:	e098      	b.n	8002ca4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f040 8093 	bne.w	8002ca4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	4a4b      	ldr	r2, [pc, #300]	@ (8002cb0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d90f      	bls.n	8002ba6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00a      	beq.n	8002ba6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	015a      	lsls	r2, r3, #5
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	4413      	add	r3, r2
 8002b98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ba2:	6093      	str	r3, [r2, #8]
 8002ba4:	e07e      	b.n	8002ca4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	4413      	add	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	3304      	adds	r3, #4
 8002bba:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6a1a      	ldr	r2, [r3, #32]
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	0159      	lsls	r1, r3, #5
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	440b      	add	r3, r1
 8002bc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bd2:	1ad2      	subs	r2, r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d114      	bne.n	8002c08 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d109      	bne.n	8002bfa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6818      	ldr	r0, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	f002 fe1a 	bl	800582c <USB_EP0_OutStart>
 8002bf8:	e006      	b.n	8002c08 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	68da      	ldr	r2, [r3, #12]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	441a      	add	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f005 f868 	bl	8007ce4 <HAL_PCD_DataOutStageCallback>
 8002c14:	e046      	b.n	8002ca4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	4a26      	ldr	r2, [pc, #152]	@ (8002cb4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d124      	bne.n	8002c68 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00a      	beq.n	8002c3e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	015a      	lsls	r2, r3, #5
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	4413      	add	r3, r2
 8002c30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c34:	461a      	mov	r2, r3
 8002c36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c3a:	6093      	str	r3, [r2, #8]
 8002c3c:	e032      	b.n	8002ca4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	f003 0320 	and.w	r3, r3, #32
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d008      	beq.n	8002c5a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	015a      	lsls	r2, r3, #5
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	4413      	add	r3, r2
 8002c50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c54:	461a      	mov	r2, r3
 8002c56:	2320      	movs	r3, #32
 8002c58:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	4619      	mov	r1, r3
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f005 f83f 	bl	8007ce4 <HAL_PCD_DataOutStageCallback>
 8002c66:	e01d      	b.n	8002ca4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d114      	bne.n	8002c98 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	4613      	mov	r3, r2
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	4413      	add	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	440b      	add	r3, r1
 8002c7c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d108      	bne.n	8002c98 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6818      	ldr	r0, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002c90:	461a      	mov	r2, r3
 8002c92:	2100      	movs	r1, #0
 8002c94:	f002 fdca 	bl	800582c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f005 f820 	bl	8007ce4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3720      	adds	r7, #32
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	4f54300a 	.word	0x4f54300a
 8002cb4:	4f54310a 	.word	0x4f54310a

08002cb8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	333c      	adds	r3, #60	@ 0x3c
 8002cd0:	3304      	adds	r3, #4
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	015a      	lsls	r2, r3, #5
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	4413      	add	r3, r2
 8002cde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	4a15      	ldr	r2, [pc, #84]	@ (8002d40 <PCD_EP_OutSetupPacket_int+0x88>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d90e      	bls.n	8002d0c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d009      	beq.n	8002d0c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	015a      	lsls	r2, r3, #5
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	4413      	add	r3, r2
 8002d00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d04:	461a      	mov	r2, r3
 8002d06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d0a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f004 ffd7 	bl	8007cc0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	4a0a      	ldr	r2, [pc, #40]	@ (8002d40 <PCD_EP_OutSetupPacket_int+0x88>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d90c      	bls.n	8002d34 <PCD_EP_OutSetupPacket_int+0x7c>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	799b      	ldrb	r3, [r3, #6]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d108      	bne.n	8002d34 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6818      	ldr	r0, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	2101      	movs	r1, #1
 8002d30:	f002 fd7c 	bl	800582c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3718      	adds	r7, #24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	4f54300a 	.word	0x4f54300a

08002d44 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	70fb      	strb	r3, [r7, #3]
 8002d50:	4613      	mov	r3, r2
 8002d52:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d5a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002d5c:	78fb      	ldrb	r3, [r7, #3]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d107      	bne.n	8002d72 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002d62:	883b      	ldrh	r3, [r7, #0]
 8002d64:	0419      	lsls	r1, r3, #16
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68ba      	ldr	r2, [r7, #8]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d70:	e028      	b.n	8002dc4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d78:	0c1b      	lsrs	r3, r3, #16
 8002d7a:	68ba      	ldr	r2, [r7, #8]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002d80:	2300      	movs	r3, #0
 8002d82:	73fb      	strb	r3, [r7, #15]
 8002d84:	e00d      	b.n	8002da2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	7bfb      	ldrb	r3, [r7, #15]
 8002d8c:	3340      	adds	r3, #64	@ 0x40
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	4413      	add	r3, r2
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	0c1b      	lsrs	r3, r3, #16
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	4413      	add	r3, r2
 8002d9a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002d9c:	7bfb      	ldrb	r3, [r7, #15]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	73fb      	strb	r3, [r7, #15]
 8002da2:	7bfa      	ldrb	r2, [r7, #15]
 8002da4:	78fb      	ldrb	r3, [r7, #3]
 8002da6:	3b01      	subs	r3, #1
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d3ec      	bcc.n	8002d86 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002dac:	883b      	ldrh	r3, [r7, #0]
 8002dae:	0418      	lsls	r0, r3, #16
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6819      	ldr	r1, [r3, #0]
 8002db4:	78fb      	ldrb	r3, [r7, #3]
 8002db6:	3b01      	subs	r3, #1
 8002db8:	68ba      	ldr	r2, [r7, #8]
 8002dba:	4302      	orrs	r2, r0
 8002dbc:	3340      	adds	r3, #64	@ 0x40
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3714      	adds	r7, #20
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b083      	sub	sp, #12
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
 8002dda:	460b      	mov	r3, r1
 8002ddc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	887a      	ldrh	r2, [r7, #2]
 8002de4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e267      	b.n	80032ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d075      	beq.n	8002f16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e2a:	4b88      	ldr	r3, [pc, #544]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f003 030c 	and.w	r3, r3, #12
 8002e32:	2b04      	cmp	r3, #4
 8002e34:	d00c      	beq.n	8002e50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e36:	4b85      	ldr	r3, [pc, #532]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e3e:	2b08      	cmp	r3, #8
 8002e40:	d112      	bne.n	8002e68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e42:	4b82      	ldr	r3, [pc, #520]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e4e:	d10b      	bne.n	8002e68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e50:	4b7e      	ldr	r3, [pc, #504]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d05b      	beq.n	8002f14 <HAL_RCC_OscConfig+0x108>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d157      	bne.n	8002f14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e242      	b.n	80032ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e70:	d106      	bne.n	8002e80 <HAL_RCC_OscConfig+0x74>
 8002e72:	4b76      	ldr	r3, [pc, #472]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a75      	ldr	r2, [pc, #468]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002e78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	e01d      	b.n	8002ebc <HAL_RCC_OscConfig+0xb0>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e88:	d10c      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x98>
 8002e8a:	4b70      	ldr	r3, [pc, #448]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a6f      	ldr	r2, [pc, #444]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002e90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	4b6d      	ldr	r3, [pc, #436]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a6c      	ldr	r2, [pc, #432]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002e9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ea0:	6013      	str	r3, [r2, #0]
 8002ea2:	e00b      	b.n	8002ebc <HAL_RCC_OscConfig+0xb0>
 8002ea4:	4b69      	ldr	r3, [pc, #420]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a68      	ldr	r2, [pc, #416]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002eaa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002eae:	6013      	str	r3, [r2, #0]
 8002eb0:	4b66      	ldr	r3, [pc, #408]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a65      	ldr	r2, [pc, #404]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002eb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002eba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d013      	beq.n	8002eec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec4:	f7fe f800 	bl	8000ec8 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ecc:	f7fd fffc 	bl	8000ec8 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b64      	cmp	r3, #100	@ 0x64
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e207      	b.n	80032ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ede:	4b5b      	ldr	r3, [pc, #364]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0f0      	beq.n	8002ecc <HAL_RCC_OscConfig+0xc0>
 8002eea:	e014      	b.n	8002f16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eec:	f7fd ffec 	bl	8000ec8 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ef4:	f7fd ffe8 	bl	8000ec8 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b64      	cmp	r3, #100	@ 0x64
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e1f3      	b.n	80032ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f06:	4b51      	ldr	r3, [pc, #324]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1f0      	bne.n	8002ef4 <HAL_RCC_OscConfig+0xe8>
 8002f12:	e000      	b.n	8002f16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d063      	beq.n	8002fea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f22:	4b4a      	ldr	r3, [pc, #296]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 030c 	and.w	r3, r3, #12
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00b      	beq.n	8002f46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f2e:	4b47      	ldr	r3, [pc, #284]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f36:	2b08      	cmp	r3, #8
 8002f38:	d11c      	bne.n	8002f74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f3a:	4b44      	ldr	r3, [pc, #272]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d116      	bne.n	8002f74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f46:	4b41      	ldr	r3, [pc, #260]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d005      	beq.n	8002f5e <HAL_RCC_OscConfig+0x152>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d001      	beq.n	8002f5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e1c7      	b.n	80032ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f5e:	4b3b      	ldr	r3, [pc, #236]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	4937      	ldr	r1, [pc, #220]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f72:	e03a      	b.n	8002fea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d020      	beq.n	8002fbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f7c:	4b34      	ldr	r3, [pc, #208]	@ (8003050 <HAL_RCC_OscConfig+0x244>)
 8002f7e:	2201      	movs	r2, #1
 8002f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f82:	f7fd ffa1 	bl	8000ec8 <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f88:	e008      	b.n	8002f9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f8a:	f7fd ff9d 	bl	8000ec8 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e1a8      	b.n	80032ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f9c:	4b2b      	ldr	r3, [pc, #172]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d0f0      	beq.n	8002f8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fa8:	4b28      	ldr	r3, [pc, #160]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	4925      	ldr	r1, [pc, #148]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	600b      	str	r3, [r1, #0]
 8002fbc:	e015      	b.n	8002fea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fbe:	4b24      	ldr	r3, [pc, #144]	@ (8003050 <HAL_RCC_OscConfig+0x244>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc4:	f7fd ff80 	bl	8000ec8 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fcc:	f7fd ff7c 	bl	8000ec8 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e187      	b.n	80032ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fde:	4b1b      	ldr	r3, [pc, #108]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1f0      	bne.n	8002fcc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0308 	and.w	r3, r3, #8
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d036      	beq.n	8003064 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d016      	beq.n	800302c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ffe:	4b15      	ldr	r3, [pc, #84]	@ (8003054 <HAL_RCC_OscConfig+0x248>)
 8003000:	2201      	movs	r2, #1
 8003002:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003004:	f7fd ff60 	bl	8000ec8 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800300c:	f7fd ff5c 	bl	8000ec8 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e167      	b.n	80032ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800301e:	4b0b      	ldr	r3, [pc, #44]	@ (800304c <HAL_RCC_OscConfig+0x240>)
 8003020:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0f0      	beq.n	800300c <HAL_RCC_OscConfig+0x200>
 800302a:	e01b      	b.n	8003064 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800302c:	4b09      	ldr	r3, [pc, #36]	@ (8003054 <HAL_RCC_OscConfig+0x248>)
 800302e:	2200      	movs	r2, #0
 8003030:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003032:	f7fd ff49 	bl	8000ec8 <HAL_GetTick>
 8003036:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003038:	e00e      	b.n	8003058 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800303a:	f7fd ff45 	bl	8000ec8 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d907      	bls.n	8003058 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e150      	b.n	80032ee <HAL_RCC_OscConfig+0x4e2>
 800304c:	40023800 	.word	0x40023800
 8003050:	42470000 	.word	0x42470000
 8003054:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003058:	4b88      	ldr	r3, [pc, #544]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 800305a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1ea      	bne.n	800303a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	2b00      	cmp	r3, #0
 800306e:	f000 8097 	beq.w	80031a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003072:	2300      	movs	r3, #0
 8003074:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003076:	4b81      	ldr	r3, [pc, #516]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 8003078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10f      	bne.n	80030a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003082:	2300      	movs	r3, #0
 8003084:	60bb      	str	r3, [r7, #8]
 8003086:	4b7d      	ldr	r3, [pc, #500]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 8003088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308a:	4a7c      	ldr	r2, [pc, #496]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 800308c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003090:	6413      	str	r3, [r2, #64]	@ 0x40
 8003092:	4b7a      	ldr	r3, [pc, #488]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 8003094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003096:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800309a:	60bb      	str	r3, [r7, #8]
 800309c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800309e:	2301      	movs	r3, #1
 80030a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a2:	4b77      	ldr	r3, [pc, #476]	@ (8003280 <HAL_RCC_OscConfig+0x474>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d118      	bne.n	80030e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030ae:	4b74      	ldr	r3, [pc, #464]	@ (8003280 <HAL_RCC_OscConfig+0x474>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a73      	ldr	r2, [pc, #460]	@ (8003280 <HAL_RCC_OscConfig+0x474>)
 80030b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ba:	f7fd ff05 	bl	8000ec8 <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c0:	e008      	b.n	80030d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030c2:	f7fd ff01 	bl	8000ec8 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e10c      	b.n	80032ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d4:	4b6a      	ldr	r3, [pc, #424]	@ (8003280 <HAL_RCC_OscConfig+0x474>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d0f0      	beq.n	80030c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d106      	bne.n	80030f6 <HAL_RCC_OscConfig+0x2ea>
 80030e8:	4b64      	ldr	r3, [pc, #400]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 80030ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ec:	4a63      	ldr	r2, [pc, #396]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 80030ee:	f043 0301 	orr.w	r3, r3, #1
 80030f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80030f4:	e01c      	b.n	8003130 <HAL_RCC_OscConfig+0x324>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	2b05      	cmp	r3, #5
 80030fc:	d10c      	bne.n	8003118 <HAL_RCC_OscConfig+0x30c>
 80030fe:	4b5f      	ldr	r3, [pc, #380]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 8003100:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003102:	4a5e      	ldr	r2, [pc, #376]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 8003104:	f043 0304 	orr.w	r3, r3, #4
 8003108:	6713      	str	r3, [r2, #112]	@ 0x70
 800310a:	4b5c      	ldr	r3, [pc, #368]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 800310c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800310e:	4a5b      	ldr	r2, [pc, #364]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 8003110:	f043 0301 	orr.w	r3, r3, #1
 8003114:	6713      	str	r3, [r2, #112]	@ 0x70
 8003116:	e00b      	b.n	8003130 <HAL_RCC_OscConfig+0x324>
 8003118:	4b58      	ldr	r3, [pc, #352]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 800311a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800311c:	4a57      	ldr	r2, [pc, #348]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 800311e:	f023 0301 	bic.w	r3, r3, #1
 8003122:	6713      	str	r3, [r2, #112]	@ 0x70
 8003124:	4b55      	ldr	r3, [pc, #340]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 8003126:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003128:	4a54      	ldr	r2, [pc, #336]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 800312a:	f023 0304 	bic.w	r3, r3, #4
 800312e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d015      	beq.n	8003164 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003138:	f7fd fec6 	bl	8000ec8 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800313e:	e00a      	b.n	8003156 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003140:	f7fd fec2 	bl	8000ec8 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800314e:	4293      	cmp	r3, r2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e0cb      	b.n	80032ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003156:	4b49      	ldr	r3, [pc, #292]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 8003158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0ee      	beq.n	8003140 <HAL_RCC_OscConfig+0x334>
 8003162:	e014      	b.n	800318e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003164:	f7fd feb0 	bl	8000ec8 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800316a:	e00a      	b.n	8003182 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800316c:	f7fd feac 	bl	8000ec8 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	f241 3288 	movw	r2, #5000	@ 0x1388
 800317a:	4293      	cmp	r3, r2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e0b5      	b.n	80032ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003182:	4b3e      	ldr	r3, [pc, #248]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 8003184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1ee      	bne.n	800316c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800318e:	7dfb      	ldrb	r3, [r7, #23]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d105      	bne.n	80031a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003194:	4b39      	ldr	r3, [pc, #228]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 8003196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003198:	4a38      	ldr	r2, [pc, #224]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 800319a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800319e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 80a1 	beq.w	80032ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031aa:	4b34      	ldr	r3, [pc, #208]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 030c 	and.w	r3, r3, #12
 80031b2:	2b08      	cmp	r3, #8
 80031b4:	d05c      	beq.n	8003270 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d141      	bne.n	8003242 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031be:	4b31      	ldr	r3, [pc, #196]	@ (8003284 <HAL_RCC_OscConfig+0x478>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c4:	f7fd fe80 	bl	8000ec8 <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031cc:	f7fd fe7c 	bl	8000ec8 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e087      	b.n	80032ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031de:	4b27      	ldr	r3, [pc, #156]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1f0      	bne.n	80031cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	69da      	ldr	r2, [r3, #28]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	431a      	orrs	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f8:	019b      	lsls	r3, r3, #6
 80031fa:	431a      	orrs	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003200:	085b      	lsrs	r3, r3, #1
 8003202:	3b01      	subs	r3, #1
 8003204:	041b      	lsls	r3, r3, #16
 8003206:	431a      	orrs	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800320c:	061b      	lsls	r3, r3, #24
 800320e:	491b      	ldr	r1, [pc, #108]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 8003210:	4313      	orrs	r3, r2
 8003212:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003214:	4b1b      	ldr	r3, [pc, #108]	@ (8003284 <HAL_RCC_OscConfig+0x478>)
 8003216:	2201      	movs	r2, #1
 8003218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321a:	f7fd fe55 	bl	8000ec8 <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003222:	f7fd fe51 	bl	8000ec8 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e05c      	b.n	80032ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003234:	4b11      	ldr	r3, [pc, #68]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d0f0      	beq.n	8003222 <HAL_RCC_OscConfig+0x416>
 8003240:	e054      	b.n	80032ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003242:	4b10      	ldr	r3, [pc, #64]	@ (8003284 <HAL_RCC_OscConfig+0x478>)
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003248:	f7fd fe3e 	bl	8000ec8 <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003250:	f7fd fe3a 	bl	8000ec8 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e045      	b.n	80032ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003262:	4b06      	ldr	r3, [pc, #24]	@ (800327c <HAL_RCC_OscConfig+0x470>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1f0      	bne.n	8003250 <HAL_RCC_OscConfig+0x444>
 800326e:	e03d      	b.n	80032ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d107      	bne.n	8003288 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e038      	b.n	80032ee <HAL_RCC_OscConfig+0x4e2>
 800327c:	40023800 	.word	0x40023800
 8003280:	40007000 	.word	0x40007000
 8003284:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003288:	4b1b      	ldr	r3, [pc, #108]	@ (80032f8 <HAL_RCC_OscConfig+0x4ec>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d028      	beq.n	80032e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d121      	bne.n	80032e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d11a      	bne.n	80032e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80032b8:	4013      	ands	r3, r2
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80032be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d111      	bne.n	80032e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ce:	085b      	lsrs	r3, r3, #1
 80032d0:	3b01      	subs	r3, #1
 80032d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d107      	bne.n	80032e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d001      	beq.n	80032ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e000      	b.n	80032ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3718      	adds	r7, #24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	40023800 	.word	0x40023800

080032fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d101      	bne.n	8003310 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e0cc      	b.n	80034aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003310:	4b68      	ldr	r3, [pc, #416]	@ (80034b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0307 	and.w	r3, r3, #7
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	429a      	cmp	r2, r3
 800331c:	d90c      	bls.n	8003338 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800331e:	4b65      	ldr	r3, [pc, #404]	@ (80034b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	b2d2      	uxtb	r2, r2
 8003324:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003326:	4b63      	ldr	r3, [pc, #396]	@ (80034b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	683a      	ldr	r2, [r7, #0]
 8003330:	429a      	cmp	r2, r3
 8003332:	d001      	beq.n	8003338 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e0b8      	b.n	80034aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d020      	beq.n	8003386 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	2b00      	cmp	r3, #0
 800334e:	d005      	beq.n	800335c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003350:	4b59      	ldr	r3, [pc, #356]	@ (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	4a58      	ldr	r2, [pc, #352]	@ (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003356:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800335a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0308 	and.w	r3, r3, #8
 8003364:	2b00      	cmp	r3, #0
 8003366:	d005      	beq.n	8003374 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003368:	4b53      	ldr	r3, [pc, #332]	@ (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	4a52      	ldr	r2, [pc, #328]	@ (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003372:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003374:	4b50      	ldr	r3, [pc, #320]	@ (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	494d      	ldr	r1, [pc, #308]	@ (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003382:	4313      	orrs	r3, r2
 8003384:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	d044      	beq.n	800341c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d107      	bne.n	80033aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800339a:	4b47      	ldr	r3, [pc, #284]	@ (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d119      	bne.n	80033da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e07f      	b.n	80034aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d003      	beq.n	80033ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033b6:	2b03      	cmp	r3, #3
 80033b8:	d107      	bne.n	80033ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ba:	4b3f      	ldr	r3, [pc, #252]	@ (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d109      	bne.n	80033da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e06f      	b.n	80034aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ca:	4b3b      	ldr	r3, [pc, #236]	@ (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e067      	b.n	80034aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033da:	4b37      	ldr	r3, [pc, #220]	@ (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f023 0203 	bic.w	r2, r3, #3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	4934      	ldr	r1, [pc, #208]	@ (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033ec:	f7fd fd6c 	bl	8000ec8 <HAL_GetTick>
 80033f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033f2:	e00a      	b.n	800340a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033f4:	f7fd fd68 	bl	8000ec8 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003402:	4293      	cmp	r3, r2
 8003404:	d901      	bls.n	800340a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e04f      	b.n	80034aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800340a:	4b2b      	ldr	r3, [pc, #172]	@ (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 020c 	and.w	r2, r3, #12
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	429a      	cmp	r2, r3
 800341a:	d1eb      	bne.n	80033f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800341c:	4b25      	ldr	r3, [pc, #148]	@ (80034b4 <HAL_RCC_ClockConfig+0x1b8>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0307 	and.w	r3, r3, #7
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	429a      	cmp	r2, r3
 8003428:	d20c      	bcs.n	8003444 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800342a:	4b22      	ldr	r3, [pc, #136]	@ (80034b4 <HAL_RCC_ClockConfig+0x1b8>)
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003432:	4b20      	ldr	r3, [pc, #128]	@ (80034b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0307 	and.w	r3, r3, #7
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	429a      	cmp	r2, r3
 800343e:	d001      	beq.n	8003444 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e032      	b.n	80034aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	2b00      	cmp	r3, #0
 800344e:	d008      	beq.n	8003462 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003450:	4b19      	ldr	r3, [pc, #100]	@ (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	4916      	ldr	r1, [pc, #88]	@ (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 800345e:	4313      	orrs	r3, r2
 8003460:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0308 	and.w	r3, r3, #8
 800346a:	2b00      	cmp	r3, #0
 800346c:	d009      	beq.n	8003482 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800346e:	4b12      	ldr	r3, [pc, #72]	@ (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	490e      	ldr	r1, [pc, #56]	@ (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 800347e:	4313      	orrs	r3, r2
 8003480:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003482:	f000 f821 	bl	80034c8 <HAL_RCC_GetSysClockFreq>
 8003486:	4602      	mov	r2, r0
 8003488:	4b0b      	ldr	r3, [pc, #44]	@ (80034b8 <HAL_RCC_ClockConfig+0x1bc>)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	091b      	lsrs	r3, r3, #4
 800348e:	f003 030f 	and.w	r3, r3, #15
 8003492:	490a      	ldr	r1, [pc, #40]	@ (80034bc <HAL_RCC_ClockConfig+0x1c0>)
 8003494:	5ccb      	ldrb	r3, [r1, r3]
 8003496:	fa22 f303 	lsr.w	r3, r2, r3
 800349a:	4a09      	ldr	r2, [pc, #36]	@ (80034c0 <HAL_RCC_ClockConfig+0x1c4>)
 800349c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800349e:	4b09      	ldr	r3, [pc, #36]	@ (80034c4 <HAL_RCC_ClockConfig+0x1c8>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fd fccc 	bl	8000e40 <HAL_InitTick>

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	40023c00 	.word	0x40023c00
 80034b8:	40023800 	.word	0x40023800
 80034bc:	080082e4 	.word	0x080082e4
 80034c0:	20000000 	.word	0x20000000
 80034c4:	20000004 	.word	0x20000004

080034c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034cc:	b090      	sub	sp, #64	@ 0x40
 80034ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034d0:	2300      	movs	r3, #0
 80034d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80034d4:	2300      	movs	r3, #0
 80034d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034d8:	2300      	movs	r3, #0
 80034da:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80034dc:	2300      	movs	r3, #0
 80034de:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034e0:	4b59      	ldr	r3, [pc, #356]	@ (8003648 <HAL_RCC_GetSysClockFreq+0x180>)
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f003 030c 	and.w	r3, r3, #12
 80034e8:	2b08      	cmp	r3, #8
 80034ea:	d00d      	beq.n	8003508 <HAL_RCC_GetSysClockFreq+0x40>
 80034ec:	2b08      	cmp	r3, #8
 80034ee:	f200 80a1 	bhi.w	8003634 <HAL_RCC_GetSysClockFreq+0x16c>
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d002      	beq.n	80034fc <HAL_RCC_GetSysClockFreq+0x34>
 80034f6:	2b04      	cmp	r3, #4
 80034f8:	d003      	beq.n	8003502 <HAL_RCC_GetSysClockFreq+0x3a>
 80034fa:	e09b      	b.n	8003634 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034fc:	4b53      	ldr	r3, [pc, #332]	@ (800364c <HAL_RCC_GetSysClockFreq+0x184>)
 80034fe:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003500:	e09b      	b.n	800363a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003502:	4b53      	ldr	r3, [pc, #332]	@ (8003650 <HAL_RCC_GetSysClockFreq+0x188>)
 8003504:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003506:	e098      	b.n	800363a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003508:	4b4f      	ldr	r3, [pc, #316]	@ (8003648 <HAL_RCC_GetSysClockFreq+0x180>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003510:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003512:	4b4d      	ldr	r3, [pc, #308]	@ (8003648 <HAL_RCC_GetSysClockFreq+0x180>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d028      	beq.n	8003570 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800351e:	4b4a      	ldr	r3, [pc, #296]	@ (8003648 <HAL_RCC_GetSysClockFreq+0x180>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	099b      	lsrs	r3, r3, #6
 8003524:	2200      	movs	r2, #0
 8003526:	623b      	str	r3, [r7, #32]
 8003528:	627a      	str	r2, [r7, #36]	@ 0x24
 800352a:	6a3b      	ldr	r3, [r7, #32]
 800352c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003530:	2100      	movs	r1, #0
 8003532:	4b47      	ldr	r3, [pc, #284]	@ (8003650 <HAL_RCC_GetSysClockFreq+0x188>)
 8003534:	fb03 f201 	mul.w	r2, r3, r1
 8003538:	2300      	movs	r3, #0
 800353a:	fb00 f303 	mul.w	r3, r0, r3
 800353e:	4413      	add	r3, r2
 8003540:	4a43      	ldr	r2, [pc, #268]	@ (8003650 <HAL_RCC_GetSysClockFreq+0x188>)
 8003542:	fba0 1202 	umull	r1, r2, r0, r2
 8003546:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003548:	460a      	mov	r2, r1
 800354a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800354c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800354e:	4413      	add	r3, r2
 8003550:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003554:	2200      	movs	r2, #0
 8003556:	61bb      	str	r3, [r7, #24]
 8003558:	61fa      	str	r2, [r7, #28]
 800355a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800355e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003562:	f7fc fe39 	bl	80001d8 <__aeabi_uldivmod>
 8003566:	4602      	mov	r2, r0
 8003568:	460b      	mov	r3, r1
 800356a:	4613      	mov	r3, r2
 800356c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800356e:	e053      	b.n	8003618 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003570:	4b35      	ldr	r3, [pc, #212]	@ (8003648 <HAL_RCC_GetSysClockFreq+0x180>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	099b      	lsrs	r3, r3, #6
 8003576:	2200      	movs	r2, #0
 8003578:	613b      	str	r3, [r7, #16]
 800357a:	617a      	str	r2, [r7, #20]
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003582:	f04f 0b00 	mov.w	fp, #0
 8003586:	4652      	mov	r2, sl
 8003588:	465b      	mov	r3, fp
 800358a:	f04f 0000 	mov.w	r0, #0
 800358e:	f04f 0100 	mov.w	r1, #0
 8003592:	0159      	lsls	r1, r3, #5
 8003594:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003598:	0150      	lsls	r0, r2, #5
 800359a:	4602      	mov	r2, r0
 800359c:	460b      	mov	r3, r1
 800359e:	ebb2 080a 	subs.w	r8, r2, sl
 80035a2:	eb63 090b 	sbc.w	r9, r3, fp
 80035a6:	f04f 0200 	mov.w	r2, #0
 80035aa:	f04f 0300 	mov.w	r3, #0
 80035ae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80035b2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80035b6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80035ba:	ebb2 0408 	subs.w	r4, r2, r8
 80035be:	eb63 0509 	sbc.w	r5, r3, r9
 80035c2:	f04f 0200 	mov.w	r2, #0
 80035c6:	f04f 0300 	mov.w	r3, #0
 80035ca:	00eb      	lsls	r3, r5, #3
 80035cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035d0:	00e2      	lsls	r2, r4, #3
 80035d2:	4614      	mov	r4, r2
 80035d4:	461d      	mov	r5, r3
 80035d6:	eb14 030a 	adds.w	r3, r4, sl
 80035da:	603b      	str	r3, [r7, #0]
 80035dc:	eb45 030b 	adc.w	r3, r5, fp
 80035e0:	607b      	str	r3, [r7, #4]
 80035e2:	f04f 0200 	mov.w	r2, #0
 80035e6:	f04f 0300 	mov.w	r3, #0
 80035ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035ee:	4629      	mov	r1, r5
 80035f0:	028b      	lsls	r3, r1, #10
 80035f2:	4621      	mov	r1, r4
 80035f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035f8:	4621      	mov	r1, r4
 80035fa:	028a      	lsls	r2, r1, #10
 80035fc:	4610      	mov	r0, r2
 80035fe:	4619      	mov	r1, r3
 8003600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003602:	2200      	movs	r2, #0
 8003604:	60bb      	str	r3, [r7, #8]
 8003606:	60fa      	str	r2, [r7, #12]
 8003608:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800360c:	f7fc fde4 	bl	80001d8 <__aeabi_uldivmod>
 8003610:	4602      	mov	r2, r0
 8003612:	460b      	mov	r3, r1
 8003614:	4613      	mov	r3, r2
 8003616:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003618:	4b0b      	ldr	r3, [pc, #44]	@ (8003648 <HAL_RCC_GetSysClockFreq+0x180>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	0c1b      	lsrs	r3, r3, #16
 800361e:	f003 0303 	and.w	r3, r3, #3
 8003622:	3301      	adds	r3, #1
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003628:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800362a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800362c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003630:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003632:	e002      	b.n	800363a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003634:	4b05      	ldr	r3, [pc, #20]	@ (800364c <HAL_RCC_GetSysClockFreq+0x184>)
 8003636:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003638:	bf00      	nop
    }
  }
  return sysclockfreq;
 800363a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800363c:	4618      	mov	r0, r3
 800363e:	3740      	adds	r7, #64	@ 0x40
 8003640:	46bd      	mov	sp, r7
 8003642:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003646:	bf00      	nop
 8003648:	40023800 	.word	0x40023800
 800364c:	00f42400 	.word	0x00f42400
 8003650:	017d7840 	.word	0x017d7840

08003654 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003658:	4b03      	ldr	r3, [pc, #12]	@ (8003668 <HAL_RCC_GetHCLKFreq+0x14>)
 800365a:	681b      	ldr	r3, [r3, #0]
}
 800365c:	4618      	mov	r0, r3
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	20000000 	.word	0x20000000

0800366c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e07b      	b.n	8003776 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003682:	2b00      	cmp	r3, #0
 8003684:	d108      	bne.n	8003698 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800368e:	d009      	beq.n	80036a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	61da      	str	r2, [r3, #28]
 8003696:	e005      	b.n	80036a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d106      	bne.n	80036c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7fd f8de 	bl	8000880 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2202      	movs	r2, #2
 80036c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80036ec:	431a      	orrs	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	431a      	orrs	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	431a      	orrs	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003714:	431a      	orrs	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800371e:	431a      	orrs	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a1b      	ldr	r3, [r3, #32]
 8003724:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003728:	ea42 0103 	orr.w	r1, r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003730:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	430a      	orrs	r2, r1
 800373a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	0c1b      	lsrs	r3, r3, #16
 8003742:	f003 0104 	and.w	r1, r3, #4
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374a:	f003 0210 	and.w	r2, r3, #16
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	69da      	ldr	r2, [r3, #28]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003764:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b082      	sub	sp, #8
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d101      	bne.n	8003790 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e041      	b.n	8003814 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003796:	b2db      	uxtb	r3, r3
 8003798:	2b00      	cmp	r3, #0
 800379a:	d106      	bne.n	80037aa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f7fd fa6b 	bl	8000c80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2202      	movs	r2, #2
 80037ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	3304      	adds	r3, #4
 80037ba:	4619      	mov	r1, r3
 80037bc:	4610      	mov	r0, r2
 80037be:	f000 fa11 	bl	8003be4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3708      	adds	r7, #8
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e041      	b.n	80038b2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d106      	bne.n	8003848 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f839 	bl	80038ba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2202      	movs	r2, #2
 800384c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3304      	adds	r3, #4
 8003858:	4619      	mov	r1, r3
 800385a:	4610      	mov	r0, r2
 800385c:	f000 f9c2 	bl	8003be4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80038ba:	b480      	push	{r7}
 80038bc:	b083      	sub	sp, #12
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80038c2:	bf00      	nop
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
	...

080038d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038dc:	2300      	movs	r3, #0
 80038de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d101      	bne.n	80038ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80038ea:	2302      	movs	r3, #2
 80038ec:	e0ae      	b.n	8003a4c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b0c      	cmp	r3, #12
 80038fa:	f200 809f 	bhi.w	8003a3c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80038fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003904 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003904:	08003939 	.word	0x08003939
 8003908:	08003a3d 	.word	0x08003a3d
 800390c:	08003a3d 	.word	0x08003a3d
 8003910:	08003a3d 	.word	0x08003a3d
 8003914:	08003979 	.word	0x08003979
 8003918:	08003a3d 	.word	0x08003a3d
 800391c:	08003a3d 	.word	0x08003a3d
 8003920:	08003a3d 	.word	0x08003a3d
 8003924:	080039bb 	.word	0x080039bb
 8003928:	08003a3d 	.word	0x08003a3d
 800392c:	08003a3d 	.word	0x08003a3d
 8003930:	08003a3d 	.word	0x08003a3d
 8003934:	080039fb 	.word	0x080039fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68b9      	ldr	r1, [r7, #8]
 800393e:	4618      	mov	r0, r3
 8003940:	f000 f9dc 	bl	8003cfc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	699a      	ldr	r2, [r3, #24]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f042 0208 	orr.w	r2, r2, #8
 8003952:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	699a      	ldr	r2, [r3, #24]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 0204 	bic.w	r2, r2, #4
 8003962:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6999      	ldr	r1, [r3, #24]
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	691a      	ldr	r2, [r3, #16]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	430a      	orrs	r2, r1
 8003974:	619a      	str	r2, [r3, #24]
      break;
 8003976:	e064      	b.n	8003a42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68b9      	ldr	r1, [r7, #8]
 800397e:	4618      	mov	r0, r3
 8003980:	f000 fa22 	bl	8003dc8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	699a      	ldr	r2, [r3, #24]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003992:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	699a      	ldr	r2, [r3, #24]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	6999      	ldr	r1, [r3, #24]
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	021a      	lsls	r2, r3, #8
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	430a      	orrs	r2, r1
 80039b6:	619a      	str	r2, [r3, #24]
      break;
 80039b8:	e043      	b.n	8003a42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68b9      	ldr	r1, [r7, #8]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 fa6d 	bl	8003ea0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	69da      	ldr	r2, [r3, #28]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f042 0208 	orr.w	r2, r2, #8
 80039d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	69da      	ldr	r2, [r3, #28]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 0204 	bic.w	r2, r2, #4
 80039e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	69d9      	ldr	r1, [r3, #28]
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	691a      	ldr	r2, [r3, #16]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	430a      	orrs	r2, r1
 80039f6:	61da      	str	r2, [r3, #28]
      break;
 80039f8:	e023      	b.n	8003a42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68b9      	ldr	r1, [r7, #8]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f000 fab7 	bl	8003f74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	69da      	ldr	r2, [r3, #28]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	69da      	ldr	r2, [r3, #28]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	69d9      	ldr	r1, [r3, #28]
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	021a      	lsls	r2, r3, #8
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	61da      	str	r2, [r3, #28]
      break;
 8003a3a:	e002      	b.n	8003a42 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	75fb      	strb	r3, [r7, #23]
      break;
 8003a40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3718      	adds	r7, #24
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d101      	bne.n	8003a70 <HAL_TIM_ConfigClockSource+0x1c>
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	e0b4      	b.n	8003bda <HAL_TIM_ConfigClockSource+0x186>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003a8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003aa8:	d03e      	beq.n	8003b28 <HAL_TIM_ConfigClockSource+0xd4>
 8003aaa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003aae:	f200 8087 	bhi.w	8003bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ab2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ab6:	f000 8086 	beq.w	8003bc6 <HAL_TIM_ConfigClockSource+0x172>
 8003aba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003abe:	d87f      	bhi.n	8003bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ac0:	2b70      	cmp	r3, #112	@ 0x70
 8003ac2:	d01a      	beq.n	8003afa <HAL_TIM_ConfigClockSource+0xa6>
 8003ac4:	2b70      	cmp	r3, #112	@ 0x70
 8003ac6:	d87b      	bhi.n	8003bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ac8:	2b60      	cmp	r3, #96	@ 0x60
 8003aca:	d050      	beq.n	8003b6e <HAL_TIM_ConfigClockSource+0x11a>
 8003acc:	2b60      	cmp	r3, #96	@ 0x60
 8003ace:	d877      	bhi.n	8003bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ad0:	2b50      	cmp	r3, #80	@ 0x50
 8003ad2:	d03c      	beq.n	8003b4e <HAL_TIM_ConfigClockSource+0xfa>
 8003ad4:	2b50      	cmp	r3, #80	@ 0x50
 8003ad6:	d873      	bhi.n	8003bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ad8:	2b40      	cmp	r3, #64	@ 0x40
 8003ada:	d058      	beq.n	8003b8e <HAL_TIM_ConfigClockSource+0x13a>
 8003adc:	2b40      	cmp	r3, #64	@ 0x40
 8003ade:	d86f      	bhi.n	8003bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ae0:	2b30      	cmp	r3, #48	@ 0x30
 8003ae2:	d064      	beq.n	8003bae <HAL_TIM_ConfigClockSource+0x15a>
 8003ae4:	2b30      	cmp	r3, #48	@ 0x30
 8003ae6:	d86b      	bhi.n	8003bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ae8:	2b20      	cmp	r3, #32
 8003aea:	d060      	beq.n	8003bae <HAL_TIM_ConfigClockSource+0x15a>
 8003aec:	2b20      	cmp	r3, #32
 8003aee:	d867      	bhi.n	8003bc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d05c      	beq.n	8003bae <HAL_TIM_ConfigClockSource+0x15a>
 8003af4:	2b10      	cmp	r3, #16
 8003af6:	d05a      	beq.n	8003bae <HAL_TIM_ConfigClockSource+0x15a>
 8003af8:	e062      	b.n	8003bc0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b0a:	f000 fafd 	bl	8004108 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003b1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	609a      	str	r2, [r3, #8]
      break;
 8003b26:	e04f      	b.n	8003bc8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b38:	f000 fae6 	bl	8004108 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689a      	ldr	r2, [r3, #8]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b4a:	609a      	str	r2, [r3, #8]
      break;
 8003b4c:	e03c      	b.n	8003bc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	f000 fa5a 	bl	8004014 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2150      	movs	r1, #80	@ 0x50
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 fab3 	bl	80040d2 <TIM_ITRx_SetConfig>
      break;
 8003b6c:	e02c      	b.n	8003bc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	f000 fa79 	bl	8004072 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2160      	movs	r1, #96	@ 0x60
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 faa3 	bl	80040d2 <TIM_ITRx_SetConfig>
      break;
 8003b8c:	e01c      	b.n	8003bc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	f000 fa3a 	bl	8004014 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2140      	movs	r1, #64	@ 0x40
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 fa93 	bl	80040d2 <TIM_ITRx_SetConfig>
      break;
 8003bac:	e00c      	b.n	8003bc8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	4610      	mov	r0, r2
 8003bba:	f000 fa8a 	bl	80040d2 <TIM_ITRx_SetConfig>
      break;
 8003bbe:	e003      	b.n	8003bc8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	73fb      	strb	r3, [r7, #15]
      break;
 8003bc4:	e000      	b.n	8003bc8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003bc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
	...

08003be4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a3a      	ldr	r2, [pc, #232]	@ (8003ce0 <TIM_Base_SetConfig+0xfc>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d00f      	beq.n	8003c1c <TIM_Base_SetConfig+0x38>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c02:	d00b      	beq.n	8003c1c <TIM_Base_SetConfig+0x38>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a37      	ldr	r2, [pc, #220]	@ (8003ce4 <TIM_Base_SetConfig+0x100>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d007      	beq.n	8003c1c <TIM_Base_SetConfig+0x38>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a36      	ldr	r2, [pc, #216]	@ (8003ce8 <TIM_Base_SetConfig+0x104>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d003      	beq.n	8003c1c <TIM_Base_SetConfig+0x38>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a35      	ldr	r2, [pc, #212]	@ (8003cec <TIM_Base_SetConfig+0x108>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d108      	bne.n	8003c2e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a2b      	ldr	r2, [pc, #172]	@ (8003ce0 <TIM_Base_SetConfig+0xfc>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d01b      	beq.n	8003c6e <TIM_Base_SetConfig+0x8a>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c3c:	d017      	beq.n	8003c6e <TIM_Base_SetConfig+0x8a>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a28      	ldr	r2, [pc, #160]	@ (8003ce4 <TIM_Base_SetConfig+0x100>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d013      	beq.n	8003c6e <TIM_Base_SetConfig+0x8a>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a27      	ldr	r2, [pc, #156]	@ (8003ce8 <TIM_Base_SetConfig+0x104>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d00f      	beq.n	8003c6e <TIM_Base_SetConfig+0x8a>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a26      	ldr	r2, [pc, #152]	@ (8003cec <TIM_Base_SetConfig+0x108>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d00b      	beq.n	8003c6e <TIM_Base_SetConfig+0x8a>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a25      	ldr	r2, [pc, #148]	@ (8003cf0 <TIM_Base_SetConfig+0x10c>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d007      	beq.n	8003c6e <TIM_Base_SetConfig+0x8a>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a24      	ldr	r2, [pc, #144]	@ (8003cf4 <TIM_Base_SetConfig+0x110>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d003      	beq.n	8003c6e <TIM_Base_SetConfig+0x8a>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a23      	ldr	r2, [pc, #140]	@ (8003cf8 <TIM_Base_SetConfig+0x114>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d108      	bne.n	8003c80 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	689a      	ldr	r2, [r3, #8]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a0e      	ldr	r2, [pc, #56]	@ (8003ce0 <TIM_Base_SetConfig+0xfc>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d103      	bne.n	8003cb4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	691a      	ldr	r2, [r3, #16]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d105      	bne.n	8003cd2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	f023 0201 	bic.w	r2, r3, #1
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	611a      	str	r2, [r3, #16]
  }
}
 8003cd2:	bf00      	nop
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	40010000 	.word	0x40010000
 8003ce4:	40000400 	.word	0x40000400
 8003ce8:	40000800 	.word	0x40000800
 8003cec:	40000c00 	.word	0x40000c00
 8003cf0:	40014000 	.word	0x40014000
 8003cf4:	40014400 	.word	0x40014400
 8003cf8:	40014800 	.word	0x40014800

08003cfc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b087      	sub	sp, #28
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	f023 0201 	bic.w	r2, r3, #1
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f023 0303 	bic.w	r3, r3, #3
 8003d32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f023 0302 	bic.w	r3, r3, #2
 8003d44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a1c      	ldr	r2, [pc, #112]	@ (8003dc4 <TIM_OC1_SetConfig+0xc8>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d10c      	bne.n	8003d72 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	f023 0308 	bic.w	r3, r3, #8
 8003d5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f023 0304 	bic.w	r3, r3, #4
 8003d70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a13      	ldr	r2, [pc, #76]	@ (8003dc4 <TIM_OC1_SetConfig+0xc8>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d111      	bne.n	8003d9e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685a      	ldr	r2, [r3, #4]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	621a      	str	r2, [r3, #32]
}
 8003db8:	bf00      	nop
 8003dba:	371c      	adds	r7, #28
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	40010000 	.word	0x40010000

08003dc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b087      	sub	sp, #28
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	f023 0210 	bic.w	r2, r3, #16
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	021b      	lsls	r3, r3, #8
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	f023 0320 	bic.w	r3, r3, #32
 8003e12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	011b      	lsls	r3, r3, #4
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a1e      	ldr	r2, [pc, #120]	@ (8003e9c <TIM_OC2_SetConfig+0xd4>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d10d      	bne.n	8003e44 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	011b      	lsls	r3, r3, #4
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e42:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a15      	ldr	r2, [pc, #84]	@ (8003e9c <TIM_OC2_SetConfig+0xd4>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d113      	bne.n	8003e74 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	695b      	ldr	r3, [r3, #20]
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	621a      	str	r2, [r3, #32]
}
 8003e8e:	bf00      	nop
 8003e90:	371c      	adds	r7, #28
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	40010000 	.word	0x40010000

08003ea0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b087      	sub	sp, #28
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a1b      	ldr	r3, [r3, #32]
 8003eae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
 8003eb4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f023 0303 	bic.w	r3, r3, #3
 8003ed6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ee8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	021b      	lsls	r3, r3, #8
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a1d      	ldr	r2, [pc, #116]	@ (8003f70 <TIM_OC3_SetConfig+0xd0>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d10d      	bne.n	8003f1a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	021b      	lsls	r3, r3, #8
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a14      	ldr	r2, [pc, #80]	@ (8003f70 <TIM_OC3_SetConfig+0xd0>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d113      	bne.n	8003f4a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003f30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	011b      	lsls	r3, r3, #4
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	011b      	lsls	r3, r3, #4
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685a      	ldr	r2, [r3, #4]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	621a      	str	r2, [r3, #32]
}
 8003f64:	bf00      	nop
 8003f66:	371c      	adds	r7, #28
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr
 8003f70:	40010000 	.word	0x40010000

08003f74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b087      	sub	sp, #28
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a1b      	ldr	r3, [r3, #32]
 8003f88:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003faa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	021b      	lsls	r3, r3, #8
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003fbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	031b      	lsls	r3, r3, #12
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a10      	ldr	r2, [pc, #64]	@ (8004010 <TIM_OC4_SetConfig+0x9c>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d109      	bne.n	8003fe8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003fda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	019b      	lsls	r3, r3, #6
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	621a      	str	r2, [r3, #32]
}
 8004002:	bf00      	nop
 8004004:	371c      	adds	r7, #28
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	40010000 	.word	0x40010000

08004014 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004014:	b480      	push	{r7}
 8004016:	b087      	sub	sp, #28
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	f023 0201 	bic.w	r2, r3, #1
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800403e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	011b      	lsls	r3, r3, #4
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	4313      	orrs	r3, r2
 8004048:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f023 030a 	bic.w	r3, r3, #10
 8004050:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	4313      	orrs	r3, r2
 8004058:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	621a      	str	r2, [r3, #32]
}
 8004066:	bf00      	nop
 8004068:	371c      	adds	r7, #28
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004072:	b480      	push	{r7}
 8004074:	b087      	sub	sp, #28
 8004076:	af00      	add	r7, sp, #0
 8004078:	60f8      	str	r0, [r7, #12]
 800407a:	60b9      	str	r1, [r7, #8]
 800407c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6a1b      	ldr	r3, [r3, #32]
 8004088:	f023 0210 	bic.w	r2, r3, #16
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800409c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	031b      	lsls	r3, r3, #12
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80040ae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	011b      	lsls	r3, r3, #4
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	621a      	str	r2, [r3, #32]
}
 80040c6:	bf00      	nop
 80040c8:	371c      	adds	r7, #28
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr

080040d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040d2:	b480      	push	{r7}
 80040d4:	b085      	sub	sp, #20
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
 80040da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	f043 0307 	orr.w	r3, r3, #7
 80040f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	609a      	str	r2, [r3, #8]
}
 80040fc:	bf00      	nop
 80040fe:	3714      	adds	r7, #20
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004108:	b480      	push	{r7}
 800410a:	b087      	sub	sp, #28
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
 8004114:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004122:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	021a      	lsls	r2, r3, #8
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	431a      	orrs	r2, r3
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	4313      	orrs	r3, r2
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	4313      	orrs	r3, r2
 8004134:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	609a      	str	r2, [r3, #8]
}
 800413c:	bf00      	nop
 800413e:	371c      	adds	r7, #28
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004158:	2b01      	cmp	r3, #1
 800415a:	d101      	bne.n	8004160 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800415c:	2302      	movs	r3, #2
 800415e:	e050      	b.n	8004202 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2202      	movs	r2, #2
 800416c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004186:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	4313      	orrs	r3, r2
 8004190:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a1c      	ldr	r2, [pc, #112]	@ (8004210 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d018      	beq.n	80041d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041ac:	d013      	beq.n	80041d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a18      	ldr	r2, [pc, #96]	@ (8004214 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d00e      	beq.n	80041d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a16      	ldr	r2, [pc, #88]	@ (8004218 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d009      	beq.n	80041d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a15      	ldr	r2, [pc, #84]	@ (800421c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d004      	beq.n	80041d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a13      	ldr	r2, [pc, #76]	@ (8004220 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d10c      	bne.n	80041f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	68ba      	ldr	r2, [r7, #8]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3714      	adds	r7, #20
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	40010000 	.word	0x40010000
 8004214:	40000400 	.word	0x40000400
 8004218:	40000800 	.word	0x40000800
 800421c:	40000c00 	.word	0x40000c00
 8004220:	40014000 	.word	0x40014000

08004224 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800422e:	2300      	movs	r3, #0
 8004230:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004238:	2b01      	cmp	r3, #1
 800423a:	d101      	bne.n	8004240 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800423c:	2302      	movs	r3, #2
 800423e:	e03d      	b.n	80042bc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	4313      	orrs	r3, r2
 8004254:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	4313      	orrs	r3, r2
 8004262:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	4313      	orrs	r3, r2
 8004270:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4313      	orrs	r3, r2
 800427e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	4313      	orrs	r3, r2
 800428c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	695b      	ldr	r3, [r3, #20]
 8004298:	4313      	orrs	r3, r2
 800429a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3714      	adds	r7, #20
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80042c8:	b084      	sub	sp, #16
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b084      	sub	sp, #16
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
 80042d2:	f107 001c 	add.w	r0, r7, #28
 80042d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80042da:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d123      	bne.n	800432a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042e6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80042f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800430a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800430e:	2b01      	cmp	r3, #1
 8004310:	d105      	bne.n	800431e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f001 fae2 	bl	80058e8 <USB_CoreReset>
 8004324:	4603      	mov	r3, r0
 8004326:	73fb      	strb	r3, [r7, #15]
 8004328:	e01b      	b.n	8004362 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f001 fad6 	bl	80058e8 <USB_CoreReset>
 800433c:	4603      	mov	r3, r0
 800433e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004340:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004344:	2b00      	cmp	r3, #0
 8004346:	d106      	bne.n	8004356 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800434c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	639a      	str	r2, [r3, #56]	@ 0x38
 8004354:	e005      	b.n	8004362 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800435a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004362:	7fbb      	ldrb	r3, [r7, #30]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d10b      	bne.n	8004380 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f043 0206 	orr.w	r2, r3, #6
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f043 0220 	orr.w	r2, r3, #32
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004380:	7bfb      	ldrb	r3, [r7, #15]
}
 8004382:	4618      	mov	r0, r3
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800438c:	b004      	add	sp, #16
 800438e:	4770      	bx	lr

08004390 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004390:	b480      	push	{r7}
 8004392:	b087      	sub	sp, #28
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	4613      	mov	r3, r2
 800439c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800439e:	79fb      	ldrb	r3, [r7, #7]
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d165      	bne.n	8004470 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	4a41      	ldr	r2, [pc, #260]	@ (80044ac <USB_SetTurnaroundTime+0x11c>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d906      	bls.n	80043ba <USB_SetTurnaroundTime+0x2a>
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	4a40      	ldr	r2, [pc, #256]	@ (80044b0 <USB_SetTurnaroundTime+0x120>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d202      	bcs.n	80043ba <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80043b4:	230f      	movs	r3, #15
 80043b6:	617b      	str	r3, [r7, #20]
 80043b8:	e062      	b.n	8004480 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	4a3c      	ldr	r2, [pc, #240]	@ (80044b0 <USB_SetTurnaroundTime+0x120>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d306      	bcc.n	80043d0 <USB_SetTurnaroundTime+0x40>
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	4a3b      	ldr	r2, [pc, #236]	@ (80044b4 <USB_SetTurnaroundTime+0x124>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d202      	bcs.n	80043d0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80043ca:	230e      	movs	r3, #14
 80043cc:	617b      	str	r3, [r7, #20]
 80043ce:	e057      	b.n	8004480 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	4a38      	ldr	r2, [pc, #224]	@ (80044b4 <USB_SetTurnaroundTime+0x124>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d306      	bcc.n	80043e6 <USB_SetTurnaroundTime+0x56>
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	4a37      	ldr	r2, [pc, #220]	@ (80044b8 <USB_SetTurnaroundTime+0x128>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d202      	bcs.n	80043e6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80043e0:	230d      	movs	r3, #13
 80043e2:	617b      	str	r3, [r7, #20]
 80043e4:	e04c      	b.n	8004480 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	4a33      	ldr	r2, [pc, #204]	@ (80044b8 <USB_SetTurnaroundTime+0x128>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d306      	bcc.n	80043fc <USB_SetTurnaroundTime+0x6c>
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	4a32      	ldr	r2, [pc, #200]	@ (80044bc <USB_SetTurnaroundTime+0x12c>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d802      	bhi.n	80043fc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80043f6:	230c      	movs	r3, #12
 80043f8:	617b      	str	r3, [r7, #20]
 80043fa:	e041      	b.n	8004480 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	4a2f      	ldr	r2, [pc, #188]	@ (80044bc <USB_SetTurnaroundTime+0x12c>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d906      	bls.n	8004412 <USB_SetTurnaroundTime+0x82>
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	4a2e      	ldr	r2, [pc, #184]	@ (80044c0 <USB_SetTurnaroundTime+0x130>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d802      	bhi.n	8004412 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800440c:	230b      	movs	r3, #11
 800440e:	617b      	str	r3, [r7, #20]
 8004410:	e036      	b.n	8004480 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	4a2a      	ldr	r2, [pc, #168]	@ (80044c0 <USB_SetTurnaroundTime+0x130>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d906      	bls.n	8004428 <USB_SetTurnaroundTime+0x98>
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	4a29      	ldr	r2, [pc, #164]	@ (80044c4 <USB_SetTurnaroundTime+0x134>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d802      	bhi.n	8004428 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004422:	230a      	movs	r3, #10
 8004424:	617b      	str	r3, [r7, #20]
 8004426:	e02b      	b.n	8004480 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	4a26      	ldr	r2, [pc, #152]	@ (80044c4 <USB_SetTurnaroundTime+0x134>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d906      	bls.n	800443e <USB_SetTurnaroundTime+0xae>
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	4a25      	ldr	r2, [pc, #148]	@ (80044c8 <USB_SetTurnaroundTime+0x138>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d202      	bcs.n	800443e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004438:	2309      	movs	r3, #9
 800443a:	617b      	str	r3, [r7, #20]
 800443c:	e020      	b.n	8004480 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	4a21      	ldr	r2, [pc, #132]	@ (80044c8 <USB_SetTurnaroundTime+0x138>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d306      	bcc.n	8004454 <USB_SetTurnaroundTime+0xc4>
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	4a20      	ldr	r2, [pc, #128]	@ (80044cc <USB_SetTurnaroundTime+0x13c>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d802      	bhi.n	8004454 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800444e:	2308      	movs	r3, #8
 8004450:	617b      	str	r3, [r7, #20]
 8004452:	e015      	b.n	8004480 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	4a1d      	ldr	r2, [pc, #116]	@ (80044cc <USB_SetTurnaroundTime+0x13c>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d906      	bls.n	800446a <USB_SetTurnaroundTime+0xda>
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	4a1c      	ldr	r2, [pc, #112]	@ (80044d0 <USB_SetTurnaroundTime+0x140>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d202      	bcs.n	800446a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004464:	2307      	movs	r3, #7
 8004466:	617b      	str	r3, [r7, #20]
 8004468:	e00a      	b.n	8004480 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800446a:	2306      	movs	r3, #6
 800446c:	617b      	str	r3, [r7, #20]
 800446e:	e007      	b.n	8004480 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004470:	79fb      	ldrb	r3, [r7, #7]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d102      	bne.n	800447c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004476:	2309      	movs	r3, #9
 8004478:	617b      	str	r3, [r7, #20]
 800447a:	e001      	b.n	8004480 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800447c:	2309      	movs	r3, #9
 800447e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	68da      	ldr	r2, [r3, #12]
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	029b      	lsls	r3, r3, #10
 8004494:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004498:	431a      	orrs	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	371c      	adds	r7, #28
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr
 80044ac:	00d8acbf 	.word	0x00d8acbf
 80044b0:	00e4e1c0 	.word	0x00e4e1c0
 80044b4:	00f42400 	.word	0x00f42400
 80044b8:	01067380 	.word	0x01067380
 80044bc:	011a499f 	.word	0x011a499f
 80044c0:	01312cff 	.word	0x01312cff
 80044c4:	014ca43f 	.word	0x014ca43f
 80044c8:	016e3600 	.word	0x016e3600
 80044cc:	01a6ab1f 	.word	0x01a6ab1f
 80044d0:	01e84800 	.word	0x01e84800

080044d4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f043 0201 	orr.w	r2, r3, #1
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr

080044f6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80044f6:	b480      	push	{r7}
 80044f8:	b083      	sub	sp, #12
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f023 0201 	bic.w	r2, r3, #1
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	460b      	mov	r3, r1
 8004522:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004524:	2300      	movs	r3, #0
 8004526:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004534:	78fb      	ldrb	r3, [r7, #3]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d115      	bne.n	8004566 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004546:	200a      	movs	r0, #10
 8004548:	f7fc fcca 	bl	8000ee0 <HAL_Delay>
      ms += 10U;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	330a      	adds	r3, #10
 8004550:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f001 f939 	bl	80057ca <USB_GetMode>
 8004558:	4603      	mov	r3, r0
 800455a:	2b01      	cmp	r3, #1
 800455c:	d01e      	beq.n	800459c <USB_SetCurrentMode+0x84>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2bc7      	cmp	r3, #199	@ 0xc7
 8004562:	d9f0      	bls.n	8004546 <USB_SetCurrentMode+0x2e>
 8004564:	e01a      	b.n	800459c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004566:	78fb      	ldrb	r3, [r7, #3]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d115      	bne.n	8004598 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004578:	200a      	movs	r0, #10
 800457a:	f7fc fcb1 	bl	8000ee0 <HAL_Delay>
      ms += 10U;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	330a      	adds	r3, #10
 8004582:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f001 f920 	bl	80057ca <USB_GetMode>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d005      	beq.n	800459c <USB_SetCurrentMode+0x84>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2bc7      	cmp	r3, #199	@ 0xc7
 8004594:	d9f0      	bls.n	8004578 <USB_SetCurrentMode+0x60>
 8004596:	e001      	b.n	800459c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e005      	b.n	80045a8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2bc8      	cmp	r3, #200	@ 0xc8
 80045a0:	d101      	bne.n	80045a6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e000      	b.n	80045a8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80045a6:	2300      	movs	r3, #0
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045b0:	b084      	sub	sp, #16
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b086      	sub	sp, #24
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
 80045ba:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80045be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80045c2:	2300      	movs	r3, #0
 80045c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80045ca:	2300      	movs	r3, #0
 80045cc:	613b      	str	r3, [r7, #16]
 80045ce:	e009      	b.n	80045e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	3340      	adds	r3, #64	@ 0x40
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	4413      	add	r3, r2
 80045da:	2200      	movs	r2, #0
 80045dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	3301      	adds	r3, #1
 80045e2:	613b      	str	r3, [r7, #16]
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	2b0e      	cmp	r3, #14
 80045e8:	d9f2      	bls.n	80045d0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80045ea:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d11c      	bne.n	800462c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004600:	f043 0302 	orr.w	r3, r3, #2
 8004604:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800460a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004616:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004622:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	639a      	str	r2, [r3, #56]	@ 0x38
 800462a:	e00b      	b.n	8004644 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004630:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800463c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800464a:	461a      	mov	r2, r3
 800464c:	2300      	movs	r3, #0
 800464e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004650:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004654:	2b01      	cmp	r3, #1
 8004656:	d10d      	bne.n	8004674 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004658:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800465c:	2b00      	cmp	r3, #0
 800465e:	d104      	bne.n	800466a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004660:	2100      	movs	r1, #0
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f968 	bl	8004938 <USB_SetDevSpeed>
 8004668:	e008      	b.n	800467c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800466a:	2101      	movs	r1, #1
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f963 	bl	8004938 <USB_SetDevSpeed>
 8004672:	e003      	b.n	800467c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004674:	2103      	movs	r1, #3
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f95e 	bl	8004938 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800467c:	2110      	movs	r1, #16
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 f8fa 	bl	8004878 <USB_FlushTxFifo>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f924 	bl	80048dc <USB_FlushRxFifo>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046a4:	461a      	mov	r2, r3
 80046a6:	2300      	movs	r3, #0
 80046a8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046b0:	461a      	mov	r2, r3
 80046b2:	2300      	movs	r3, #0
 80046b4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046bc:	461a      	mov	r2, r3
 80046be:	2300      	movs	r3, #0
 80046c0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046c2:	2300      	movs	r3, #0
 80046c4:	613b      	str	r3, [r7, #16]
 80046c6:	e043      	b.n	8004750 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	015a      	lsls	r2, r3, #5
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4413      	add	r3, r2
 80046d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80046da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80046de:	d118      	bne.n	8004712 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d10a      	bne.n	80046fc <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	015a      	lsls	r2, r3, #5
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	4413      	add	r3, r2
 80046ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046f2:	461a      	mov	r2, r3
 80046f4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80046f8:	6013      	str	r3, [r2, #0]
 80046fa:	e013      	b.n	8004724 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	015a      	lsls	r2, r3, #5
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	4413      	add	r3, r2
 8004704:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004708:	461a      	mov	r2, r3
 800470a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800470e:	6013      	str	r3, [r2, #0]
 8004710:	e008      	b.n	8004724 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	015a      	lsls	r2, r3, #5
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	4413      	add	r3, r2
 800471a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800471e:	461a      	mov	r2, r3
 8004720:	2300      	movs	r3, #0
 8004722:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	015a      	lsls	r2, r3, #5
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	4413      	add	r3, r2
 800472c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004730:	461a      	mov	r2, r3
 8004732:	2300      	movs	r3, #0
 8004734:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	015a      	lsls	r2, r3, #5
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	4413      	add	r3, r2
 800473e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004742:	461a      	mov	r2, r3
 8004744:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004748:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	3301      	adds	r3, #1
 800474e:	613b      	str	r3, [r7, #16]
 8004750:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004754:	461a      	mov	r2, r3
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	4293      	cmp	r3, r2
 800475a:	d3b5      	bcc.n	80046c8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800475c:	2300      	movs	r3, #0
 800475e:	613b      	str	r3, [r7, #16]
 8004760:	e043      	b.n	80047ea <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	015a      	lsls	r2, r3, #5
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	4413      	add	r3, r2
 800476a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004774:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004778:	d118      	bne.n	80047ac <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10a      	bne.n	8004796 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	015a      	lsls	r2, r3, #5
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	4413      	add	r3, r2
 8004788:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800478c:	461a      	mov	r2, r3
 800478e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004792:	6013      	str	r3, [r2, #0]
 8004794:	e013      	b.n	80047be <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	015a      	lsls	r2, r3, #5
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	4413      	add	r3, r2
 800479e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047a2:	461a      	mov	r2, r3
 80047a4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80047a8:	6013      	str	r3, [r2, #0]
 80047aa:	e008      	b.n	80047be <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	015a      	lsls	r2, r3, #5
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	4413      	add	r3, r2
 80047b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047b8:	461a      	mov	r2, r3
 80047ba:	2300      	movs	r3, #0
 80047bc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	015a      	lsls	r2, r3, #5
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	4413      	add	r3, r2
 80047c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047ca:	461a      	mov	r2, r3
 80047cc:	2300      	movs	r3, #0
 80047ce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	015a      	lsls	r2, r3, #5
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	4413      	add	r3, r2
 80047d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047dc:	461a      	mov	r2, r3
 80047de:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80047e2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	3301      	adds	r3, #1
 80047e8:	613b      	str	r3, [r7, #16]
 80047ea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80047ee:	461a      	mov	r2, r3
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d3b5      	bcc.n	8004762 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004804:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004808:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004816:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004818:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800481c:	2b00      	cmp	r3, #0
 800481e:	d105      	bne.n	800482c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	f043 0210 	orr.w	r2, r3, #16
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	699a      	ldr	r2, [r3, #24]
 8004830:	4b10      	ldr	r3, [pc, #64]	@ (8004874 <USB_DevInit+0x2c4>)
 8004832:	4313      	orrs	r3, r2
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004838:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800483c:	2b00      	cmp	r3, #0
 800483e:	d005      	beq.n	800484c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	f043 0208 	orr.w	r2, r3, #8
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800484c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004850:	2b01      	cmp	r3, #1
 8004852:	d107      	bne.n	8004864 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800485c:	f043 0304 	orr.w	r3, r3, #4
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004864:	7dfb      	ldrb	r3, [r7, #23]
}
 8004866:	4618      	mov	r0, r3
 8004868:	3718      	adds	r7, #24
 800486a:	46bd      	mov	sp, r7
 800486c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004870:	b004      	add	sp, #16
 8004872:	4770      	bx	lr
 8004874:	803c3800 	.word	0x803c3800

08004878 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004882:	2300      	movs	r3, #0
 8004884:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	3301      	adds	r3, #1
 800488a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004892:	d901      	bls.n	8004898 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e01b      	b.n	80048d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	2b00      	cmp	r3, #0
 800489e:	daf2      	bge.n	8004886 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80048a0:	2300      	movs	r3, #0
 80048a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	019b      	lsls	r3, r3, #6
 80048a8:	f043 0220 	orr.w	r2, r3, #32
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	3301      	adds	r3, #1
 80048b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80048bc:	d901      	bls.n	80048c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e006      	b.n	80048d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	f003 0320 	and.w	r3, r3, #32
 80048ca:	2b20      	cmp	r3, #32
 80048cc:	d0f0      	beq.n	80048b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3714      	adds	r7, #20
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048e4:	2300      	movs	r3, #0
 80048e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	3301      	adds	r3, #1
 80048ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80048f4:	d901      	bls.n	80048fa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e018      	b.n	800492c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	daf2      	bge.n	80048e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004902:	2300      	movs	r3, #0
 8004904:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2210      	movs	r2, #16
 800490a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	3301      	adds	r3, #1
 8004910:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004918:	d901      	bls.n	800491e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e006      	b.n	800492c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	f003 0310 	and.w	r3, r3, #16
 8004926:	2b10      	cmp	r3, #16
 8004928:	d0f0      	beq.n	800490c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	460b      	mov	r3, r1
 8004942:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	78fb      	ldrb	r3, [r7, #3]
 8004952:	68f9      	ldr	r1, [r7, #12]
 8004954:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004958:	4313      	orrs	r3, r2
 800495a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3714      	adds	r7, #20
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800496a:	b480      	push	{r7}
 800496c:	b087      	sub	sp, #28
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f003 0306 	and.w	r3, r3, #6
 8004982:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d102      	bne.n	8004990 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800498a:	2300      	movs	r3, #0
 800498c:	75fb      	strb	r3, [r7, #23]
 800498e:	e00a      	b.n	80049a6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2b02      	cmp	r3, #2
 8004994:	d002      	beq.n	800499c <USB_GetDevSpeed+0x32>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2b06      	cmp	r3, #6
 800499a:	d102      	bne.n	80049a2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800499c:	2302      	movs	r3, #2
 800499e:	75fb      	strb	r3, [r7, #23]
 80049a0:	e001      	b.n	80049a6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80049a2:	230f      	movs	r3, #15
 80049a4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80049a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	371c      	adds	r7, #28
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	785b      	ldrb	r3, [r3, #1]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d13a      	bne.n	8004a46 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049d6:	69da      	ldr	r2, [r3, #28]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	f003 030f 	and.w	r3, r3, #15
 80049e0:	2101      	movs	r1, #1
 80049e2:	fa01 f303 	lsl.w	r3, r1, r3
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	68f9      	ldr	r1, [r7, #12]
 80049ea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80049ee:	4313      	orrs	r3, r2
 80049f0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	015a      	lsls	r2, r3, #5
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	4413      	add	r3, r2
 80049fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d155      	bne.n	8004ab4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	015a      	lsls	r2, r3, #5
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	4413      	add	r3, r2
 8004a10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	791b      	ldrb	r3, [r3, #4]
 8004a22:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a24:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	059b      	lsls	r3, r3, #22
 8004a2a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	68ba      	ldr	r2, [r7, #8]
 8004a30:	0151      	lsls	r1, r2, #5
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	440a      	add	r2, r1
 8004a36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a42:	6013      	str	r3, [r2, #0]
 8004a44:	e036      	b.n	8004ab4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a4c:	69da      	ldr	r2, [r3, #28]
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	f003 030f 	and.w	r3, r3, #15
 8004a56:	2101      	movs	r1, #1
 8004a58:	fa01 f303 	lsl.w	r3, r1, r3
 8004a5c:	041b      	lsls	r3, r3, #16
 8004a5e:	68f9      	ldr	r1, [r7, #12]
 8004a60:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a64:	4313      	orrs	r3, r2
 8004a66:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	015a      	lsls	r2, r3, #5
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	4413      	add	r3, r2
 8004a70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d11a      	bne.n	8004ab4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	015a      	lsls	r2, r3, #5
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	4413      	add	r3, r2
 8004a86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	791b      	ldrb	r3, [r3, #4]
 8004a98:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a9a:	430b      	orrs	r3, r1
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	68ba      	ldr	r2, [r7, #8]
 8004aa0:	0151      	lsls	r1, r2, #5
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	440a      	add	r2, r1
 8004aa6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004aaa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004aae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ab2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3714      	adds	r7, #20
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
	...

08004ac4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	785b      	ldrb	r3, [r3, #1]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d161      	bne.n	8004ba4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	015a      	lsls	r2, r3, #5
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004af2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004af6:	d11f      	bne.n	8004b38 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	015a      	lsls	r2, r3, #5
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	4413      	add	r3, r2
 8004b00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	0151      	lsls	r1, r2, #5
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	440a      	add	r2, r1
 8004b0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b12:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004b16:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	015a      	lsls	r2, r3, #5
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	4413      	add	r3, r2
 8004b20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	0151      	lsls	r1, r2, #5
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	440a      	add	r2, r1
 8004b2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b32:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004b36:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	f003 030f 	and.w	r3, r3, #15
 8004b48:	2101      	movs	r1, #1
 8004b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	43db      	mvns	r3, r3
 8004b52:	68f9      	ldr	r1, [r7, #12]
 8004b54:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b58:	4013      	ands	r3, r2
 8004b5a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b62:	69da      	ldr	r2, [r3, #28]
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	f003 030f 	and.w	r3, r3, #15
 8004b6c:	2101      	movs	r1, #1
 8004b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	43db      	mvns	r3, r3
 8004b76:	68f9      	ldr	r1, [r7, #12]
 8004b78:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	015a      	lsls	r2, r3, #5
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	4413      	add	r3, r2
 8004b88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	0159      	lsls	r1, r3, #5
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	440b      	add	r3, r1
 8004b96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	4b35      	ldr	r3, [pc, #212]	@ (8004c74 <USB_DeactivateEndpoint+0x1b0>)
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	600b      	str	r3, [r1, #0]
 8004ba2:	e060      	b.n	8004c66 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	015a      	lsls	r2, r3, #5
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4413      	add	r3, r2
 8004bac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004bb6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004bba:	d11f      	bne.n	8004bfc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	015a      	lsls	r2, r3, #5
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	0151      	lsls	r1, r2, #5
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	440a      	add	r2, r1
 8004bd2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004bd6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004bda:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	015a      	lsls	r2, r3, #5
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	4413      	add	r3, r2
 8004be4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	0151      	lsls	r1, r2, #5
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	440a      	add	r2, r1
 8004bf2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004bf6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004bfa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	f003 030f 	and.w	r3, r3, #15
 8004c0c:	2101      	movs	r1, #1
 8004c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c12:	041b      	lsls	r3, r3, #16
 8004c14:	43db      	mvns	r3, r3
 8004c16:	68f9      	ldr	r1, [r7, #12]
 8004c18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c26:	69da      	ldr	r2, [r3, #28]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	f003 030f 	and.w	r3, r3, #15
 8004c30:	2101      	movs	r1, #1
 8004c32:	fa01 f303 	lsl.w	r3, r1, r3
 8004c36:	041b      	lsls	r3, r3, #16
 8004c38:	43db      	mvns	r3, r3
 8004c3a:	68f9      	ldr	r1, [r7, #12]
 8004c3c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c40:	4013      	ands	r3, r2
 8004c42:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	015a      	lsls	r2, r3, #5
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	0159      	lsls	r1, r3, #5
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	440b      	add	r3, r1
 8004c5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c5e:	4619      	mov	r1, r3
 8004c60:	4b05      	ldr	r3, [pc, #20]	@ (8004c78 <USB_DeactivateEndpoint+0x1b4>)
 8004c62:	4013      	ands	r3, r2
 8004c64:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3714      	adds	r7, #20
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr
 8004c74:	ec337800 	.word	0xec337800
 8004c78:	eff37800 	.word	0xeff37800

08004c7c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b08a      	sub	sp, #40	@ 0x28
 8004c80:	af02      	add	r7, sp, #8
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	4613      	mov	r3, r2
 8004c88:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	785b      	ldrb	r3, [r3, #1]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	f040 817a 	bne.w	8004f92 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d132      	bne.n	8004d0c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	015a      	lsls	r2, r3, #5
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	4413      	add	r3, r2
 8004cae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	69ba      	ldr	r2, [r7, #24]
 8004cb6:	0151      	lsls	r1, r2, #5
 8004cb8:	69fa      	ldr	r2, [r7, #28]
 8004cba:	440a      	add	r2, r1
 8004cbc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004cc0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004cc4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004cc8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	015a      	lsls	r2, r3, #5
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	69ba      	ldr	r2, [r7, #24]
 8004cda:	0151      	lsls	r1, r2, #5
 8004cdc:	69fa      	ldr	r2, [r7, #28]
 8004cde:	440a      	add	r2, r1
 8004ce0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ce4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004ce8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	015a      	lsls	r2, r3, #5
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	0151      	lsls	r1, r2, #5
 8004cfc:	69fa      	ldr	r2, [r7, #28]
 8004cfe:	440a      	add	r2, r1
 8004d00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d04:	0cdb      	lsrs	r3, r3, #19
 8004d06:	04db      	lsls	r3, r3, #19
 8004d08:	6113      	str	r3, [r2, #16]
 8004d0a:	e092      	b.n	8004e32 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	015a      	lsls	r2, r3, #5
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	69ba      	ldr	r2, [r7, #24]
 8004d1c:	0151      	lsls	r1, r2, #5
 8004d1e:	69fa      	ldr	r2, [r7, #28]
 8004d20:	440a      	add	r2, r1
 8004d22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d26:	0cdb      	lsrs	r3, r3, #19
 8004d28:	04db      	lsls	r3, r3, #19
 8004d2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	015a      	lsls	r2, r3, #5
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	4413      	add	r3, r2
 8004d34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	69ba      	ldr	r2, [r7, #24]
 8004d3c:	0151      	lsls	r1, r2, #5
 8004d3e:	69fa      	ldr	r2, [r7, #28]
 8004d40:	440a      	add	r2, r1
 8004d42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d46:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004d4a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004d4e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d11a      	bne.n	8004d8c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	691a      	ldr	r2, [r3, #16]
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d903      	bls.n	8004d6a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	689a      	ldr	r2, [r3, #8]
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	015a      	lsls	r2, r3, #5
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	4413      	add	r3, r2
 8004d72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	69ba      	ldr	r2, [r7, #24]
 8004d7a:	0151      	lsls	r1, r2, #5
 8004d7c:	69fa      	ldr	r2, [r7, #28]
 8004d7e:	440a      	add	r2, r1
 8004d80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d84:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d88:	6113      	str	r3, [r2, #16]
 8004d8a:	e01b      	b.n	8004dc4 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	015a      	lsls	r2, r3, #5
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	4413      	add	r3, r2
 8004d94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d98:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	6919      	ldr	r1, [r3, #16]
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	440b      	add	r3, r1
 8004da4:	1e59      	subs	r1, r3, #1
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	fbb1 f3f3 	udiv	r3, r1, r3
 8004dae:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004db0:	4ba2      	ldr	r3, [pc, #648]	@ (800503c <USB_EPStartXfer+0x3c0>)
 8004db2:	400b      	ands	r3, r1
 8004db4:	69b9      	ldr	r1, [r7, #24]
 8004db6:	0148      	lsls	r0, r1, #5
 8004db8:	69f9      	ldr	r1, [r7, #28]
 8004dba:	4401      	add	r1, r0
 8004dbc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	015a      	lsls	r2, r3, #5
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	4413      	add	r3, r2
 8004dcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dd0:	691a      	ldr	r2, [r3, #16]
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dda:	69b9      	ldr	r1, [r7, #24]
 8004ddc:	0148      	lsls	r0, r1, #5
 8004dde:	69f9      	ldr	r1, [r7, #28]
 8004de0:	4401      	add	r1, r0
 8004de2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004de6:	4313      	orrs	r3, r2
 8004de8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	791b      	ldrb	r3, [r3, #4]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d11f      	bne.n	8004e32 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	015a      	lsls	r2, r3, #5
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	4413      	add	r3, r2
 8004dfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	69ba      	ldr	r2, [r7, #24]
 8004e02:	0151      	lsls	r1, r2, #5
 8004e04:	69fa      	ldr	r2, [r7, #28]
 8004e06:	440a      	add	r2, r1
 8004e08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e0c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004e10:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	015a      	lsls	r2, r3, #5
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	4413      	add	r3, r2
 8004e1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	69ba      	ldr	r2, [r7, #24]
 8004e22:	0151      	lsls	r1, r2, #5
 8004e24:	69fa      	ldr	r2, [r7, #28]
 8004e26:	440a      	add	r2, r1
 8004e28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e2c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004e30:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004e32:	79fb      	ldrb	r3, [r7, #7]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d14b      	bne.n	8004ed0 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	69db      	ldr	r3, [r3, #28]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d009      	beq.n	8004e54 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	015a      	lsls	r2, r3, #5
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	4413      	add	r3, r2
 8004e48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	69db      	ldr	r3, [r3, #28]
 8004e52:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	791b      	ldrb	r3, [r3, #4]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d128      	bne.n	8004eae <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d110      	bne.n	8004e8e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	015a      	lsls	r2, r3, #5
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	4413      	add	r3, r2
 8004e74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	69ba      	ldr	r2, [r7, #24]
 8004e7c:	0151      	lsls	r1, r2, #5
 8004e7e:	69fa      	ldr	r2, [r7, #28]
 8004e80:	440a      	add	r2, r1
 8004e82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e86:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004e8a:	6013      	str	r3, [r2, #0]
 8004e8c:	e00f      	b.n	8004eae <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	015a      	lsls	r2, r3, #5
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	4413      	add	r3, r2
 8004e96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	69ba      	ldr	r2, [r7, #24]
 8004e9e:	0151      	lsls	r1, r2, #5
 8004ea0:	69fa      	ldr	r2, [r7, #28]
 8004ea2:	440a      	add	r2, r1
 8004ea4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ea8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004eac:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	015a      	lsls	r2, r3, #5
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	69ba      	ldr	r2, [r7, #24]
 8004ebe:	0151      	lsls	r1, r2, #5
 8004ec0:	69fa      	ldr	r2, [r7, #28]
 8004ec2:	440a      	add	r2, r1
 8004ec4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ec8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004ecc:	6013      	str	r3, [r2, #0]
 8004ece:	e165      	b.n	800519c <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	015a      	lsls	r2, r3, #5
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	69ba      	ldr	r2, [r7, #24]
 8004ee0:	0151      	lsls	r1, r2, #5
 8004ee2:	69fa      	ldr	r2, [r7, #28]
 8004ee4:	440a      	add	r2, r1
 8004ee6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004eea:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004eee:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	791b      	ldrb	r3, [r3, #4]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d015      	beq.n	8004f24 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f000 814d 	beq.w	800519c <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	f003 030f 	and.w	r3, r3, #15
 8004f12:	2101      	movs	r1, #1
 8004f14:	fa01 f303 	lsl.w	r3, r1, r3
 8004f18:	69f9      	ldr	r1, [r7, #28]
 8004f1a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	634b      	str	r3, [r1, #52]	@ 0x34
 8004f22:	e13b      	b.n	800519c <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d110      	bne.n	8004f56 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	015a      	lsls	r2, r3, #5
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	69ba      	ldr	r2, [r7, #24]
 8004f44:	0151      	lsls	r1, r2, #5
 8004f46:	69fa      	ldr	r2, [r7, #28]
 8004f48:	440a      	add	r2, r1
 8004f4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f4e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004f52:	6013      	str	r3, [r2, #0]
 8004f54:	e00f      	b.n	8004f76 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	015a      	lsls	r2, r3, #5
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	69ba      	ldr	r2, [r7, #24]
 8004f66:	0151      	lsls	r1, r2, #5
 8004f68:	69fa      	ldr	r2, [r7, #28]
 8004f6a:	440a      	add	r2, r1
 8004f6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f74:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	68d9      	ldr	r1, [r3, #12]
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	781a      	ldrb	r2, [r3, #0]
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	b298      	uxth	r0, r3
 8004f84:	79fb      	ldrb	r3, [r7, #7]
 8004f86:	9300      	str	r3, [sp, #0]
 8004f88:	4603      	mov	r3, r0
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f000 f9b8 	bl	8005300 <USB_WritePacket>
 8004f90:	e104      	b.n	800519c <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	015a      	lsls	r2, r3, #5
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	4413      	add	r3, r2
 8004f9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	0151      	lsls	r1, r2, #5
 8004fa4:	69fa      	ldr	r2, [r7, #28]
 8004fa6:	440a      	add	r2, r1
 8004fa8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004fac:	0cdb      	lsrs	r3, r3, #19
 8004fae:	04db      	lsls	r3, r3, #19
 8004fb0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	015a      	lsls	r2, r3, #5
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	4413      	add	r3, r2
 8004fba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	69ba      	ldr	r2, [r7, #24]
 8004fc2:	0151      	lsls	r1, r2, #5
 8004fc4:	69fa      	ldr	r2, [r7, #28]
 8004fc6:	440a      	add	r2, r1
 8004fc8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004fcc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004fd0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004fd4:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d131      	bne.n	8005040 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d003      	beq.n	8004fec <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	689a      	ldr	r2, [r3, #8]
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	689a      	ldr	r2, [r3, #8]
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	015a      	lsls	r2, r3, #5
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005000:	691a      	ldr	r2, [r3, #16]
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800500a:	69b9      	ldr	r1, [r7, #24]
 800500c:	0148      	lsls	r0, r1, #5
 800500e:	69f9      	ldr	r1, [r7, #28]
 8005010:	4401      	add	r1, r0
 8005012:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005016:	4313      	orrs	r3, r2
 8005018:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	015a      	lsls	r2, r3, #5
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	4413      	add	r3, r2
 8005022:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	69ba      	ldr	r2, [r7, #24]
 800502a:	0151      	lsls	r1, r2, #5
 800502c:	69fa      	ldr	r2, [r7, #28]
 800502e:	440a      	add	r2, r1
 8005030:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005034:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005038:	6113      	str	r3, [r2, #16]
 800503a:	e061      	b.n	8005100 <USB_EPStartXfer+0x484>
 800503c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d123      	bne.n	8005090 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	015a      	lsls	r2, r3, #5
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	4413      	add	r3, r2
 8005050:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005054:	691a      	ldr	r2, [r3, #16]
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800505e:	69b9      	ldr	r1, [r7, #24]
 8005060:	0148      	lsls	r0, r1, #5
 8005062:	69f9      	ldr	r1, [r7, #28]
 8005064:	4401      	add	r1, r0
 8005066:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800506a:	4313      	orrs	r3, r2
 800506c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	015a      	lsls	r2, r3, #5
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	4413      	add	r3, r2
 8005076:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	0151      	lsls	r1, r2, #5
 8005080:	69fa      	ldr	r2, [r7, #28]
 8005082:	440a      	add	r2, r1
 8005084:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005088:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800508c:	6113      	str	r3, [r2, #16]
 800508e:	e037      	b.n	8005100 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	691a      	ldr	r2, [r3, #16]
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	4413      	add	r3, r2
 800509a:	1e5a      	subs	r2, r3, #1
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	8afa      	ldrh	r2, [r7, #22]
 80050ac:	fb03 f202 	mul.w	r2, r3, r2
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	015a      	lsls	r2, r3, #5
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	4413      	add	r3, r2
 80050bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050c0:	691a      	ldr	r2, [r3, #16]
 80050c2:	8afb      	ldrh	r3, [r7, #22]
 80050c4:	04d9      	lsls	r1, r3, #19
 80050c6:	4b38      	ldr	r3, [pc, #224]	@ (80051a8 <USB_EPStartXfer+0x52c>)
 80050c8:	400b      	ands	r3, r1
 80050ca:	69b9      	ldr	r1, [r7, #24]
 80050cc:	0148      	lsls	r0, r1, #5
 80050ce:	69f9      	ldr	r1, [r7, #28]
 80050d0:	4401      	add	r1, r0
 80050d2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80050d6:	4313      	orrs	r3, r2
 80050d8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	015a      	lsls	r2, r3, #5
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	4413      	add	r3, r2
 80050e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050e6:	691a      	ldr	r2, [r3, #16]
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	6a1b      	ldr	r3, [r3, #32]
 80050ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050f0:	69b9      	ldr	r1, [r7, #24]
 80050f2:	0148      	lsls	r0, r1, #5
 80050f4:	69f9      	ldr	r1, [r7, #28]
 80050f6:	4401      	add	r1, r0
 80050f8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80050fc:	4313      	orrs	r3, r2
 80050fe:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005100:	79fb      	ldrb	r3, [r7, #7]
 8005102:	2b01      	cmp	r3, #1
 8005104:	d10d      	bne.n	8005122 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d009      	beq.n	8005122 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	68d9      	ldr	r1, [r3, #12]
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	015a      	lsls	r2, r3, #5
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	4413      	add	r3, r2
 800511a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800511e:	460a      	mov	r2, r1
 8005120:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	791b      	ldrb	r3, [r3, #4]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d128      	bne.n	800517c <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005136:	2b00      	cmp	r3, #0
 8005138:	d110      	bne.n	800515c <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	015a      	lsls	r2, r3, #5
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	4413      	add	r3, r2
 8005142:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	69ba      	ldr	r2, [r7, #24]
 800514a:	0151      	lsls	r1, r2, #5
 800514c:	69fa      	ldr	r2, [r7, #28]
 800514e:	440a      	add	r2, r1
 8005150:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005154:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005158:	6013      	str	r3, [r2, #0]
 800515a:	e00f      	b.n	800517c <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	015a      	lsls	r2, r3, #5
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	4413      	add	r3, r2
 8005164:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	69ba      	ldr	r2, [r7, #24]
 800516c:	0151      	lsls	r1, r2, #5
 800516e:	69fa      	ldr	r2, [r7, #28]
 8005170:	440a      	add	r2, r1
 8005172:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005176:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800517a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	015a      	lsls	r2, r3, #5
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	4413      	add	r3, r2
 8005184:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	69ba      	ldr	r2, [r7, #24]
 800518c:	0151      	lsls	r1, r2, #5
 800518e:	69fa      	ldr	r2, [r7, #28]
 8005190:	440a      	add	r2, r1
 8005192:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005196:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800519a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3720      	adds	r7, #32
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	1ff80000 	.word	0x1ff80000

080051ac <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b087      	sub	sp, #28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80051b6:	2300      	movs	r3, #0
 80051b8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80051ba:	2300      	movs	r3, #0
 80051bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	785b      	ldrb	r3, [r3, #1]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d14a      	bne.n	8005260 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	015a      	lsls	r2, r3, #5
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	4413      	add	r3, r2
 80051d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80051de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051e2:	f040 8086 	bne.w	80052f2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	015a      	lsls	r2, r3, #5
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	683a      	ldr	r2, [r7, #0]
 80051f8:	7812      	ldrb	r2, [r2, #0]
 80051fa:	0151      	lsls	r1, r2, #5
 80051fc:	693a      	ldr	r2, [r7, #16]
 80051fe:	440a      	add	r2, r1
 8005200:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005204:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005208:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	015a      	lsls	r2, r3, #5
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	4413      	add	r3, r2
 8005214:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	683a      	ldr	r2, [r7, #0]
 800521c:	7812      	ldrb	r2, [r2, #0]
 800521e:	0151      	lsls	r1, r2, #5
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	440a      	add	r2, r1
 8005224:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005228:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800522c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	3301      	adds	r3, #1
 8005232:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f242 7210 	movw	r2, #10000	@ 0x2710
 800523a:	4293      	cmp	r3, r2
 800523c:	d902      	bls.n	8005244 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	75fb      	strb	r3, [r7, #23]
          break;
 8005242:	e056      	b.n	80052f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	015a      	lsls	r2, r3, #5
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	4413      	add	r3, r2
 800524e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005258:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800525c:	d0e7      	beq.n	800522e <USB_EPStopXfer+0x82>
 800525e:	e048      	b.n	80052f2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	015a      	lsls	r2, r3, #5
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	4413      	add	r3, r2
 800526a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005274:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005278:	d13b      	bne.n	80052f2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	015a      	lsls	r2, r3, #5
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	4413      	add	r3, r2
 8005284:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	683a      	ldr	r2, [r7, #0]
 800528c:	7812      	ldrb	r2, [r2, #0]
 800528e:	0151      	lsls	r1, r2, #5
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	440a      	add	r2, r1
 8005294:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005298:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800529c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	015a      	lsls	r2, r3, #5
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	4413      	add	r3, r2
 80052a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	683a      	ldr	r2, [r7, #0]
 80052b0:	7812      	ldrb	r2, [r2, #0]
 80052b2:	0151      	lsls	r1, r2, #5
 80052b4:	693a      	ldr	r2, [r7, #16]
 80052b6:	440a      	add	r2, r1
 80052b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80052c0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	3301      	adds	r3, #1
 80052c6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f242 7210 	movw	r2, #10000	@ 0x2710
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d902      	bls.n	80052d8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	75fb      	strb	r3, [r7, #23]
          break;
 80052d6:	e00c      	b.n	80052f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	015a      	lsls	r2, r3, #5
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	4413      	add	r3, r2
 80052e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80052ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052f0:	d0e7      	beq.n	80052c2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80052f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	371c      	adds	r7, #28
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005300:	b480      	push	{r7}
 8005302:	b089      	sub	sp, #36	@ 0x24
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	4611      	mov	r1, r2
 800530c:	461a      	mov	r2, r3
 800530e:	460b      	mov	r3, r1
 8005310:	71fb      	strb	r3, [r7, #7]
 8005312:	4613      	mov	r3, r2
 8005314:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800531e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005322:	2b00      	cmp	r3, #0
 8005324:	d123      	bne.n	800536e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005326:	88bb      	ldrh	r3, [r7, #4]
 8005328:	3303      	adds	r3, #3
 800532a:	089b      	lsrs	r3, r3, #2
 800532c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800532e:	2300      	movs	r3, #0
 8005330:	61bb      	str	r3, [r7, #24]
 8005332:	e018      	b.n	8005366 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005334:	79fb      	ldrb	r3, [r7, #7]
 8005336:	031a      	lsls	r2, r3, #12
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	4413      	add	r3, r2
 800533c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005340:	461a      	mov	r2, r3
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	3301      	adds	r3, #1
 800534c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	3301      	adds	r3, #1
 8005352:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	3301      	adds	r3, #1
 8005358:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	3301      	adds	r3, #1
 800535e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	3301      	adds	r3, #1
 8005364:	61bb      	str	r3, [r7, #24]
 8005366:	69ba      	ldr	r2, [r7, #24]
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	429a      	cmp	r2, r3
 800536c:	d3e2      	bcc.n	8005334 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3724      	adds	r7, #36	@ 0x24
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800537c:	b480      	push	{r7}
 800537e:	b08b      	sub	sp, #44	@ 0x2c
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	4613      	mov	r3, r2
 8005388:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005392:	88fb      	ldrh	r3, [r7, #6]
 8005394:	089b      	lsrs	r3, r3, #2
 8005396:	b29b      	uxth	r3, r3
 8005398:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800539a:	88fb      	ldrh	r3, [r7, #6]
 800539c:	f003 0303 	and.w	r3, r3, #3
 80053a0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80053a2:	2300      	movs	r3, #0
 80053a4:	623b      	str	r3, [r7, #32]
 80053a6:	e014      	b.n	80053d2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b2:	601a      	str	r2, [r3, #0]
    pDest++;
 80053b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b6:	3301      	adds	r3, #1
 80053b8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80053ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053bc:	3301      	adds	r3, #1
 80053be:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80053c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c2:	3301      	adds	r3, #1
 80053c4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80053c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c8:	3301      	adds	r3, #1
 80053ca:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80053cc:	6a3b      	ldr	r3, [r7, #32]
 80053ce:	3301      	adds	r3, #1
 80053d0:	623b      	str	r3, [r7, #32]
 80053d2:	6a3a      	ldr	r2, [r7, #32]
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d3e6      	bcc.n	80053a8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80053da:	8bfb      	ldrh	r3, [r7, #30]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d01e      	beq.n	800541e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80053e0:	2300      	movs	r3, #0
 80053e2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053ea:	461a      	mov	r2, r3
 80053ec:	f107 0310 	add.w	r3, r7, #16
 80053f0:	6812      	ldr	r2, [r2, #0]
 80053f2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	6a3b      	ldr	r3, [r7, #32]
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	00db      	lsls	r3, r3, #3
 80053fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005400:	b2da      	uxtb	r2, r3
 8005402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005404:	701a      	strb	r2, [r3, #0]
      i++;
 8005406:	6a3b      	ldr	r3, [r7, #32]
 8005408:	3301      	adds	r3, #1
 800540a:	623b      	str	r3, [r7, #32]
      pDest++;
 800540c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540e:	3301      	adds	r3, #1
 8005410:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005412:	8bfb      	ldrh	r3, [r7, #30]
 8005414:	3b01      	subs	r3, #1
 8005416:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005418:	8bfb      	ldrh	r3, [r7, #30]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1ea      	bne.n	80053f4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800541e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005420:	4618      	mov	r0, r3
 8005422:	372c      	adds	r7, #44	@ 0x2c
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800542c:	b480      	push	{r7}
 800542e:	b085      	sub	sp, #20
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	785b      	ldrb	r3, [r3, #1]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d12c      	bne.n	80054a2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	015a      	lsls	r2, r3, #5
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	4413      	add	r3, r2
 8005450:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	db12      	blt.n	8005480 <USB_EPSetStall+0x54>
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00f      	beq.n	8005480 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	015a      	lsls	r2, r3, #5
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	4413      	add	r3, r2
 8005468:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	0151      	lsls	r1, r2, #5
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	440a      	add	r2, r1
 8005476:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800547a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800547e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	015a      	lsls	r2, r3, #5
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	4413      	add	r3, r2
 8005488:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68ba      	ldr	r2, [r7, #8]
 8005490:	0151      	lsls	r1, r2, #5
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	440a      	add	r2, r1
 8005496:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800549a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800549e:	6013      	str	r3, [r2, #0]
 80054a0:	e02b      	b.n	80054fa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	015a      	lsls	r2, r3, #5
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	4413      	add	r3, r2
 80054aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	db12      	blt.n	80054da <USB_EPSetStall+0xae>
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d00f      	beq.n	80054da <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	015a      	lsls	r2, r3, #5
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	4413      	add	r3, r2
 80054c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	0151      	lsls	r1, r2, #5
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	440a      	add	r2, r1
 80054d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054d4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80054d8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	015a      	lsls	r2, r3, #5
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	4413      	add	r3, r2
 80054e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	0151      	lsls	r1, r2, #5
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	440a      	add	r2, r1
 80054f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80054f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3714      	adds	r7, #20
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	785b      	ldrb	r3, [r3, #1]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d128      	bne.n	8005576 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	015a      	lsls	r2, r3, #5
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	4413      	add	r3, r2
 800552c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68ba      	ldr	r2, [r7, #8]
 8005534:	0151      	lsls	r1, r2, #5
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	440a      	add	r2, r1
 800553a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800553e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005542:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	791b      	ldrb	r3, [r3, #4]
 8005548:	2b03      	cmp	r3, #3
 800554a:	d003      	beq.n	8005554 <USB_EPClearStall+0x4c>
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	791b      	ldrb	r3, [r3, #4]
 8005550:	2b02      	cmp	r3, #2
 8005552:	d138      	bne.n	80055c6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	015a      	lsls	r2, r3, #5
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	4413      	add	r3, r2
 800555c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68ba      	ldr	r2, [r7, #8]
 8005564:	0151      	lsls	r1, r2, #5
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	440a      	add	r2, r1
 800556a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800556e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005572:	6013      	str	r3, [r2, #0]
 8005574:	e027      	b.n	80055c6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	015a      	lsls	r2, r3, #5
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	4413      	add	r3, r2
 800557e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	0151      	lsls	r1, r2, #5
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	440a      	add	r2, r1
 800558c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005590:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005594:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	791b      	ldrb	r3, [r3, #4]
 800559a:	2b03      	cmp	r3, #3
 800559c:	d003      	beq.n	80055a6 <USB_EPClearStall+0x9e>
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	791b      	ldrb	r3, [r3, #4]
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d10f      	bne.n	80055c6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	0151      	lsls	r1, r2, #5
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	440a      	add	r2, r1
 80055bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055c4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3714      	adds	r7, #20
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	460b      	mov	r3, r1
 80055de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055f2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80055f6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	78fb      	ldrb	r3, [r7, #3]
 8005602:	011b      	lsls	r3, r3, #4
 8005604:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005608:	68f9      	ldr	r1, [r7, #12]
 800560a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800560e:	4313      	orrs	r3, r2
 8005610:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3714      	adds	r7, #20
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800563a:	f023 0303 	bic.w	r3, r3, #3
 800563e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800564e:	f023 0302 	bic.w	r3, r3, #2
 8005652:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3714      	adds	r7, #20
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr

08005662 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005662:	b480      	push	{r7}
 8005664:	b085      	sub	sp, #20
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800567c:	f023 0303 	bic.w	r3, r3, #3
 8005680:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005690:	f043 0302 	orr.w	r3, r3, #2
 8005694:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3714      	adds	r7, #20
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	4013      	ands	r3, r2
 80056ba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80056bc:	68fb      	ldr	r3, [r7, #12]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3714      	adds	r7, #20
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr

080056ca <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b085      	sub	sp, #20
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056e6:	69db      	ldr	r3, [r3, #28]
 80056e8:	68ba      	ldr	r2, [r7, #8]
 80056ea:	4013      	ands	r3, r2
 80056ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	0c1b      	lsrs	r3, r3, #16
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3714      	adds	r7, #20
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr

080056fe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80056fe:	b480      	push	{r7}
 8005700:	b085      	sub	sp, #20
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800571a:	69db      	ldr	r3, [r3, #28]
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	4013      	ands	r3, r2
 8005720:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	b29b      	uxth	r3, r3
}
 8005726:	4618      	mov	r0, r3
 8005728:	3714      	adds	r7, #20
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005732:	b480      	push	{r7}
 8005734:	b085      	sub	sp, #20
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
 800573a:	460b      	mov	r3, r1
 800573c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005742:	78fb      	ldrb	r3, [r7, #3]
 8005744:	015a      	lsls	r2, r3, #5
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	4413      	add	r3, r2
 800574a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	68ba      	ldr	r2, [r7, #8]
 800575c:	4013      	ands	r3, r2
 800575e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005760:	68bb      	ldr	r3, [r7, #8]
}
 8005762:	4618      	mov	r0, r3
 8005764:	3714      	adds	r7, #20
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr

0800576e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800576e:	b480      	push	{r7}
 8005770:	b087      	sub	sp, #28
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
 8005776:	460b      	mov	r3, r1
 8005778:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800578e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005790:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005792:	78fb      	ldrb	r3, [r7, #3]
 8005794:	f003 030f 	and.w	r3, r3, #15
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	fa22 f303 	lsr.w	r3, r2, r3
 800579e:	01db      	lsls	r3, r3, #7
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80057a8:	78fb      	ldrb	r3, [r7, #3]
 80057aa:	015a      	lsls	r2, r3, #5
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	4413      	add	r3, r2
 80057b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	4013      	ands	r3, r2
 80057ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80057bc:	68bb      	ldr	r3, [r7, #8]
}
 80057be:	4618      	mov	r0, r3
 80057c0:	371c      	adds	r7, #28
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr

080057ca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80057ca:	b480      	push	{r7}
 80057cc:	b083      	sub	sp, #12
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	f003 0301 	and.w	r3, r3, #1
}
 80057da:	4618      	mov	r0, r3
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr

080057e6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80057e6:	b480      	push	{r7}
 80057e8:	b085      	sub	sp, #20
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005800:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005804:	f023 0307 	bic.w	r3, r3, #7
 8005808:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005818:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800581c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3714      	adds	r7, #20
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800582c:	b480      	push	{r7}
 800582e:	b087      	sub	sp, #28
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	460b      	mov	r3, r1
 8005836:	607a      	str	r2, [r7, #4]
 8005838:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	333c      	adds	r3, #60	@ 0x3c
 8005842:	3304      	adds	r3, #4
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	4a26      	ldr	r2, [pc, #152]	@ (80058e4 <USB_EP0_OutStart+0xb8>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d90a      	bls.n	8005866 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800585c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005860:	d101      	bne.n	8005866 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005862:	2300      	movs	r3, #0
 8005864:	e037      	b.n	80058d6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800586c:	461a      	mov	r2, r3
 800586e:	2300      	movs	r3, #0
 8005870:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005880:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005884:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005894:	f043 0318 	orr.w	r3, r3, #24
 8005898:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058a8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80058ac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80058ae:	7afb      	ldrb	r3, [r7, #11]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d10f      	bne.n	80058d4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058ba:	461a      	mov	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	697a      	ldr	r2, [r7, #20]
 80058ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058ce:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80058d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	371c      	adds	r7, #28
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop
 80058e4:	4f54300a 	.word	0x4f54300a

080058e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058f0:	2300      	movs	r3, #0
 80058f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	3301      	adds	r3, #1
 80058f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005900:	d901      	bls.n	8005906 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e01b      	b.n	800593e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	2b00      	cmp	r3, #0
 800590c:	daf2      	bge.n	80058f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800590e:	2300      	movs	r3, #0
 8005910:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	f043 0201 	orr.w	r2, r3, #1
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	3301      	adds	r3, #1
 8005922:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800592a:	d901      	bls.n	8005930 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e006      	b.n	800593e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	f003 0301 	and.w	r3, r3, #1
 8005938:	2b01      	cmp	r3, #1
 800593a:	d0f0      	beq.n	800591e <USB_CoreReset+0x36>

  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3714      	adds	r7, #20
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
	...

0800594c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	460b      	mov	r3, r1
 8005956:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005958:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800595c:	f002 fc22 	bl	80081a4 <USBD_static_malloc>
 8005960:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d109      	bne.n	800597c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	32b0      	adds	r2, #176	@ 0xb0
 8005972:	2100      	movs	r1, #0
 8005974:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005978:	2302      	movs	r3, #2
 800597a:	e0d4      	b.n	8005b26 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800597c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005980:	2100      	movs	r1, #0
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	f002 fc52 	bl	800822c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	32b0      	adds	r2, #176	@ 0xb0
 8005992:	68f9      	ldr	r1, [r7, #12]
 8005994:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	32b0      	adds	r2, #176	@ 0xb0
 80059a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	7c1b      	ldrb	r3, [r3, #16]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d138      	bne.n	8005a26 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80059b4:	4b5e      	ldr	r3, [pc, #376]	@ (8005b30 <USBD_CDC_Init+0x1e4>)
 80059b6:	7819      	ldrb	r1, [r3, #0]
 80059b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80059bc:	2202      	movs	r2, #2
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f002 facd 	bl	8007f5e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80059c4:	4b5a      	ldr	r3, [pc, #360]	@ (8005b30 <USBD_CDC_Init+0x1e4>)
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	f003 020f 	and.w	r2, r3, #15
 80059cc:	6879      	ldr	r1, [r7, #4]
 80059ce:	4613      	mov	r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	4413      	add	r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	440b      	add	r3, r1
 80059d8:	3324      	adds	r3, #36	@ 0x24
 80059da:	2201      	movs	r2, #1
 80059dc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80059de:	4b55      	ldr	r3, [pc, #340]	@ (8005b34 <USBD_CDC_Init+0x1e8>)
 80059e0:	7819      	ldrb	r1, [r3, #0]
 80059e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80059e6:	2202      	movs	r2, #2
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f002 fab8 	bl	8007f5e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80059ee:	4b51      	ldr	r3, [pc, #324]	@ (8005b34 <USBD_CDC_Init+0x1e8>)
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	f003 020f 	and.w	r2, r3, #15
 80059f6:	6879      	ldr	r1, [r7, #4]
 80059f8:	4613      	mov	r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	4413      	add	r3, r2
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	440b      	add	r3, r1
 8005a02:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005a06:	2201      	movs	r2, #1
 8005a08:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005a0a:	4b4b      	ldr	r3, [pc, #300]	@ (8005b38 <USBD_CDC_Init+0x1ec>)
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	f003 020f 	and.w	r2, r3, #15
 8005a12:	6879      	ldr	r1, [r7, #4]
 8005a14:	4613      	mov	r3, r2
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	4413      	add	r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	440b      	add	r3, r1
 8005a1e:	3326      	adds	r3, #38	@ 0x26
 8005a20:	2210      	movs	r2, #16
 8005a22:	801a      	strh	r2, [r3, #0]
 8005a24:	e035      	b.n	8005a92 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005a26:	4b42      	ldr	r3, [pc, #264]	@ (8005b30 <USBD_CDC_Init+0x1e4>)
 8005a28:	7819      	ldrb	r1, [r3, #0]
 8005a2a:	2340      	movs	r3, #64	@ 0x40
 8005a2c:	2202      	movs	r2, #2
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f002 fa95 	bl	8007f5e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005a34:	4b3e      	ldr	r3, [pc, #248]	@ (8005b30 <USBD_CDC_Init+0x1e4>)
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	f003 020f 	and.w	r2, r3, #15
 8005a3c:	6879      	ldr	r1, [r7, #4]
 8005a3e:	4613      	mov	r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4413      	add	r3, r2
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	440b      	add	r3, r1
 8005a48:	3324      	adds	r3, #36	@ 0x24
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005a4e:	4b39      	ldr	r3, [pc, #228]	@ (8005b34 <USBD_CDC_Init+0x1e8>)
 8005a50:	7819      	ldrb	r1, [r3, #0]
 8005a52:	2340      	movs	r3, #64	@ 0x40
 8005a54:	2202      	movs	r2, #2
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f002 fa81 	bl	8007f5e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005a5c:	4b35      	ldr	r3, [pc, #212]	@ (8005b34 <USBD_CDC_Init+0x1e8>)
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	f003 020f 	and.w	r2, r3, #15
 8005a64:	6879      	ldr	r1, [r7, #4]
 8005a66:	4613      	mov	r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	4413      	add	r3, r2
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	440b      	add	r3, r1
 8005a70:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005a74:	2201      	movs	r2, #1
 8005a76:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005a78:	4b2f      	ldr	r3, [pc, #188]	@ (8005b38 <USBD_CDC_Init+0x1ec>)
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	f003 020f 	and.w	r2, r3, #15
 8005a80:	6879      	ldr	r1, [r7, #4]
 8005a82:	4613      	mov	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	440b      	add	r3, r1
 8005a8c:	3326      	adds	r3, #38	@ 0x26
 8005a8e:	2210      	movs	r2, #16
 8005a90:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005a92:	4b29      	ldr	r3, [pc, #164]	@ (8005b38 <USBD_CDC_Init+0x1ec>)
 8005a94:	7819      	ldrb	r1, [r3, #0]
 8005a96:	2308      	movs	r3, #8
 8005a98:	2203      	movs	r2, #3
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f002 fa5f 	bl	8007f5e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005aa0:	4b25      	ldr	r3, [pc, #148]	@ (8005b38 <USBD_CDC_Init+0x1ec>)
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	f003 020f 	and.w	r2, r3, #15
 8005aa8:	6879      	ldr	r1, [r7, #4]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	4413      	add	r3, r2
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	440b      	add	r3, r1
 8005ab4:	3324      	adds	r3, #36	@ 0x24
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	33b0      	adds	r3, #176	@ 0xb0
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	4413      	add	r3, r2
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d101      	bne.n	8005af4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005af0:	2302      	movs	r3, #2
 8005af2:	e018      	b.n	8005b26 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	7c1b      	ldrb	r3, [r3, #16]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d10a      	bne.n	8005b12 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005afc:	4b0d      	ldr	r3, [pc, #52]	@ (8005b34 <USBD_CDC_Init+0x1e8>)
 8005afe:	7819      	ldrb	r1, [r3, #0]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005b06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f002 fb16 	bl	800813c <USBD_LL_PrepareReceive>
 8005b10:	e008      	b.n	8005b24 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005b12:	4b08      	ldr	r3, [pc, #32]	@ (8005b34 <USBD_CDC_Init+0x1e8>)
 8005b14:	7819      	ldrb	r1, [r3, #0]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005b1c:	2340      	movs	r3, #64	@ 0x40
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f002 fb0c 	bl	800813c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	20000093 	.word	0x20000093
 8005b34:	20000094 	.word	0x20000094
 8005b38:	20000095 	.word	0x20000095

08005b3c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	460b      	mov	r3, r1
 8005b46:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005b48:	4b3a      	ldr	r3, [pc, #232]	@ (8005c34 <USBD_CDC_DeInit+0xf8>)
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f002 fa2b 	bl	8007faa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005b54:	4b37      	ldr	r3, [pc, #220]	@ (8005c34 <USBD_CDC_DeInit+0xf8>)
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	f003 020f 	and.w	r2, r3, #15
 8005b5c:	6879      	ldr	r1, [r7, #4]
 8005b5e:	4613      	mov	r3, r2
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	4413      	add	r3, r2
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	440b      	add	r3, r1
 8005b68:	3324      	adds	r3, #36	@ 0x24
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005b6e:	4b32      	ldr	r3, [pc, #200]	@ (8005c38 <USBD_CDC_DeInit+0xfc>)
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	4619      	mov	r1, r3
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f002 fa18 	bl	8007faa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005b7a:	4b2f      	ldr	r3, [pc, #188]	@ (8005c38 <USBD_CDC_DeInit+0xfc>)
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	f003 020f 	and.w	r2, r3, #15
 8005b82:	6879      	ldr	r1, [r7, #4]
 8005b84:	4613      	mov	r3, r2
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	4413      	add	r3, r2
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	440b      	add	r3, r1
 8005b8e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005b92:	2200      	movs	r2, #0
 8005b94:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005b96:	4b29      	ldr	r3, [pc, #164]	@ (8005c3c <USBD_CDC_DeInit+0x100>)
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f002 fa04 	bl	8007faa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005ba2:	4b26      	ldr	r3, [pc, #152]	@ (8005c3c <USBD_CDC_DeInit+0x100>)
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	f003 020f 	and.w	r2, r3, #15
 8005baa:	6879      	ldr	r1, [r7, #4]
 8005bac:	4613      	mov	r3, r2
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	4413      	add	r3, r2
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	440b      	add	r3, r1
 8005bb6:	3324      	adds	r3, #36	@ 0x24
 8005bb8:	2200      	movs	r2, #0
 8005bba:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005bbc:	4b1f      	ldr	r3, [pc, #124]	@ (8005c3c <USBD_CDC_DeInit+0x100>)
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	f003 020f 	and.w	r2, r3, #15
 8005bc4:	6879      	ldr	r1, [r7, #4]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	4413      	add	r3, r2
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	440b      	add	r3, r1
 8005bd0:	3326      	adds	r3, #38	@ 0x26
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	32b0      	adds	r2, #176	@ 0xb0
 8005be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d01f      	beq.n	8005c28 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	33b0      	adds	r3, #176	@ 0xb0
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	4413      	add	r3, r2
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	32b0      	adds	r2, #176	@ 0xb0
 8005c06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f002 fad8 	bl	80081c0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	32b0      	adds	r2, #176	@ 0xb0
 8005c1a:	2100      	movs	r1, #0
 8005c1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3708      	adds	r7, #8
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	20000093 	.word	0x20000093
 8005c38:	20000094 	.word	0x20000094
 8005c3c:	20000095 	.word	0x20000095

08005c40 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b086      	sub	sp, #24
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	32b0      	adds	r2, #176	@ 0xb0
 8005c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c58:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c62:	2300      	movs	r3, #0
 8005c64:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d101      	bne.n	8005c70 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e0bf      	b.n	8005df0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d050      	beq.n	8005d1e <USBD_CDC_Setup+0xde>
 8005c7c:	2b20      	cmp	r3, #32
 8005c7e:	f040 80af 	bne.w	8005de0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	88db      	ldrh	r3, [r3, #6]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d03a      	beq.n	8005d00 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	b25b      	sxtb	r3, r3
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	da1b      	bge.n	8005ccc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	33b0      	adds	r3, #176	@ 0xb0
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	4413      	add	r3, r2
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	683a      	ldr	r2, [r7, #0]
 8005ca8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005caa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005cac:	683a      	ldr	r2, [r7, #0]
 8005cae:	88d2      	ldrh	r2, [r2, #6]
 8005cb0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	88db      	ldrh	r3, [r3, #6]
 8005cb6:	2b07      	cmp	r3, #7
 8005cb8:	bf28      	it	cs
 8005cba:	2307      	movcs	r3, #7
 8005cbc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	89fa      	ldrh	r2, [r7, #14]
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f001 fd47 	bl	8007758 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005cca:	e090      	b.n	8005dee <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	785a      	ldrb	r2, [r3, #1]
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	88db      	ldrh	r3, [r3, #6]
 8005cda:	2b3f      	cmp	r3, #63	@ 0x3f
 8005cdc:	d803      	bhi.n	8005ce6 <USBD_CDC_Setup+0xa6>
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	88db      	ldrh	r3, [r3, #6]
 8005ce2:	b2da      	uxtb	r2, r3
 8005ce4:	e000      	b.n	8005ce8 <USBD_CDC_Setup+0xa8>
 8005ce6:	2240      	movs	r2, #64	@ 0x40
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005cee:	6939      	ldr	r1, [r7, #16]
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f001 fd59 	bl	80077b0 <USBD_CtlPrepareRx>
      break;
 8005cfe:	e076      	b.n	8005dee <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	33b0      	adds	r3, #176	@ 0xb0
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	4413      	add	r3, r2
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	683a      	ldr	r2, [r7, #0]
 8005d14:	7850      	ldrb	r0, [r2, #1]
 8005d16:	2200      	movs	r2, #0
 8005d18:	6839      	ldr	r1, [r7, #0]
 8005d1a:	4798      	blx	r3
      break;
 8005d1c:	e067      	b.n	8005dee <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	785b      	ldrb	r3, [r3, #1]
 8005d22:	2b0b      	cmp	r3, #11
 8005d24:	d851      	bhi.n	8005dca <USBD_CDC_Setup+0x18a>
 8005d26:	a201      	add	r2, pc, #4	@ (adr r2, 8005d2c <USBD_CDC_Setup+0xec>)
 8005d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d2c:	08005d5d 	.word	0x08005d5d
 8005d30:	08005dd9 	.word	0x08005dd9
 8005d34:	08005dcb 	.word	0x08005dcb
 8005d38:	08005dcb 	.word	0x08005dcb
 8005d3c:	08005dcb 	.word	0x08005dcb
 8005d40:	08005dcb 	.word	0x08005dcb
 8005d44:	08005dcb 	.word	0x08005dcb
 8005d48:	08005dcb 	.word	0x08005dcb
 8005d4c:	08005dcb 	.word	0x08005dcb
 8005d50:	08005dcb 	.word	0x08005dcb
 8005d54:	08005d87 	.word	0x08005d87
 8005d58:	08005db1 	.word	0x08005db1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	2b03      	cmp	r3, #3
 8005d66:	d107      	bne.n	8005d78 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005d68:	f107 030a 	add.w	r3, r7, #10
 8005d6c:	2202      	movs	r2, #2
 8005d6e:	4619      	mov	r1, r3
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f001 fcf1 	bl	8007758 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d76:	e032      	b.n	8005dde <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005d78:	6839      	ldr	r1, [r7, #0]
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f001 fc7b 	bl	8007676 <USBD_CtlError>
            ret = USBD_FAIL;
 8005d80:	2303      	movs	r3, #3
 8005d82:	75fb      	strb	r3, [r7, #23]
          break;
 8005d84:	e02b      	b.n	8005dde <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	2b03      	cmp	r3, #3
 8005d90:	d107      	bne.n	8005da2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005d92:	f107 030d 	add.w	r3, r7, #13
 8005d96:	2201      	movs	r2, #1
 8005d98:	4619      	mov	r1, r3
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f001 fcdc 	bl	8007758 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005da0:	e01d      	b.n	8005dde <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005da2:	6839      	ldr	r1, [r7, #0]
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f001 fc66 	bl	8007676 <USBD_CtlError>
            ret = USBD_FAIL;
 8005daa:	2303      	movs	r3, #3
 8005dac:	75fb      	strb	r3, [r7, #23]
          break;
 8005dae:	e016      	b.n	8005dde <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	2b03      	cmp	r3, #3
 8005dba:	d00f      	beq.n	8005ddc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005dbc:	6839      	ldr	r1, [r7, #0]
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f001 fc59 	bl	8007676 <USBD_CtlError>
            ret = USBD_FAIL;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005dc8:	e008      	b.n	8005ddc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005dca:	6839      	ldr	r1, [r7, #0]
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f001 fc52 	bl	8007676 <USBD_CtlError>
          ret = USBD_FAIL;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	75fb      	strb	r3, [r7, #23]
          break;
 8005dd6:	e002      	b.n	8005dde <USBD_CDC_Setup+0x19e>
          break;
 8005dd8:	bf00      	nop
 8005dda:	e008      	b.n	8005dee <USBD_CDC_Setup+0x1ae>
          break;
 8005ddc:	bf00      	nop
      }
      break;
 8005dde:	e006      	b.n	8005dee <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005de0:	6839      	ldr	r1, [r7, #0]
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f001 fc47 	bl	8007676 <USBD_CtlError>
      ret = USBD_FAIL;
 8005de8:	2303      	movs	r3, #3
 8005dea:	75fb      	strb	r3, [r7, #23]
      break;
 8005dec:	bf00      	nop
  }

  return (uint8_t)ret;
 8005dee:	7dfb      	ldrb	r3, [r7, #23]
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3718      	adds	r7, #24
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	460b      	mov	r3, r1
 8005e02:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8005e0a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	32b0      	adds	r2, #176	@ 0xb0
 8005e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d101      	bne.n	8005e22 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e065      	b.n	8005eee <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	32b0      	adds	r2, #176	@ 0xb0
 8005e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e30:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005e32:	78fb      	ldrb	r3, [r7, #3]
 8005e34:	f003 020f 	and.w	r2, r3, #15
 8005e38:	6879      	ldr	r1, [r7, #4]
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	4413      	add	r3, r2
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	440b      	add	r3, r1
 8005e44:	3318      	adds	r3, #24
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d02f      	beq.n	8005eac <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005e4c:	78fb      	ldrb	r3, [r7, #3]
 8005e4e:	f003 020f 	and.w	r2, r3, #15
 8005e52:	6879      	ldr	r1, [r7, #4]
 8005e54:	4613      	mov	r3, r2
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	4413      	add	r3, r2
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	440b      	add	r3, r1
 8005e5e:	3318      	adds	r3, #24
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	78fb      	ldrb	r3, [r7, #3]
 8005e64:	f003 010f 	and.w	r1, r3, #15
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	00db      	lsls	r3, r3, #3
 8005e6e:	440b      	add	r3, r1
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	4403      	add	r3, r0
 8005e74:	331c      	adds	r3, #28
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	fbb2 f1f3 	udiv	r1, r2, r3
 8005e7c:	fb01 f303 	mul.w	r3, r1, r3
 8005e80:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d112      	bne.n	8005eac <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005e86:	78fb      	ldrb	r3, [r7, #3]
 8005e88:	f003 020f 	and.w	r2, r3, #15
 8005e8c:	6879      	ldr	r1, [r7, #4]
 8005e8e:	4613      	mov	r3, r2
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	4413      	add	r3, r2
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	440b      	add	r3, r1
 8005e98:	3318      	adds	r3, #24
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005e9e:	78f9      	ldrb	r1, [r7, #3]
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f002 f928 	bl	80080fa <USBD_LL_Transmit>
 8005eaa:	e01f      	b.n	8005eec <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	33b0      	adds	r3, #176	@ 0xb0
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	4413      	add	r3, r2
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d010      	beq.n	8005eec <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	33b0      	adds	r3, #176	@ 0xb0
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	4413      	add	r3, r2
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	68ba      	ldr	r2, [r7, #8]
 8005ede:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005ee2:	68ba      	ldr	r2, [r7, #8]
 8005ee4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005ee8:	78fa      	ldrb	r2, [r7, #3]
 8005eea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	b084      	sub	sp, #16
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
 8005efe:	460b      	mov	r3, r1
 8005f00:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	32b0      	adds	r2, #176	@ 0xb0
 8005f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f10:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	32b0      	adds	r2, #176	@ 0xb0
 8005f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d101      	bne.n	8005f28 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005f24:	2303      	movs	r3, #3
 8005f26:	e01a      	b.n	8005f5e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005f28:	78fb      	ldrb	r3, [r7, #3]
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f002 f926 	bl	800817e <USBD_LL_GetRxDataSize>
 8005f32:	4602      	mov	r2, r0
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	33b0      	adds	r3, #176	@ 0xb0
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	4413      	add	r3, r2
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005f58:	4611      	mov	r1, r2
 8005f5a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3710      	adds	r7, #16
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b084      	sub	sp, #16
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	32b0      	adds	r2, #176	@ 0xb0
 8005f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f7c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d101      	bne.n	8005f88 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005f84:	2303      	movs	r3, #3
 8005f86:	e024      	b.n	8005fd2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	33b0      	adds	r3, #176	@ 0xb0
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	4413      	add	r3, r2
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d019      	beq.n	8005fd0 <USBD_CDC_EP0_RxReady+0x6a>
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005fa2:	2bff      	cmp	r3, #255	@ 0xff
 8005fa4:	d014      	beq.n	8005fd0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	33b0      	adds	r3, #176	@ 0xb0
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	4413      	add	r3, r2
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8005fbe:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005fc6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	22ff      	movs	r2, #255	@ 0xff
 8005fcc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3710      	adds	r7, #16
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
	...

08005fdc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b086      	sub	sp, #24
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005fe4:	2182      	movs	r1, #130	@ 0x82
 8005fe6:	4818      	ldr	r0, [pc, #96]	@ (8006048 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005fe8:	f000 fd0f 	bl	8006a0a <USBD_GetEpDesc>
 8005fec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005fee:	2101      	movs	r1, #1
 8005ff0:	4815      	ldr	r0, [pc, #84]	@ (8006048 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005ff2:	f000 fd0a 	bl	8006a0a <USBD_GetEpDesc>
 8005ff6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005ff8:	2181      	movs	r1, #129	@ 0x81
 8005ffa:	4813      	ldr	r0, [pc, #76]	@ (8006048 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005ffc:	f000 fd05 	bl	8006a0a <USBD_GetEpDesc>
 8006000:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d002      	beq.n	800600e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	2210      	movs	r2, #16
 800600c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d006      	beq.n	8006022 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	2200      	movs	r2, #0
 8006018:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800601c:	711a      	strb	r2, [r3, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d006      	beq.n	8006036 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2200      	movs	r2, #0
 800602c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006030:	711a      	strb	r2, [r3, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2243      	movs	r2, #67	@ 0x43
 800603a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800603c:	4b02      	ldr	r3, [pc, #8]	@ (8006048 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800603e:	4618      	mov	r0, r3
 8006040:	3718      	adds	r7, #24
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	20000050 	.word	0x20000050

0800604c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b086      	sub	sp, #24
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006054:	2182      	movs	r1, #130	@ 0x82
 8006056:	4818      	ldr	r0, [pc, #96]	@ (80060b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006058:	f000 fcd7 	bl	8006a0a <USBD_GetEpDesc>
 800605c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800605e:	2101      	movs	r1, #1
 8006060:	4815      	ldr	r0, [pc, #84]	@ (80060b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006062:	f000 fcd2 	bl	8006a0a <USBD_GetEpDesc>
 8006066:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006068:	2181      	movs	r1, #129	@ 0x81
 800606a:	4813      	ldr	r0, [pc, #76]	@ (80060b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800606c:	f000 fccd 	bl	8006a0a <USBD_GetEpDesc>
 8006070:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d002      	beq.n	800607e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	2210      	movs	r2, #16
 800607c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d006      	beq.n	8006092 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	2200      	movs	r2, #0
 8006088:	711a      	strb	r2, [r3, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	f042 0202 	orr.w	r2, r2, #2
 8006090:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d006      	beq.n	80060a6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2200      	movs	r2, #0
 800609c:	711a      	strb	r2, [r3, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	f042 0202 	orr.w	r2, r2, #2
 80060a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2243      	movs	r2, #67	@ 0x43
 80060aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80060ac:	4b02      	ldr	r3, [pc, #8]	@ (80060b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3718      	adds	r7, #24
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	20000050 	.word	0x20000050

080060bc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b086      	sub	sp, #24
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80060c4:	2182      	movs	r1, #130	@ 0x82
 80060c6:	4818      	ldr	r0, [pc, #96]	@ (8006128 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80060c8:	f000 fc9f 	bl	8006a0a <USBD_GetEpDesc>
 80060cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80060ce:	2101      	movs	r1, #1
 80060d0:	4815      	ldr	r0, [pc, #84]	@ (8006128 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80060d2:	f000 fc9a 	bl	8006a0a <USBD_GetEpDesc>
 80060d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80060d8:	2181      	movs	r1, #129	@ 0x81
 80060da:	4813      	ldr	r0, [pc, #76]	@ (8006128 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80060dc:	f000 fc95 	bl	8006a0a <USBD_GetEpDesc>
 80060e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d002      	beq.n	80060ee <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	2210      	movs	r2, #16
 80060ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d006      	beq.n	8006102 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80060fc:	711a      	strb	r2, [r3, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d006      	beq.n	8006116 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006110:	711a      	strb	r2, [r3, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2243      	movs	r2, #67	@ 0x43
 800611a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800611c:	4b02      	ldr	r3, [pc, #8]	@ (8006128 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800611e:	4618      	mov	r0, r3
 8006120:	3718      	adds	r7, #24
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	20000050 	.word	0x20000050

0800612c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	220a      	movs	r2, #10
 8006138:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800613a:	4b03      	ldr	r3, [pc, #12]	@ (8006148 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800613c:	4618      	mov	r0, r3
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr
 8006148:	2000000c 	.word	0x2000000c

0800614c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d101      	bne.n	8006160 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800615c:	2303      	movs	r3, #3
 800615e:	e009      	b.n	8006174 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	33b0      	adds	r3, #176	@ 0xb0
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	4413      	add	r3, r2
 800616e:	683a      	ldr	r2, [r7, #0]
 8006170:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006180:	b480      	push	{r7}
 8006182:	b087      	sub	sp, #28
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	32b0      	adds	r2, #176	@ 0xb0
 8006196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800619a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d101      	bne.n	80061a6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e008      	b.n	80061b8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	68ba      	ldr	r2, [r7, #8]
 80061aa:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	371c      	adds	r7, #28
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	32b0      	adds	r2, #176	@ 0xb0
 80061d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061dc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d101      	bne.n	80061e8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80061e4:	2303      	movs	r3, #3
 80061e6:	e004      	b.n	80061f2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	683a      	ldr	r2, [r7, #0]
 80061ec:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3714      	adds	r7, #20
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
	...

08006200 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	32b0      	adds	r2, #176	@ 0xb0
 8006212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006216:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	32b0      	adds	r2, #176	@ 0xb0
 8006222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d101      	bne.n	800622e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800622a:	2303      	movs	r3, #3
 800622c:	e018      	b.n	8006260 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	7c1b      	ldrb	r3, [r3, #16]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d10a      	bne.n	800624c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006236:	4b0c      	ldr	r3, [pc, #48]	@ (8006268 <USBD_CDC_ReceivePacket+0x68>)
 8006238:	7819      	ldrb	r1, [r3, #0]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006240:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f001 ff79 	bl	800813c <USBD_LL_PrepareReceive>
 800624a:	e008      	b.n	800625e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800624c:	4b06      	ldr	r3, [pc, #24]	@ (8006268 <USBD_CDC_ReceivePacket+0x68>)
 800624e:	7819      	ldrb	r1, [r3, #0]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006256:	2340      	movs	r3, #64	@ 0x40
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f001 ff6f 	bl	800813c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	3710      	adds	r7, #16
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	20000094 	.word	0x20000094

0800626c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b086      	sub	sp, #24
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	4613      	mov	r3, r2
 8006278:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d101      	bne.n	8006284 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006280:	2303      	movs	r3, #3
 8006282:	e01f      	b.n	80062c4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2200      	movs	r2, #0
 8006298:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d003      	beq.n	80062aa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	68ba      	ldr	r2, [r7, #8]
 80062a6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2201      	movs	r2, #1
 80062ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	79fa      	ldrb	r2, [r7, #7]
 80062b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	f001 fde9 	bl	8007e90 <USBD_LL_Init>
 80062be:	4603      	mov	r3, r0
 80062c0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80062c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3718      	adds	r7, #24
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80062d6:	2300      	movs	r3, #0
 80062d8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d101      	bne.n	80062e4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80062e0:	2303      	movs	r3, #3
 80062e2:	e025      	b.n	8006330 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	683a      	ldr	r2, [r7, #0]
 80062e8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	32ae      	adds	r2, #174	@ 0xae
 80062f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00f      	beq.n	8006320 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	32ae      	adds	r2, #174	@ 0xae
 800630a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800630e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006310:	f107 020e 	add.w	r2, r7, #14
 8006314:	4610      	mov	r0, r2
 8006316:	4798      	blx	r3
 8006318:	4602      	mov	r2, r0
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006326:	1c5a      	adds	r2, r3, #1
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800632e:	2300      	movs	r3, #0
}
 8006330:	4618      	mov	r0, r3
 8006332:	3710      	adds	r7, #16
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f001 fdf1 	bl	8007f28 <USBD_LL_Start>
 8006346:	4603      	mov	r3, r0
}
 8006348:	4618      	mov	r0, r3
 800634a:	3708      	adds	r7, #8
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006358:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800635a:	4618      	mov	r0, r3
 800635c:	370c      	adds	r7, #12
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006366:	b580      	push	{r7, lr}
 8006368:	b084      	sub	sp, #16
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
 800636e:	460b      	mov	r3, r1
 8006370:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006372:	2300      	movs	r3, #0
 8006374:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800637c:	2b00      	cmp	r3, #0
 800637e:	d009      	beq.n	8006394 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	78fa      	ldrb	r2, [r7, #3]
 800638a:	4611      	mov	r1, r2
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	4798      	blx	r3
 8006390:	4603      	mov	r3, r0
 8006392:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006394:	7bfb      	ldrb	r3, [r7, #15]
}
 8006396:	4618      	mov	r0, r3
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b084      	sub	sp, #16
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
 80063a6:	460b      	mov	r3, r1
 80063a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80063aa:	2300      	movs	r3, #0
 80063ac:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	78fa      	ldrb	r2, [r7, #3]
 80063b8:	4611      	mov	r1, r2
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	4798      	blx	r3
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d001      	beq.n	80063c8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80063c4:	2303      	movs	r3, #3
 80063c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80063c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3710      	adds	r7, #16
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80063d2:	b580      	push	{r7, lr}
 80063d4:	b084      	sub	sp, #16
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
 80063da:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80063e2:	6839      	ldr	r1, [r7, #0]
 80063e4:	4618      	mov	r0, r3
 80063e6:	f001 f90c 	bl	8007602 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2201      	movs	r2, #1
 80063ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80063f8:	461a      	mov	r2, r3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006406:	f003 031f 	and.w	r3, r3, #31
 800640a:	2b02      	cmp	r3, #2
 800640c:	d01a      	beq.n	8006444 <USBD_LL_SetupStage+0x72>
 800640e:	2b02      	cmp	r3, #2
 8006410:	d822      	bhi.n	8006458 <USBD_LL_SetupStage+0x86>
 8006412:	2b00      	cmp	r3, #0
 8006414:	d002      	beq.n	800641c <USBD_LL_SetupStage+0x4a>
 8006416:	2b01      	cmp	r3, #1
 8006418:	d00a      	beq.n	8006430 <USBD_LL_SetupStage+0x5e>
 800641a:	e01d      	b.n	8006458 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006422:	4619      	mov	r1, r3
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 fb63 	bl	8006af0 <USBD_StdDevReq>
 800642a:	4603      	mov	r3, r0
 800642c:	73fb      	strb	r3, [r7, #15]
      break;
 800642e:	e020      	b.n	8006472 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006436:	4619      	mov	r1, r3
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 fbcb 	bl	8006bd4 <USBD_StdItfReq>
 800643e:	4603      	mov	r3, r0
 8006440:	73fb      	strb	r3, [r7, #15]
      break;
 8006442:	e016      	b.n	8006472 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800644a:	4619      	mov	r1, r3
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 fc2d 	bl	8006cac <USBD_StdEPReq>
 8006452:	4603      	mov	r3, r0
 8006454:	73fb      	strb	r3, [r7, #15]
      break;
 8006456:	e00c      	b.n	8006472 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800645e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006462:	b2db      	uxtb	r3, r3
 8006464:	4619      	mov	r1, r3
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f001 fdbe 	bl	8007fe8 <USBD_LL_StallEP>
 800646c:	4603      	mov	r3, r0
 800646e:	73fb      	strb	r3, [r7, #15]
      break;
 8006470:	bf00      	nop
  }

  return ret;
 8006472:	7bfb      	ldrb	r3, [r7, #15]
}
 8006474:	4618      	mov	r0, r3
 8006476:	3710      	adds	r7, #16
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b086      	sub	sp, #24
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	460b      	mov	r3, r1
 8006486:	607a      	str	r2, [r7, #4]
 8006488:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800648a:	2300      	movs	r3, #0
 800648c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800648e:	7afb      	ldrb	r3, [r7, #11]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d16e      	bne.n	8006572 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800649a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80064a2:	2b03      	cmp	r3, #3
 80064a4:	f040 8098 	bne.w	80065d8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	689a      	ldr	r2, [r3, #8]
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d913      	bls.n	80064dc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	689a      	ldr	r2, [r3, #8]
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	1ad2      	subs	r2, r2, r3
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	68da      	ldr	r2, [r3, #12]
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	4293      	cmp	r3, r2
 80064cc:	bf28      	it	cs
 80064ce:	4613      	movcs	r3, r2
 80064d0:	461a      	mov	r2, r3
 80064d2:	6879      	ldr	r1, [r7, #4]
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f001 f988 	bl	80077ea <USBD_CtlContinueRx>
 80064da:	e07d      	b.n	80065d8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80064e2:	f003 031f 	and.w	r3, r3, #31
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d014      	beq.n	8006514 <USBD_LL_DataOutStage+0x98>
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d81d      	bhi.n	800652a <USBD_LL_DataOutStage+0xae>
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d002      	beq.n	80064f8 <USBD_LL_DataOutStage+0x7c>
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d003      	beq.n	80064fe <USBD_LL_DataOutStage+0x82>
 80064f6:	e018      	b.n	800652a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80064f8:	2300      	movs	r3, #0
 80064fa:	75bb      	strb	r3, [r7, #22]
            break;
 80064fc:	e018      	b.n	8006530 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006504:	b2db      	uxtb	r3, r3
 8006506:	4619      	mov	r1, r3
 8006508:	68f8      	ldr	r0, [r7, #12]
 800650a:	f000 fa64 	bl	80069d6 <USBD_CoreFindIF>
 800650e:	4603      	mov	r3, r0
 8006510:	75bb      	strb	r3, [r7, #22]
            break;
 8006512:	e00d      	b.n	8006530 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800651a:	b2db      	uxtb	r3, r3
 800651c:	4619      	mov	r1, r3
 800651e:	68f8      	ldr	r0, [r7, #12]
 8006520:	f000 fa66 	bl	80069f0 <USBD_CoreFindEP>
 8006524:	4603      	mov	r3, r0
 8006526:	75bb      	strb	r3, [r7, #22]
            break;
 8006528:	e002      	b.n	8006530 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800652a:	2300      	movs	r3, #0
 800652c:	75bb      	strb	r3, [r7, #22]
            break;
 800652e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006530:	7dbb      	ldrb	r3, [r7, #22]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d119      	bne.n	800656a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800653c:	b2db      	uxtb	r3, r3
 800653e:	2b03      	cmp	r3, #3
 8006540:	d113      	bne.n	800656a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006542:	7dba      	ldrb	r2, [r7, #22]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	32ae      	adds	r2, #174	@ 0xae
 8006548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00b      	beq.n	800656a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006552:	7dba      	ldrb	r2, [r7, #22]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800655a:	7dba      	ldrb	r2, [r7, #22]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	32ae      	adds	r2, #174	@ 0xae
 8006560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800656a:	68f8      	ldr	r0, [r7, #12]
 800656c:	f001 f94e 	bl	800780c <USBD_CtlSendStatus>
 8006570:	e032      	b.n	80065d8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006572:	7afb      	ldrb	r3, [r7, #11]
 8006574:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006578:	b2db      	uxtb	r3, r3
 800657a:	4619      	mov	r1, r3
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f000 fa37 	bl	80069f0 <USBD_CoreFindEP>
 8006582:	4603      	mov	r3, r0
 8006584:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006586:	7dbb      	ldrb	r3, [r7, #22]
 8006588:	2bff      	cmp	r3, #255	@ 0xff
 800658a:	d025      	beq.n	80065d8 <USBD_LL_DataOutStage+0x15c>
 800658c:	7dbb      	ldrb	r3, [r7, #22]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d122      	bne.n	80065d8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006598:	b2db      	uxtb	r3, r3
 800659a:	2b03      	cmp	r3, #3
 800659c:	d117      	bne.n	80065ce <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800659e:	7dba      	ldrb	r2, [r7, #22]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	32ae      	adds	r2, #174	@ 0xae
 80065a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00f      	beq.n	80065ce <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80065ae:	7dba      	ldrb	r2, [r7, #22]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80065b6:	7dba      	ldrb	r2, [r7, #22]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	32ae      	adds	r2, #174	@ 0xae
 80065bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065c0:	699b      	ldr	r3, [r3, #24]
 80065c2:	7afa      	ldrb	r2, [r7, #11]
 80065c4:	4611      	mov	r1, r2
 80065c6:	68f8      	ldr	r0, [r7, #12]
 80065c8:	4798      	blx	r3
 80065ca:	4603      	mov	r3, r0
 80065cc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80065ce:	7dfb      	ldrb	r3, [r7, #23]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d001      	beq.n	80065d8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80065d4:	7dfb      	ldrb	r3, [r7, #23]
 80065d6:	e000      	b.n	80065da <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3718      	adds	r7, #24
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}

080065e2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80065e2:	b580      	push	{r7, lr}
 80065e4:	b086      	sub	sp, #24
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	60f8      	str	r0, [r7, #12]
 80065ea:	460b      	mov	r3, r1
 80065ec:	607a      	str	r2, [r7, #4]
 80065ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80065f0:	7afb      	ldrb	r3, [r7, #11]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d16f      	bne.n	80066d6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	3314      	adds	r3, #20
 80065fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006602:	2b02      	cmp	r3, #2
 8006604:	d15a      	bne.n	80066bc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	689a      	ldr	r2, [r3, #8]
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	429a      	cmp	r2, r3
 8006610:	d914      	bls.n	800663c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	689a      	ldr	r2, [r3, #8]
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	1ad2      	subs	r2, r2, r3
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	461a      	mov	r2, r3
 8006626:	6879      	ldr	r1, [r7, #4]
 8006628:	68f8      	ldr	r0, [r7, #12]
 800662a:	f001 f8b0 	bl	800778e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800662e:	2300      	movs	r3, #0
 8006630:	2200      	movs	r2, #0
 8006632:	2100      	movs	r1, #0
 8006634:	68f8      	ldr	r0, [r7, #12]
 8006636:	f001 fd81 	bl	800813c <USBD_LL_PrepareReceive>
 800663a:	e03f      	b.n	80066bc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	68da      	ldr	r2, [r3, #12]
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	429a      	cmp	r2, r3
 8006646:	d11c      	bne.n	8006682 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	685a      	ldr	r2, [r3, #4]
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006650:	429a      	cmp	r2, r3
 8006652:	d316      	bcc.n	8006682 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	685a      	ldr	r2, [r3, #4]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800665e:	429a      	cmp	r2, r3
 8006660:	d20f      	bcs.n	8006682 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006662:	2200      	movs	r2, #0
 8006664:	2100      	movs	r1, #0
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	f001 f891 	bl	800778e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2200      	movs	r2, #0
 8006670:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006674:	2300      	movs	r3, #0
 8006676:	2200      	movs	r2, #0
 8006678:	2100      	movs	r1, #0
 800667a:	68f8      	ldr	r0, [r7, #12]
 800667c:	f001 fd5e 	bl	800813c <USBD_LL_PrepareReceive>
 8006680:	e01c      	b.n	80066bc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006688:	b2db      	uxtb	r3, r3
 800668a:	2b03      	cmp	r3, #3
 800668c:	d10f      	bne.n	80066ae <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d009      	beq.n	80066ae <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	68f8      	ldr	r0, [r7, #12]
 80066ac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80066ae:	2180      	movs	r1, #128	@ 0x80
 80066b0:	68f8      	ldr	r0, [r7, #12]
 80066b2:	f001 fc99 	bl	8007fe8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80066b6:	68f8      	ldr	r0, [r7, #12]
 80066b8:	f001 f8bb 	bl	8007832 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d03a      	beq.n	800673c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80066c6:	68f8      	ldr	r0, [r7, #12]
 80066c8:	f7ff fe42 	bl	8006350 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80066d4:	e032      	b.n	800673c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80066d6:	7afb      	ldrb	r3, [r7, #11]
 80066d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	4619      	mov	r1, r3
 80066e0:	68f8      	ldr	r0, [r7, #12]
 80066e2:	f000 f985 	bl	80069f0 <USBD_CoreFindEP>
 80066e6:	4603      	mov	r3, r0
 80066e8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80066ea:	7dfb      	ldrb	r3, [r7, #23]
 80066ec:	2bff      	cmp	r3, #255	@ 0xff
 80066ee:	d025      	beq.n	800673c <USBD_LL_DataInStage+0x15a>
 80066f0:	7dfb      	ldrb	r3, [r7, #23]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d122      	bne.n	800673c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	2b03      	cmp	r3, #3
 8006700:	d11c      	bne.n	800673c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006702:	7dfa      	ldrb	r2, [r7, #23]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	32ae      	adds	r2, #174	@ 0xae
 8006708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800670c:	695b      	ldr	r3, [r3, #20]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d014      	beq.n	800673c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006712:	7dfa      	ldrb	r2, [r7, #23]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800671a:	7dfa      	ldrb	r2, [r7, #23]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	32ae      	adds	r2, #174	@ 0xae
 8006720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006724:	695b      	ldr	r3, [r3, #20]
 8006726:	7afa      	ldrb	r2, [r7, #11]
 8006728:	4611      	mov	r1, r2
 800672a:	68f8      	ldr	r0, [r7, #12]
 800672c:	4798      	blx	r3
 800672e:	4603      	mov	r3, r0
 8006730:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006732:	7dbb      	ldrb	r3, [r7, #22]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d001      	beq.n	800673c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006738:	7dbb      	ldrb	r3, [r7, #22]
 800673a:	e000      	b.n	800673e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3718      	adds	r7, #24
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}

08006746 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006746:	b580      	push	{r7, lr}
 8006748:	b084      	sub	sp, #16
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800674e:	2300      	movs	r3, #0
 8006750:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2201      	movs	r2, #1
 8006756:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800677e:	2b00      	cmp	r3, #0
 8006780:	d014      	beq.n	80067ac <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00e      	beq.n	80067ac <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	6852      	ldr	r2, [r2, #4]
 800679a:	b2d2      	uxtb	r2, r2
 800679c:	4611      	mov	r1, r2
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	4798      	blx	r3
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d001      	beq.n	80067ac <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80067a8:	2303      	movs	r3, #3
 80067aa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067ac:	2340      	movs	r3, #64	@ 0x40
 80067ae:	2200      	movs	r2, #0
 80067b0:	2100      	movs	r1, #0
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f001 fbd3 	bl	8007f5e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2240      	movs	r2, #64	@ 0x40
 80067c4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067c8:	2340      	movs	r3, #64	@ 0x40
 80067ca:	2200      	movs	r2, #0
 80067cc:	2180      	movs	r1, #128	@ 0x80
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f001 fbc5 	bl	8007f5e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2240      	movs	r2, #64	@ 0x40
 80067de:	621a      	str	r2, [r3, #32]

  return ret;
 80067e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3710      	adds	r7, #16
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80067ea:	b480      	push	{r7}
 80067ec:	b083      	sub	sp, #12
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
 80067f2:	460b      	mov	r3, r1
 80067f4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	78fa      	ldrb	r2, [r7, #3]
 80067fa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	370c      	adds	r7, #12
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr

0800680a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800680a:	b480      	push	{r7}
 800680c:	b083      	sub	sp, #12
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006818:	b2db      	uxtb	r3, r3
 800681a:	2b04      	cmp	r3, #4
 800681c:	d006      	beq.n	800682c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006824:	b2da      	uxtb	r2, r3
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2204      	movs	r2, #4
 8006830:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	370c      	adds	r7, #12
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr

08006842 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006842:	b480      	push	{r7}
 8006844:	b083      	sub	sp, #12
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006850:	b2db      	uxtb	r3, r3
 8006852:	2b04      	cmp	r3, #4
 8006854:	d106      	bne.n	8006864 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800685c:	b2da      	uxtb	r2, r3
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006864:	2300      	movs	r3, #0
}
 8006866:	4618      	mov	r0, r3
 8006868:	370c      	adds	r7, #12
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr

08006872 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006872:	b580      	push	{r7, lr}
 8006874:	b082      	sub	sp, #8
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006880:	b2db      	uxtb	r3, r3
 8006882:	2b03      	cmp	r3, #3
 8006884:	d110      	bne.n	80068a8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800688c:	2b00      	cmp	r3, #0
 800688e:	d00b      	beq.n	80068a8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006896:	69db      	ldr	r3, [r3, #28]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d005      	beq.n	80068a8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068a2:	69db      	ldr	r3, [r3, #28]
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3708      	adds	r7, #8
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b082      	sub	sp, #8
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
 80068ba:	460b      	mov	r3, r1
 80068bc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	32ae      	adds	r2, #174	@ 0xae
 80068c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d101      	bne.n	80068d4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80068d0:	2303      	movs	r3, #3
 80068d2:	e01c      	b.n	800690e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	2b03      	cmp	r3, #3
 80068de:	d115      	bne.n	800690c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	32ae      	adds	r2, #174	@ 0xae
 80068ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ee:	6a1b      	ldr	r3, [r3, #32]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00b      	beq.n	800690c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	32ae      	adds	r2, #174	@ 0xae
 80068fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006902:	6a1b      	ldr	r3, [r3, #32]
 8006904:	78fa      	ldrb	r2, [r7, #3]
 8006906:	4611      	mov	r1, r2
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800690c:	2300      	movs	r3, #0
}
 800690e:	4618      	mov	r0, r3
 8006910:	3708      	adds	r7, #8
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006916:	b580      	push	{r7, lr}
 8006918:	b082      	sub	sp, #8
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
 800691e:	460b      	mov	r3, r1
 8006920:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	32ae      	adds	r2, #174	@ 0xae
 800692c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d101      	bne.n	8006938 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006934:	2303      	movs	r3, #3
 8006936:	e01c      	b.n	8006972 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800693e:	b2db      	uxtb	r3, r3
 8006940:	2b03      	cmp	r3, #3
 8006942:	d115      	bne.n	8006970 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	32ae      	adds	r2, #174	@ 0xae
 800694e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006954:	2b00      	cmp	r3, #0
 8006956:	d00b      	beq.n	8006970 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	32ae      	adds	r2, #174	@ 0xae
 8006962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006968:	78fa      	ldrb	r2, [r7, #3]
 800696a:	4611      	mov	r1, r2
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3708      	adds	r7, #8
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}

0800697a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800697a:	b480      	push	{r7}
 800697c:	b083      	sub	sp, #12
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006982:	2300      	movs	r3, #0
}
 8006984:	4618      	mov	r0, r3
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006998:	2300      	movs	r3, #0
 800699a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00e      	beq.n	80069cc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	6852      	ldr	r2, [r2, #4]
 80069ba:	b2d2      	uxtb	r2, r2
 80069bc:	4611      	mov	r1, r2
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	4798      	blx	r3
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d001      	beq.n	80069cc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80069c8:	2303      	movs	r3, #3
 80069ca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80069cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}

080069d6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80069d6:	b480      	push	{r7}
 80069d8:	b083      	sub	sp, #12
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
 80069de:	460b      	mov	r3, r1
 80069e0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80069e2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	370c      	adds	r7, #12
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	460b      	mov	r3, r1
 80069fa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80069fc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	370c      	adds	r7, #12
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr

08006a0a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b086      	sub	sp, #24
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
 8006a12:	460b      	mov	r3, r1
 8006a14:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	885b      	ldrh	r3, [r3, #2]
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	7812      	ldrb	r2, [r2, #0]
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d91f      	bls.n	8006a70 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006a36:	e013      	b.n	8006a60 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006a38:	f107 030a 	add.w	r3, r7, #10
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	6978      	ldr	r0, [r7, #20]
 8006a40:	f000 f81b 	bl	8006a7a <USBD_GetNextDesc>
 8006a44:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	785b      	ldrb	r3, [r3, #1]
 8006a4a:	2b05      	cmp	r3, #5
 8006a4c:	d108      	bne.n	8006a60 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	789b      	ldrb	r3, [r3, #2]
 8006a56:	78fa      	ldrb	r2, [r7, #3]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d008      	beq.n	8006a6e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	885b      	ldrh	r3, [r3, #2]
 8006a64:	b29a      	uxth	r2, r3
 8006a66:	897b      	ldrh	r3, [r7, #10]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d8e5      	bhi.n	8006a38 <USBD_GetEpDesc+0x2e>
 8006a6c:	e000      	b.n	8006a70 <USBD_GetEpDesc+0x66>
          break;
 8006a6e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006a70:	693b      	ldr	r3, [r7, #16]
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3718      	adds	r7, #24
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006a7a:	b480      	push	{r7}
 8006a7c:	b085      	sub	sp, #20
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
 8006a82:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	881b      	ldrh	r3, [r3, #0]
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	7812      	ldrb	r2, [r2, #0]
 8006a90:	4413      	add	r3, r2
 8006a92:	b29a      	uxth	r2, r3
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3714      	adds	r7, #20
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr

08006ab2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006ab2:	b480      	push	{r7}
 8006ab4:	b087      	sub	sp, #28
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006ad0:	8a3b      	ldrh	r3, [r7, #16]
 8006ad2:	021b      	lsls	r3, r3, #8
 8006ad4:	b21a      	sxth	r2, r3
 8006ad6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	b21b      	sxth	r3, r3
 8006ade:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006ae0:	89fb      	ldrh	r3, [r7, #14]
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	371c      	adds	r7, #28
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr
	...

08006af0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006afa:	2300      	movs	r3, #0
 8006afc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006b06:	2b40      	cmp	r3, #64	@ 0x40
 8006b08:	d005      	beq.n	8006b16 <USBD_StdDevReq+0x26>
 8006b0a:	2b40      	cmp	r3, #64	@ 0x40
 8006b0c:	d857      	bhi.n	8006bbe <USBD_StdDevReq+0xce>
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d00f      	beq.n	8006b32 <USBD_StdDevReq+0x42>
 8006b12:	2b20      	cmp	r3, #32
 8006b14:	d153      	bne.n	8006bbe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	32ae      	adds	r2, #174	@ 0xae
 8006b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	6839      	ldr	r1, [r7, #0]
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	4798      	blx	r3
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b30:	e04a      	b.n	8006bc8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	785b      	ldrb	r3, [r3, #1]
 8006b36:	2b09      	cmp	r3, #9
 8006b38:	d83b      	bhi.n	8006bb2 <USBD_StdDevReq+0xc2>
 8006b3a:	a201      	add	r2, pc, #4	@ (adr r2, 8006b40 <USBD_StdDevReq+0x50>)
 8006b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b40:	08006b95 	.word	0x08006b95
 8006b44:	08006ba9 	.word	0x08006ba9
 8006b48:	08006bb3 	.word	0x08006bb3
 8006b4c:	08006b9f 	.word	0x08006b9f
 8006b50:	08006bb3 	.word	0x08006bb3
 8006b54:	08006b73 	.word	0x08006b73
 8006b58:	08006b69 	.word	0x08006b69
 8006b5c:	08006bb3 	.word	0x08006bb3
 8006b60:	08006b8b 	.word	0x08006b8b
 8006b64:	08006b7d 	.word	0x08006b7d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006b68:	6839      	ldr	r1, [r7, #0]
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 fa3c 	bl	8006fe8 <USBD_GetDescriptor>
          break;
 8006b70:	e024      	b.n	8006bbc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006b72:	6839      	ldr	r1, [r7, #0]
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 fba1 	bl	80072bc <USBD_SetAddress>
          break;
 8006b7a:	e01f      	b.n	8006bbc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006b7c:	6839      	ldr	r1, [r7, #0]
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 fbe0 	bl	8007344 <USBD_SetConfig>
 8006b84:	4603      	mov	r3, r0
 8006b86:	73fb      	strb	r3, [r7, #15]
          break;
 8006b88:	e018      	b.n	8006bbc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006b8a:	6839      	ldr	r1, [r7, #0]
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 fc83 	bl	8007498 <USBD_GetConfig>
          break;
 8006b92:	e013      	b.n	8006bbc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006b94:	6839      	ldr	r1, [r7, #0]
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 fcb4 	bl	8007504 <USBD_GetStatus>
          break;
 8006b9c:	e00e      	b.n	8006bbc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006b9e:	6839      	ldr	r1, [r7, #0]
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 fce3 	bl	800756c <USBD_SetFeature>
          break;
 8006ba6:	e009      	b.n	8006bbc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006ba8:	6839      	ldr	r1, [r7, #0]
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 fd07 	bl	80075be <USBD_ClrFeature>
          break;
 8006bb0:	e004      	b.n	8006bbc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006bb2:	6839      	ldr	r1, [r7, #0]
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 fd5e 	bl	8007676 <USBD_CtlError>
          break;
 8006bba:	bf00      	nop
      }
      break;
 8006bbc:	e004      	b.n	8006bc8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006bbe:	6839      	ldr	r1, [r7, #0]
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 fd58 	bl	8007676 <USBD_CtlError>
      break;
 8006bc6:	bf00      	nop
  }

  return ret;
 8006bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3710      	adds	r7, #16
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop

08006bd4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bde:	2300      	movs	r3, #0
 8006be0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006bea:	2b40      	cmp	r3, #64	@ 0x40
 8006bec:	d005      	beq.n	8006bfa <USBD_StdItfReq+0x26>
 8006bee:	2b40      	cmp	r3, #64	@ 0x40
 8006bf0:	d852      	bhi.n	8006c98 <USBD_StdItfReq+0xc4>
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d001      	beq.n	8006bfa <USBD_StdItfReq+0x26>
 8006bf6:	2b20      	cmp	r3, #32
 8006bf8:	d14e      	bne.n	8006c98 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	3b01      	subs	r3, #1
 8006c04:	2b02      	cmp	r3, #2
 8006c06:	d840      	bhi.n	8006c8a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	889b      	ldrh	r3, [r3, #4]
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d836      	bhi.n	8006c80 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	889b      	ldrh	r3, [r3, #4]
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	4619      	mov	r1, r3
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f7ff fedb 	bl	80069d6 <USBD_CoreFindIF>
 8006c20:	4603      	mov	r3, r0
 8006c22:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c24:	7bbb      	ldrb	r3, [r7, #14]
 8006c26:	2bff      	cmp	r3, #255	@ 0xff
 8006c28:	d01d      	beq.n	8006c66 <USBD_StdItfReq+0x92>
 8006c2a:	7bbb      	ldrb	r3, [r7, #14]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d11a      	bne.n	8006c66 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006c30:	7bba      	ldrb	r2, [r7, #14]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	32ae      	adds	r2, #174	@ 0xae
 8006c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d00f      	beq.n	8006c60 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006c40:	7bba      	ldrb	r2, [r7, #14]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006c48:	7bba      	ldrb	r2, [r7, #14]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	32ae      	adds	r2, #174	@ 0xae
 8006c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	6839      	ldr	r1, [r7, #0]
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	4798      	blx	r3
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006c5e:	e004      	b.n	8006c6a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006c60:	2303      	movs	r3, #3
 8006c62:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006c64:	e001      	b.n	8006c6a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006c66:	2303      	movs	r3, #3
 8006c68:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	88db      	ldrh	r3, [r3, #6]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d110      	bne.n	8006c94 <USBD_StdItfReq+0xc0>
 8006c72:	7bfb      	ldrb	r3, [r7, #15]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d10d      	bne.n	8006c94 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 fdc7 	bl	800780c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006c7e:	e009      	b.n	8006c94 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006c80:	6839      	ldr	r1, [r7, #0]
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 fcf7 	bl	8007676 <USBD_CtlError>
          break;
 8006c88:	e004      	b.n	8006c94 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006c8a:	6839      	ldr	r1, [r7, #0]
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 fcf2 	bl	8007676 <USBD_CtlError>
          break;
 8006c92:	e000      	b.n	8006c96 <USBD_StdItfReq+0xc2>
          break;
 8006c94:	bf00      	nop
      }
      break;
 8006c96:	e004      	b.n	8006ca2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006c98:	6839      	ldr	r1, [r7, #0]
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 fceb 	bl	8007676 <USBD_CtlError>
      break;
 8006ca0:	bf00      	nop
  }

  return ret;
 8006ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3710      	adds	r7, #16
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	889b      	ldrh	r3, [r3, #4]
 8006cbe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006cc8:	2b40      	cmp	r3, #64	@ 0x40
 8006cca:	d007      	beq.n	8006cdc <USBD_StdEPReq+0x30>
 8006ccc:	2b40      	cmp	r3, #64	@ 0x40
 8006cce:	f200 817f 	bhi.w	8006fd0 <USBD_StdEPReq+0x324>
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d02a      	beq.n	8006d2c <USBD_StdEPReq+0x80>
 8006cd6:	2b20      	cmp	r3, #32
 8006cd8:	f040 817a 	bne.w	8006fd0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006cdc:	7bbb      	ldrb	r3, [r7, #14]
 8006cde:	4619      	mov	r1, r3
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f7ff fe85 	bl	80069f0 <USBD_CoreFindEP>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006cea:	7b7b      	ldrb	r3, [r7, #13]
 8006cec:	2bff      	cmp	r3, #255	@ 0xff
 8006cee:	f000 8174 	beq.w	8006fda <USBD_StdEPReq+0x32e>
 8006cf2:	7b7b      	ldrb	r3, [r7, #13]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	f040 8170 	bne.w	8006fda <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006cfa:	7b7a      	ldrb	r2, [r7, #13]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006d02:	7b7a      	ldrb	r2, [r7, #13]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	32ae      	adds	r2, #174	@ 0xae
 8006d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	f000 8163 	beq.w	8006fda <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006d14:	7b7a      	ldrb	r2, [r7, #13]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	32ae      	adds	r2, #174	@ 0xae
 8006d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	6839      	ldr	r1, [r7, #0]
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	4798      	blx	r3
 8006d26:	4603      	mov	r3, r0
 8006d28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006d2a:	e156      	b.n	8006fda <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	785b      	ldrb	r3, [r3, #1]
 8006d30:	2b03      	cmp	r3, #3
 8006d32:	d008      	beq.n	8006d46 <USBD_StdEPReq+0x9a>
 8006d34:	2b03      	cmp	r3, #3
 8006d36:	f300 8145 	bgt.w	8006fc4 <USBD_StdEPReq+0x318>
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	f000 809b 	beq.w	8006e76 <USBD_StdEPReq+0x1ca>
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d03c      	beq.n	8006dbe <USBD_StdEPReq+0x112>
 8006d44:	e13e      	b.n	8006fc4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d002      	beq.n	8006d58 <USBD_StdEPReq+0xac>
 8006d52:	2b03      	cmp	r3, #3
 8006d54:	d016      	beq.n	8006d84 <USBD_StdEPReq+0xd8>
 8006d56:	e02c      	b.n	8006db2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d58:	7bbb      	ldrb	r3, [r7, #14]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00d      	beq.n	8006d7a <USBD_StdEPReq+0xce>
 8006d5e:	7bbb      	ldrb	r3, [r7, #14]
 8006d60:	2b80      	cmp	r3, #128	@ 0x80
 8006d62:	d00a      	beq.n	8006d7a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d64:	7bbb      	ldrb	r3, [r7, #14]
 8006d66:	4619      	mov	r1, r3
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f001 f93d 	bl	8007fe8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d6e:	2180      	movs	r1, #128	@ 0x80
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f001 f939 	bl	8007fe8 <USBD_LL_StallEP>
 8006d76:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006d78:	e020      	b.n	8006dbc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006d7a:	6839      	ldr	r1, [r7, #0]
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 fc7a 	bl	8007676 <USBD_CtlError>
              break;
 8006d82:	e01b      	b.n	8006dbc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	885b      	ldrh	r3, [r3, #2]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d10e      	bne.n	8006daa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006d8c:	7bbb      	ldrb	r3, [r7, #14]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d00b      	beq.n	8006daa <USBD_StdEPReq+0xfe>
 8006d92:	7bbb      	ldrb	r3, [r7, #14]
 8006d94:	2b80      	cmp	r3, #128	@ 0x80
 8006d96:	d008      	beq.n	8006daa <USBD_StdEPReq+0xfe>
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	88db      	ldrh	r3, [r3, #6]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d104      	bne.n	8006daa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006da0:	7bbb      	ldrb	r3, [r7, #14]
 8006da2:	4619      	mov	r1, r3
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f001 f91f 	bl	8007fe8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 fd2e 	bl	800780c <USBD_CtlSendStatus>

              break;
 8006db0:	e004      	b.n	8006dbc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006db2:	6839      	ldr	r1, [r7, #0]
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 fc5e 	bl	8007676 <USBD_CtlError>
              break;
 8006dba:	bf00      	nop
          }
          break;
 8006dbc:	e107      	b.n	8006fce <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d002      	beq.n	8006dd0 <USBD_StdEPReq+0x124>
 8006dca:	2b03      	cmp	r3, #3
 8006dcc:	d016      	beq.n	8006dfc <USBD_StdEPReq+0x150>
 8006dce:	e04b      	b.n	8006e68 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006dd0:	7bbb      	ldrb	r3, [r7, #14]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00d      	beq.n	8006df2 <USBD_StdEPReq+0x146>
 8006dd6:	7bbb      	ldrb	r3, [r7, #14]
 8006dd8:	2b80      	cmp	r3, #128	@ 0x80
 8006dda:	d00a      	beq.n	8006df2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ddc:	7bbb      	ldrb	r3, [r7, #14]
 8006dde:	4619      	mov	r1, r3
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f001 f901 	bl	8007fe8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006de6:	2180      	movs	r1, #128	@ 0x80
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f001 f8fd 	bl	8007fe8 <USBD_LL_StallEP>
 8006dee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006df0:	e040      	b.n	8006e74 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006df2:	6839      	ldr	r1, [r7, #0]
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 fc3e 	bl	8007676 <USBD_CtlError>
              break;
 8006dfa:	e03b      	b.n	8006e74 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	885b      	ldrh	r3, [r3, #2]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d136      	bne.n	8006e72 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006e04:	7bbb      	ldrb	r3, [r7, #14]
 8006e06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d004      	beq.n	8006e18 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006e0e:	7bbb      	ldrb	r3, [r7, #14]
 8006e10:	4619      	mov	r1, r3
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f001 f907 	bl	8008026 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 fcf7 	bl	800780c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006e1e:	7bbb      	ldrb	r3, [r7, #14]
 8006e20:	4619      	mov	r1, r3
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f7ff fde4 	bl	80069f0 <USBD_CoreFindEP>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006e2c:	7b7b      	ldrb	r3, [r7, #13]
 8006e2e:	2bff      	cmp	r3, #255	@ 0xff
 8006e30:	d01f      	beq.n	8006e72 <USBD_StdEPReq+0x1c6>
 8006e32:	7b7b      	ldrb	r3, [r7, #13]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d11c      	bne.n	8006e72 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006e38:	7b7a      	ldrb	r2, [r7, #13]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006e40:	7b7a      	ldrb	r2, [r7, #13]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	32ae      	adds	r2, #174	@ 0xae
 8006e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d010      	beq.n	8006e72 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006e50:	7b7a      	ldrb	r2, [r7, #13]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	32ae      	adds	r2, #174	@ 0xae
 8006e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	6839      	ldr	r1, [r7, #0]
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	4798      	blx	r3
 8006e62:	4603      	mov	r3, r0
 8006e64:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006e66:	e004      	b.n	8006e72 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006e68:	6839      	ldr	r1, [r7, #0]
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 fc03 	bl	8007676 <USBD_CtlError>
              break;
 8006e70:	e000      	b.n	8006e74 <USBD_StdEPReq+0x1c8>
              break;
 8006e72:	bf00      	nop
          }
          break;
 8006e74:	e0ab      	b.n	8006fce <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d002      	beq.n	8006e88 <USBD_StdEPReq+0x1dc>
 8006e82:	2b03      	cmp	r3, #3
 8006e84:	d032      	beq.n	8006eec <USBD_StdEPReq+0x240>
 8006e86:	e097      	b.n	8006fb8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e88:	7bbb      	ldrb	r3, [r7, #14]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d007      	beq.n	8006e9e <USBD_StdEPReq+0x1f2>
 8006e8e:	7bbb      	ldrb	r3, [r7, #14]
 8006e90:	2b80      	cmp	r3, #128	@ 0x80
 8006e92:	d004      	beq.n	8006e9e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006e94:	6839      	ldr	r1, [r7, #0]
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 fbed 	bl	8007676 <USBD_CtlError>
                break;
 8006e9c:	e091      	b.n	8006fc2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	da0b      	bge.n	8006ebe <USBD_StdEPReq+0x212>
 8006ea6:	7bbb      	ldrb	r3, [r7, #14]
 8006ea8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006eac:	4613      	mov	r3, r2
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	4413      	add	r3, r2
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	3310      	adds	r3, #16
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	4413      	add	r3, r2
 8006eba:	3304      	adds	r3, #4
 8006ebc:	e00b      	b.n	8006ed6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006ebe:	7bbb      	ldrb	r3, [r7, #14]
 8006ec0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ec4:	4613      	mov	r3, r2
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	4413      	add	r3, r2
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	3304      	adds	r3, #4
 8006ed6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	2200      	movs	r2, #0
 8006edc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	2202      	movs	r2, #2
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 fc37 	bl	8007758 <USBD_CtlSendData>
              break;
 8006eea:	e06a      	b.n	8006fc2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006eec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	da11      	bge.n	8006f18 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006ef4:	7bbb      	ldrb	r3, [r7, #14]
 8006ef6:	f003 020f 	and.w	r2, r3, #15
 8006efa:	6879      	ldr	r1, [r7, #4]
 8006efc:	4613      	mov	r3, r2
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	4413      	add	r3, r2
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	440b      	add	r3, r1
 8006f06:	3324      	adds	r3, #36	@ 0x24
 8006f08:	881b      	ldrh	r3, [r3, #0]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d117      	bne.n	8006f3e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006f0e:	6839      	ldr	r1, [r7, #0]
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 fbb0 	bl	8007676 <USBD_CtlError>
                  break;
 8006f16:	e054      	b.n	8006fc2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006f18:	7bbb      	ldrb	r3, [r7, #14]
 8006f1a:	f003 020f 	and.w	r2, r3, #15
 8006f1e:	6879      	ldr	r1, [r7, #4]
 8006f20:	4613      	mov	r3, r2
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	4413      	add	r3, r2
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	440b      	add	r3, r1
 8006f2a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006f2e:	881b      	ldrh	r3, [r3, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d104      	bne.n	8006f3e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006f34:	6839      	ldr	r1, [r7, #0]
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 fb9d 	bl	8007676 <USBD_CtlError>
                  break;
 8006f3c:	e041      	b.n	8006fc2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	da0b      	bge.n	8006f5e <USBD_StdEPReq+0x2b2>
 8006f46:	7bbb      	ldrb	r3, [r7, #14]
 8006f48:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	4413      	add	r3, r2
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	3310      	adds	r3, #16
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	4413      	add	r3, r2
 8006f5a:	3304      	adds	r3, #4
 8006f5c:	e00b      	b.n	8006f76 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006f5e:	7bbb      	ldrb	r3, [r7, #14]
 8006f60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f64:	4613      	mov	r3, r2
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	4413      	add	r3, r2
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	4413      	add	r3, r2
 8006f74:	3304      	adds	r3, #4
 8006f76:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006f78:	7bbb      	ldrb	r3, [r7, #14]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d002      	beq.n	8006f84 <USBD_StdEPReq+0x2d8>
 8006f7e:	7bbb      	ldrb	r3, [r7, #14]
 8006f80:	2b80      	cmp	r3, #128	@ 0x80
 8006f82:	d103      	bne.n	8006f8c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	2200      	movs	r2, #0
 8006f88:	601a      	str	r2, [r3, #0]
 8006f8a:	e00e      	b.n	8006faa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006f8c:	7bbb      	ldrb	r3, [r7, #14]
 8006f8e:	4619      	mov	r1, r3
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f001 f867 	bl	8008064 <USBD_LL_IsStallEP>
 8006f96:	4603      	mov	r3, r0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d003      	beq.n	8006fa4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	601a      	str	r2, [r3, #0]
 8006fa2:	e002      	b.n	8006faa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	2202      	movs	r2, #2
 8006fae:	4619      	mov	r1, r3
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 fbd1 	bl	8007758 <USBD_CtlSendData>
              break;
 8006fb6:	e004      	b.n	8006fc2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006fb8:	6839      	ldr	r1, [r7, #0]
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 fb5b 	bl	8007676 <USBD_CtlError>
              break;
 8006fc0:	bf00      	nop
          }
          break;
 8006fc2:	e004      	b.n	8006fce <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006fc4:	6839      	ldr	r1, [r7, #0]
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 fb55 	bl	8007676 <USBD_CtlError>
          break;
 8006fcc:	bf00      	nop
      }
      break;
 8006fce:	e005      	b.n	8006fdc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006fd0:	6839      	ldr	r1, [r7, #0]
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 fb4f 	bl	8007676 <USBD_CtlError>
      break;
 8006fd8:	e000      	b.n	8006fdc <USBD_StdEPReq+0x330>
      break;
 8006fda:	bf00      	nop
  }

  return ret;
 8006fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
	...

08006fe8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	885b      	ldrh	r3, [r3, #2]
 8007002:	0a1b      	lsrs	r3, r3, #8
 8007004:	b29b      	uxth	r3, r3
 8007006:	3b01      	subs	r3, #1
 8007008:	2b06      	cmp	r3, #6
 800700a:	f200 8128 	bhi.w	800725e <USBD_GetDescriptor+0x276>
 800700e:	a201      	add	r2, pc, #4	@ (adr r2, 8007014 <USBD_GetDescriptor+0x2c>)
 8007010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007014:	08007031 	.word	0x08007031
 8007018:	08007049 	.word	0x08007049
 800701c:	08007089 	.word	0x08007089
 8007020:	0800725f 	.word	0x0800725f
 8007024:	0800725f 	.word	0x0800725f
 8007028:	080071ff 	.word	0x080071ff
 800702c:	0800722b 	.word	0x0800722b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	7c12      	ldrb	r2, [r2, #16]
 800703c:	f107 0108 	add.w	r1, r7, #8
 8007040:	4610      	mov	r0, r2
 8007042:	4798      	blx	r3
 8007044:	60f8      	str	r0, [r7, #12]
      break;
 8007046:	e112      	b.n	800726e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	7c1b      	ldrb	r3, [r3, #16]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d10d      	bne.n	800706c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007058:	f107 0208 	add.w	r2, r7, #8
 800705c:	4610      	mov	r0, r2
 800705e:	4798      	blx	r3
 8007060:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	3301      	adds	r3, #1
 8007066:	2202      	movs	r2, #2
 8007068:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800706a:	e100      	b.n	800726e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007074:	f107 0208 	add.w	r2, r7, #8
 8007078:	4610      	mov	r0, r2
 800707a:	4798      	blx	r3
 800707c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	3301      	adds	r3, #1
 8007082:	2202      	movs	r2, #2
 8007084:	701a      	strb	r2, [r3, #0]
      break;
 8007086:	e0f2      	b.n	800726e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	885b      	ldrh	r3, [r3, #2]
 800708c:	b2db      	uxtb	r3, r3
 800708e:	2b05      	cmp	r3, #5
 8007090:	f200 80ac 	bhi.w	80071ec <USBD_GetDescriptor+0x204>
 8007094:	a201      	add	r2, pc, #4	@ (adr r2, 800709c <USBD_GetDescriptor+0xb4>)
 8007096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800709a:	bf00      	nop
 800709c:	080070b5 	.word	0x080070b5
 80070a0:	080070e9 	.word	0x080070e9
 80070a4:	0800711d 	.word	0x0800711d
 80070a8:	08007151 	.word	0x08007151
 80070ac:	08007185 	.word	0x08007185
 80070b0:	080071b9 	.word	0x080071b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d00b      	beq.n	80070d8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	7c12      	ldrb	r2, [r2, #16]
 80070cc:	f107 0108 	add.w	r1, r7, #8
 80070d0:	4610      	mov	r0, r2
 80070d2:	4798      	blx	r3
 80070d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070d6:	e091      	b.n	80071fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070d8:	6839      	ldr	r1, [r7, #0]
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 facb 	bl	8007676 <USBD_CtlError>
            err++;
 80070e0:	7afb      	ldrb	r3, [r7, #11]
 80070e2:	3301      	adds	r3, #1
 80070e4:	72fb      	strb	r3, [r7, #11]
          break;
 80070e6:	e089      	b.n	80071fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00b      	beq.n	800710c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	7c12      	ldrb	r2, [r2, #16]
 8007100:	f107 0108 	add.w	r1, r7, #8
 8007104:	4610      	mov	r0, r2
 8007106:	4798      	blx	r3
 8007108:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800710a:	e077      	b.n	80071fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800710c:	6839      	ldr	r1, [r7, #0]
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 fab1 	bl	8007676 <USBD_CtlError>
            err++;
 8007114:	7afb      	ldrb	r3, [r7, #11]
 8007116:	3301      	adds	r3, #1
 8007118:	72fb      	strb	r3, [r7, #11]
          break;
 800711a:	e06f      	b.n	80071fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d00b      	beq.n	8007140 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	7c12      	ldrb	r2, [r2, #16]
 8007134:	f107 0108 	add.w	r1, r7, #8
 8007138:	4610      	mov	r0, r2
 800713a:	4798      	blx	r3
 800713c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800713e:	e05d      	b.n	80071fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007140:	6839      	ldr	r1, [r7, #0]
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 fa97 	bl	8007676 <USBD_CtlError>
            err++;
 8007148:	7afb      	ldrb	r3, [r7, #11]
 800714a:	3301      	adds	r3, #1
 800714c:	72fb      	strb	r3, [r7, #11]
          break;
 800714e:	e055      	b.n	80071fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007156:	691b      	ldr	r3, [r3, #16]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d00b      	beq.n	8007174 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007162:	691b      	ldr	r3, [r3, #16]
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	7c12      	ldrb	r2, [r2, #16]
 8007168:	f107 0108 	add.w	r1, r7, #8
 800716c:	4610      	mov	r0, r2
 800716e:	4798      	blx	r3
 8007170:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007172:	e043      	b.n	80071fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007174:	6839      	ldr	r1, [r7, #0]
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 fa7d 	bl	8007676 <USBD_CtlError>
            err++;
 800717c:	7afb      	ldrb	r3, [r7, #11]
 800717e:	3301      	adds	r3, #1
 8007180:	72fb      	strb	r3, [r7, #11]
          break;
 8007182:	e03b      	b.n	80071fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800718a:	695b      	ldr	r3, [r3, #20]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d00b      	beq.n	80071a8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007196:	695b      	ldr	r3, [r3, #20]
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	7c12      	ldrb	r2, [r2, #16]
 800719c:	f107 0108 	add.w	r1, r7, #8
 80071a0:	4610      	mov	r0, r2
 80071a2:	4798      	blx	r3
 80071a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071a6:	e029      	b.n	80071fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071a8:	6839      	ldr	r1, [r7, #0]
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 fa63 	bl	8007676 <USBD_CtlError>
            err++;
 80071b0:	7afb      	ldrb	r3, [r7, #11]
 80071b2:	3301      	adds	r3, #1
 80071b4:	72fb      	strb	r3, [r7, #11]
          break;
 80071b6:	e021      	b.n	80071fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071be:	699b      	ldr	r3, [r3, #24]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d00b      	beq.n	80071dc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071ca:	699b      	ldr	r3, [r3, #24]
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	7c12      	ldrb	r2, [r2, #16]
 80071d0:	f107 0108 	add.w	r1, r7, #8
 80071d4:	4610      	mov	r0, r2
 80071d6:	4798      	blx	r3
 80071d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071da:	e00f      	b.n	80071fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071dc:	6839      	ldr	r1, [r7, #0]
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 fa49 	bl	8007676 <USBD_CtlError>
            err++;
 80071e4:	7afb      	ldrb	r3, [r7, #11]
 80071e6:	3301      	adds	r3, #1
 80071e8:	72fb      	strb	r3, [r7, #11]
          break;
 80071ea:	e007      	b.n	80071fc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80071ec:	6839      	ldr	r1, [r7, #0]
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 fa41 	bl	8007676 <USBD_CtlError>
          err++;
 80071f4:	7afb      	ldrb	r3, [r7, #11]
 80071f6:	3301      	adds	r3, #1
 80071f8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80071fa:	bf00      	nop
      }
      break;
 80071fc:	e037      	b.n	800726e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	7c1b      	ldrb	r3, [r3, #16]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d109      	bne.n	800721a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800720c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800720e:	f107 0208 	add.w	r2, r7, #8
 8007212:	4610      	mov	r0, r2
 8007214:	4798      	blx	r3
 8007216:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007218:	e029      	b.n	800726e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800721a:	6839      	ldr	r1, [r7, #0]
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 fa2a 	bl	8007676 <USBD_CtlError>
        err++;
 8007222:	7afb      	ldrb	r3, [r7, #11]
 8007224:	3301      	adds	r3, #1
 8007226:	72fb      	strb	r3, [r7, #11]
      break;
 8007228:	e021      	b.n	800726e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	7c1b      	ldrb	r3, [r3, #16]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d10d      	bne.n	800724e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800723a:	f107 0208 	add.w	r2, r7, #8
 800723e:	4610      	mov	r0, r2
 8007240:	4798      	blx	r3
 8007242:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	3301      	adds	r3, #1
 8007248:	2207      	movs	r2, #7
 800724a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800724c:	e00f      	b.n	800726e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800724e:	6839      	ldr	r1, [r7, #0]
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 fa10 	bl	8007676 <USBD_CtlError>
        err++;
 8007256:	7afb      	ldrb	r3, [r7, #11]
 8007258:	3301      	adds	r3, #1
 800725a:	72fb      	strb	r3, [r7, #11]
      break;
 800725c:	e007      	b.n	800726e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800725e:	6839      	ldr	r1, [r7, #0]
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 fa08 	bl	8007676 <USBD_CtlError>
      err++;
 8007266:	7afb      	ldrb	r3, [r7, #11]
 8007268:	3301      	adds	r3, #1
 800726a:	72fb      	strb	r3, [r7, #11]
      break;
 800726c:	bf00      	nop
  }

  if (err != 0U)
 800726e:	7afb      	ldrb	r3, [r7, #11]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d11e      	bne.n	80072b2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	88db      	ldrh	r3, [r3, #6]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d016      	beq.n	80072aa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800727c:	893b      	ldrh	r3, [r7, #8]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d00e      	beq.n	80072a0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	88da      	ldrh	r2, [r3, #6]
 8007286:	893b      	ldrh	r3, [r7, #8]
 8007288:	4293      	cmp	r3, r2
 800728a:	bf28      	it	cs
 800728c:	4613      	movcs	r3, r2
 800728e:	b29b      	uxth	r3, r3
 8007290:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007292:	893b      	ldrh	r3, [r7, #8]
 8007294:	461a      	mov	r2, r3
 8007296:	68f9      	ldr	r1, [r7, #12]
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 fa5d 	bl	8007758 <USBD_CtlSendData>
 800729e:	e009      	b.n	80072b4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80072a0:	6839      	ldr	r1, [r7, #0]
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 f9e7 	bl	8007676 <USBD_CtlError>
 80072a8:	e004      	b.n	80072b4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 faae 	bl	800780c <USBD_CtlSendStatus>
 80072b0:	e000      	b.n	80072b4 <USBD_GetDescriptor+0x2cc>
    return;
 80072b2:	bf00      	nop
  }
}
 80072b4:	3710      	adds	r7, #16
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	bf00      	nop

080072bc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	889b      	ldrh	r3, [r3, #4]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d131      	bne.n	8007332 <USBD_SetAddress+0x76>
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	88db      	ldrh	r3, [r3, #6]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d12d      	bne.n	8007332 <USBD_SetAddress+0x76>
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	885b      	ldrh	r3, [r3, #2]
 80072da:	2b7f      	cmp	r3, #127	@ 0x7f
 80072dc:	d829      	bhi.n	8007332 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	885b      	ldrh	r3, [r3, #2]
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	2b03      	cmp	r3, #3
 80072f4:	d104      	bne.n	8007300 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80072f6:	6839      	ldr	r1, [r7, #0]
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 f9bc 	bl	8007676 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072fe:	e01d      	b.n	800733c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	7bfa      	ldrb	r2, [r7, #15]
 8007304:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007308:	7bfb      	ldrb	r3, [r7, #15]
 800730a:	4619      	mov	r1, r3
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 fed5 	bl	80080bc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 fa7a 	bl	800780c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007318:	7bfb      	ldrb	r3, [r7, #15]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d004      	beq.n	8007328 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2202      	movs	r2, #2
 8007322:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007326:	e009      	b.n	800733c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007330:	e004      	b.n	800733c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007332:	6839      	ldr	r1, [r7, #0]
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 f99e 	bl	8007676 <USBD_CtlError>
  }
}
 800733a:	bf00      	nop
 800733c:	bf00      	nop
 800733e:	3710      	adds	r7, #16
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800734e:	2300      	movs	r3, #0
 8007350:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	885b      	ldrh	r3, [r3, #2]
 8007356:	b2da      	uxtb	r2, r3
 8007358:	4b4e      	ldr	r3, [pc, #312]	@ (8007494 <USBD_SetConfig+0x150>)
 800735a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800735c:	4b4d      	ldr	r3, [pc, #308]	@ (8007494 <USBD_SetConfig+0x150>)
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	2b01      	cmp	r3, #1
 8007362:	d905      	bls.n	8007370 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007364:	6839      	ldr	r1, [r7, #0]
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f985 	bl	8007676 <USBD_CtlError>
    return USBD_FAIL;
 800736c:	2303      	movs	r3, #3
 800736e:	e08c      	b.n	800748a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007376:	b2db      	uxtb	r3, r3
 8007378:	2b02      	cmp	r3, #2
 800737a:	d002      	beq.n	8007382 <USBD_SetConfig+0x3e>
 800737c:	2b03      	cmp	r3, #3
 800737e:	d029      	beq.n	80073d4 <USBD_SetConfig+0x90>
 8007380:	e075      	b.n	800746e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007382:	4b44      	ldr	r3, [pc, #272]	@ (8007494 <USBD_SetConfig+0x150>)
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d020      	beq.n	80073cc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800738a:	4b42      	ldr	r3, [pc, #264]	@ (8007494 <USBD_SetConfig+0x150>)
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	461a      	mov	r2, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007394:	4b3f      	ldr	r3, [pc, #252]	@ (8007494 <USBD_SetConfig+0x150>)
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	4619      	mov	r1, r3
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f7fe ffe3 	bl	8006366 <USBD_SetClassConfig>
 80073a0:	4603      	mov	r3, r0
 80073a2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80073a4:	7bfb      	ldrb	r3, [r7, #15]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d008      	beq.n	80073bc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80073aa:	6839      	ldr	r1, [r7, #0]
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 f962 	bl	8007676 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2202      	movs	r2, #2
 80073b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80073ba:	e065      	b.n	8007488 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 fa25 	bl	800780c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2203      	movs	r2, #3
 80073c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80073ca:	e05d      	b.n	8007488 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 fa1d 	bl	800780c <USBD_CtlSendStatus>
      break;
 80073d2:	e059      	b.n	8007488 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80073d4:	4b2f      	ldr	r3, [pc, #188]	@ (8007494 <USBD_SetConfig+0x150>)
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d112      	bne.n	8007402 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2202      	movs	r2, #2
 80073e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80073e4:	4b2b      	ldr	r3, [pc, #172]	@ (8007494 <USBD_SetConfig+0x150>)
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	461a      	mov	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80073ee:	4b29      	ldr	r3, [pc, #164]	@ (8007494 <USBD_SetConfig+0x150>)
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	4619      	mov	r1, r3
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f7fe ffd2 	bl	800639e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 fa06 	bl	800780c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007400:	e042      	b.n	8007488 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007402:	4b24      	ldr	r3, [pc, #144]	@ (8007494 <USBD_SetConfig+0x150>)
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	461a      	mov	r2, r3
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	429a      	cmp	r2, r3
 800740e:	d02a      	beq.n	8007466 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	b2db      	uxtb	r3, r3
 8007416:	4619      	mov	r1, r3
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f7fe ffc0 	bl	800639e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800741e:	4b1d      	ldr	r3, [pc, #116]	@ (8007494 <USBD_SetConfig+0x150>)
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	461a      	mov	r2, r3
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007428:	4b1a      	ldr	r3, [pc, #104]	@ (8007494 <USBD_SetConfig+0x150>)
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	4619      	mov	r1, r3
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f7fe ff99 	bl	8006366 <USBD_SetClassConfig>
 8007434:	4603      	mov	r3, r0
 8007436:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007438:	7bfb      	ldrb	r3, [r7, #15]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00f      	beq.n	800745e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800743e:	6839      	ldr	r1, [r7, #0]
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 f918 	bl	8007676 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	b2db      	uxtb	r3, r3
 800744c:	4619      	mov	r1, r3
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f7fe ffa5 	bl	800639e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2202      	movs	r2, #2
 8007458:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800745c:	e014      	b.n	8007488 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 f9d4 	bl	800780c <USBD_CtlSendStatus>
      break;
 8007464:	e010      	b.n	8007488 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 f9d0 	bl	800780c <USBD_CtlSendStatus>
      break;
 800746c:	e00c      	b.n	8007488 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800746e:	6839      	ldr	r1, [r7, #0]
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 f900 	bl	8007676 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007476:	4b07      	ldr	r3, [pc, #28]	@ (8007494 <USBD_SetConfig+0x150>)
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	4619      	mov	r1, r3
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f7fe ff8e 	bl	800639e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007482:	2303      	movs	r3, #3
 8007484:	73fb      	strb	r3, [r7, #15]
      break;
 8007486:	bf00      	nop
  }

  return ret;
 8007488:	7bfb      	ldrb	r3, [r7, #15]
}
 800748a:	4618      	mov	r0, r3
 800748c:	3710      	adds	r7, #16
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	2000024c 	.word	0x2000024c

08007498 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b082      	sub	sp, #8
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	88db      	ldrh	r3, [r3, #6]
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d004      	beq.n	80074b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80074aa:	6839      	ldr	r1, [r7, #0]
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 f8e2 	bl	8007676 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80074b2:	e023      	b.n	80074fc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	2b02      	cmp	r3, #2
 80074be:	dc02      	bgt.n	80074c6 <USBD_GetConfig+0x2e>
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	dc03      	bgt.n	80074cc <USBD_GetConfig+0x34>
 80074c4:	e015      	b.n	80074f2 <USBD_GetConfig+0x5a>
 80074c6:	2b03      	cmp	r3, #3
 80074c8:	d00b      	beq.n	80074e2 <USBD_GetConfig+0x4a>
 80074ca:	e012      	b.n	80074f2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	3308      	adds	r3, #8
 80074d6:	2201      	movs	r2, #1
 80074d8:	4619      	mov	r1, r3
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 f93c 	bl	8007758 <USBD_CtlSendData>
        break;
 80074e0:	e00c      	b.n	80074fc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	3304      	adds	r3, #4
 80074e6:	2201      	movs	r2, #1
 80074e8:	4619      	mov	r1, r3
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 f934 	bl	8007758 <USBD_CtlSendData>
        break;
 80074f0:	e004      	b.n	80074fc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80074f2:	6839      	ldr	r1, [r7, #0]
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 f8be 	bl	8007676 <USBD_CtlError>
        break;
 80074fa:	bf00      	nop
}
 80074fc:	bf00      	nop
 80074fe:	3708      	adds	r7, #8
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007514:	b2db      	uxtb	r3, r3
 8007516:	3b01      	subs	r3, #1
 8007518:	2b02      	cmp	r3, #2
 800751a:	d81e      	bhi.n	800755a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	88db      	ldrh	r3, [r3, #6]
 8007520:	2b02      	cmp	r3, #2
 8007522:	d004      	beq.n	800752e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007524:	6839      	ldr	r1, [r7, #0]
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 f8a5 	bl	8007676 <USBD_CtlError>
        break;
 800752c:	e01a      	b.n	8007564 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2201      	movs	r2, #1
 8007532:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800753a:	2b00      	cmp	r3, #0
 800753c:	d005      	beq.n	800754a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	f043 0202 	orr.w	r2, r3, #2
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	330c      	adds	r3, #12
 800754e:	2202      	movs	r2, #2
 8007550:	4619      	mov	r1, r3
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 f900 	bl	8007758 <USBD_CtlSendData>
      break;
 8007558:	e004      	b.n	8007564 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800755a:	6839      	ldr	r1, [r7, #0]
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 f88a 	bl	8007676 <USBD_CtlError>
      break;
 8007562:	bf00      	nop
  }
}
 8007564:	bf00      	nop
 8007566:	3708      	adds	r7, #8
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	885b      	ldrh	r3, [r3, #2]
 800757a:	2b01      	cmp	r3, #1
 800757c:	d107      	bne.n	800758e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2201      	movs	r2, #1
 8007582:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 f940 	bl	800780c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800758c:	e013      	b.n	80075b6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	885b      	ldrh	r3, [r3, #2]
 8007592:	2b02      	cmp	r3, #2
 8007594:	d10b      	bne.n	80075ae <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	889b      	ldrh	r3, [r3, #4]
 800759a:	0a1b      	lsrs	r3, r3, #8
 800759c:	b29b      	uxth	r3, r3
 800759e:	b2da      	uxtb	r2, r3
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 f930 	bl	800780c <USBD_CtlSendStatus>
}
 80075ac:	e003      	b.n	80075b6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80075ae:	6839      	ldr	r1, [r7, #0]
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 f860 	bl	8007676 <USBD_CtlError>
}
 80075b6:	bf00      	nop
 80075b8:	3708      	adds	r7, #8
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}

080075be <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075be:	b580      	push	{r7, lr}
 80075c0:	b082      	sub	sp, #8
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
 80075c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	3b01      	subs	r3, #1
 80075d2:	2b02      	cmp	r3, #2
 80075d4:	d80b      	bhi.n	80075ee <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	885b      	ldrh	r3, [r3, #2]
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d10c      	bne.n	80075f8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 f910 	bl	800780c <USBD_CtlSendStatus>
      }
      break;
 80075ec:	e004      	b.n	80075f8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80075ee:	6839      	ldr	r1, [r7, #0]
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 f840 	bl	8007676 <USBD_CtlError>
      break;
 80075f6:	e000      	b.n	80075fa <USBD_ClrFeature+0x3c>
      break;
 80075f8:	bf00      	nop
  }
}
 80075fa:	bf00      	nop
 80075fc:	3708      	adds	r7, #8
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}

08007602 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007602:	b580      	push	{r7, lr}
 8007604:	b084      	sub	sp, #16
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
 800760a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	781a      	ldrb	r2, [r3, #0]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	3301      	adds	r3, #1
 800761c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	781a      	ldrb	r2, [r3, #0]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	3301      	adds	r3, #1
 800762a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800762c:	68f8      	ldr	r0, [r7, #12]
 800762e:	f7ff fa40 	bl	8006ab2 <SWAPBYTE>
 8007632:	4603      	mov	r3, r0
 8007634:	461a      	mov	r2, r3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	3301      	adds	r3, #1
 800763e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	3301      	adds	r3, #1
 8007644:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007646:	68f8      	ldr	r0, [r7, #12]
 8007648:	f7ff fa33 	bl	8006ab2 <SWAPBYTE>
 800764c:	4603      	mov	r3, r0
 800764e:	461a      	mov	r2, r3
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	3301      	adds	r3, #1
 8007658:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	3301      	adds	r3, #1
 800765e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007660:	68f8      	ldr	r0, [r7, #12]
 8007662:	f7ff fa26 	bl	8006ab2 <SWAPBYTE>
 8007666:	4603      	mov	r3, r0
 8007668:	461a      	mov	r2, r3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	80da      	strh	r2, [r3, #6]
}
 800766e:	bf00      	nop
 8007670:	3710      	adds	r7, #16
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}

08007676 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007676:	b580      	push	{r7, lr}
 8007678:	b082      	sub	sp, #8
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
 800767e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007680:	2180      	movs	r1, #128	@ 0x80
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 fcb0 	bl	8007fe8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007688:	2100      	movs	r1, #0
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 fcac 	bl	8007fe8 <USBD_LL_StallEP>
}
 8007690:	bf00      	nop
 8007692:	3708      	adds	r7, #8
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b086      	sub	sp, #24
 800769c:	af00      	add	r7, sp, #0
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	60b9      	str	r1, [r7, #8]
 80076a2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80076a4:	2300      	movs	r3, #0
 80076a6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d036      	beq.n	800771c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80076b2:	6938      	ldr	r0, [r7, #16]
 80076b4:	f000 f836 	bl	8007724 <USBD_GetLen>
 80076b8:	4603      	mov	r3, r0
 80076ba:	3301      	adds	r3, #1
 80076bc:	b29b      	uxth	r3, r3
 80076be:	005b      	lsls	r3, r3, #1
 80076c0:	b29a      	uxth	r2, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80076c6:	7dfb      	ldrb	r3, [r7, #23]
 80076c8:	68ba      	ldr	r2, [r7, #8]
 80076ca:	4413      	add	r3, r2
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	7812      	ldrb	r2, [r2, #0]
 80076d0:	701a      	strb	r2, [r3, #0]
  idx++;
 80076d2:	7dfb      	ldrb	r3, [r7, #23]
 80076d4:	3301      	adds	r3, #1
 80076d6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80076d8:	7dfb      	ldrb	r3, [r7, #23]
 80076da:	68ba      	ldr	r2, [r7, #8]
 80076dc:	4413      	add	r3, r2
 80076de:	2203      	movs	r2, #3
 80076e0:	701a      	strb	r2, [r3, #0]
  idx++;
 80076e2:	7dfb      	ldrb	r3, [r7, #23]
 80076e4:	3301      	adds	r3, #1
 80076e6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80076e8:	e013      	b.n	8007712 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80076ea:	7dfb      	ldrb	r3, [r7, #23]
 80076ec:	68ba      	ldr	r2, [r7, #8]
 80076ee:	4413      	add	r3, r2
 80076f0:	693a      	ldr	r2, [r7, #16]
 80076f2:	7812      	ldrb	r2, [r2, #0]
 80076f4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	3301      	adds	r3, #1
 80076fa:	613b      	str	r3, [r7, #16]
    idx++;
 80076fc:	7dfb      	ldrb	r3, [r7, #23]
 80076fe:	3301      	adds	r3, #1
 8007700:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007702:	7dfb      	ldrb	r3, [r7, #23]
 8007704:	68ba      	ldr	r2, [r7, #8]
 8007706:	4413      	add	r3, r2
 8007708:	2200      	movs	r2, #0
 800770a:	701a      	strb	r2, [r3, #0]
    idx++;
 800770c:	7dfb      	ldrb	r3, [r7, #23]
 800770e:	3301      	adds	r3, #1
 8007710:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d1e7      	bne.n	80076ea <USBD_GetString+0x52>
 800771a:	e000      	b.n	800771e <USBD_GetString+0x86>
    return;
 800771c:	bf00      	nop
  }
}
 800771e:	3718      	adds	r7, #24
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007724:	b480      	push	{r7}
 8007726:	b085      	sub	sp, #20
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800772c:	2300      	movs	r3, #0
 800772e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007734:	e005      	b.n	8007742 <USBD_GetLen+0x1e>
  {
    len++;
 8007736:	7bfb      	ldrb	r3, [r7, #15]
 8007738:	3301      	adds	r3, #1
 800773a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	3301      	adds	r3, #1
 8007740:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d1f5      	bne.n	8007736 <USBD_GetLen+0x12>
  }

  return len;
 800774a:	7bfb      	ldrb	r3, [r7, #15]
}
 800774c:	4618      	mov	r0, r3
 800774e:	3714      	adds	r7, #20
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2202      	movs	r2, #2
 8007768:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	68ba      	ldr	r2, [r7, #8]
 800777c:	2100      	movs	r1, #0
 800777e:	68f8      	ldr	r0, [r7, #12]
 8007780:	f000 fcbb 	bl	80080fa <USBD_LL_Transmit>

  return USBD_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	3710      	adds	r7, #16
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}

0800778e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800778e:	b580      	push	{r7, lr}
 8007790:	b084      	sub	sp, #16
 8007792:	af00      	add	r7, sp, #0
 8007794:	60f8      	str	r0, [r7, #12]
 8007796:	60b9      	str	r1, [r7, #8]
 8007798:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	68ba      	ldr	r2, [r7, #8]
 800779e:	2100      	movs	r1, #0
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f000 fcaa 	bl	80080fa <USBD_LL_Transmit>

  return USBD_OK;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3710      	adds	r7, #16
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2203      	movs	r2, #3
 80077c0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	68ba      	ldr	r2, [r7, #8]
 80077d8:	2100      	movs	r1, #0
 80077da:	68f8      	ldr	r0, [r7, #12]
 80077dc:	f000 fcae 	bl	800813c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3710      	adds	r7, #16
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b084      	sub	sp, #16
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	60f8      	str	r0, [r7, #12]
 80077f2:	60b9      	str	r1, [r7, #8]
 80077f4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	68ba      	ldr	r2, [r7, #8]
 80077fa:	2100      	movs	r1, #0
 80077fc:	68f8      	ldr	r0, [r7, #12]
 80077fe:	f000 fc9d 	bl	800813c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	3710      	adds	r7, #16
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2204      	movs	r2, #4
 8007818:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800781c:	2300      	movs	r3, #0
 800781e:	2200      	movs	r2, #0
 8007820:	2100      	movs	r1, #0
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 fc69 	bl	80080fa <USBD_LL_Transmit>

  return USBD_OK;
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	3708      	adds	r7, #8
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b082      	sub	sp, #8
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2205      	movs	r2, #5
 800783e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007842:	2300      	movs	r3, #0
 8007844:	2200      	movs	r2, #0
 8007846:	2100      	movs	r1, #0
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 fc77 	bl	800813c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800784e:	2300      	movs	r3, #0
}
 8007850:	4618      	mov	r0, r3
 8007852:	3708      	adds	r7, #8
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800785c:	2200      	movs	r2, #0
 800785e:	4912      	ldr	r1, [pc, #72]	@ (80078a8 <MX_USB_DEVICE_Init+0x50>)
 8007860:	4812      	ldr	r0, [pc, #72]	@ (80078ac <MX_USB_DEVICE_Init+0x54>)
 8007862:	f7fe fd03 	bl	800626c <USBD_Init>
 8007866:	4603      	mov	r3, r0
 8007868:	2b00      	cmp	r3, #0
 800786a:	d001      	beq.n	8007870 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800786c:	f7f8 ffcc 	bl	8000808 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007870:	490f      	ldr	r1, [pc, #60]	@ (80078b0 <MX_USB_DEVICE_Init+0x58>)
 8007872:	480e      	ldr	r0, [pc, #56]	@ (80078ac <MX_USB_DEVICE_Init+0x54>)
 8007874:	f7fe fd2a 	bl	80062cc <USBD_RegisterClass>
 8007878:	4603      	mov	r3, r0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d001      	beq.n	8007882 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800787e:	f7f8 ffc3 	bl	8000808 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007882:	490c      	ldr	r1, [pc, #48]	@ (80078b4 <MX_USB_DEVICE_Init+0x5c>)
 8007884:	4809      	ldr	r0, [pc, #36]	@ (80078ac <MX_USB_DEVICE_Init+0x54>)
 8007886:	f7fe fc61 	bl	800614c <USBD_CDC_RegisterInterface>
 800788a:	4603      	mov	r3, r0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d001      	beq.n	8007894 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007890:	f7f8 ffba 	bl	8000808 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007894:	4805      	ldr	r0, [pc, #20]	@ (80078ac <MX_USB_DEVICE_Init+0x54>)
 8007896:	f7fe fd4f 	bl	8006338 <USBD_Start>
 800789a:	4603      	mov	r3, r0
 800789c:	2b00      	cmp	r3, #0
 800789e:	d001      	beq.n	80078a4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80078a0:	f7f8 ffb2 	bl	8000808 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80078a4:	bf00      	nop
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	200000ac 	.word	0x200000ac
 80078ac:	20000250 	.word	0x20000250
 80078b0:	20000018 	.word	0x20000018
 80078b4:	20000098 	.word	0x20000098

080078b8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80078bc:	2200      	movs	r2, #0
 80078be:	4905      	ldr	r1, [pc, #20]	@ (80078d4 <CDC_Init_FS+0x1c>)
 80078c0:	4805      	ldr	r0, [pc, #20]	@ (80078d8 <CDC_Init_FS+0x20>)
 80078c2:	f7fe fc5d 	bl	8006180 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80078c6:	4905      	ldr	r1, [pc, #20]	@ (80078dc <CDC_Init_FS+0x24>)
 80078c8:	4803      	ldr	r0, [pc, #12]	@ (80078d8 <CDC_Init_FS+0x20>)
 80078ca:	f7fe fc7b 	bl	80061c4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80078ce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	20000d2c 	.word	0x20000d2c
 80078d8:	20000250 	.word	0x20000250
 80078dc:	2000052c 	.word	0x2000052c

080078e0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80078e0:	b480      	push	{r7}
 80078e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80078e4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr

080078f0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b083      	sub	sp, #12
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	4603      	mov	r3, r0
 80078f8:	6039      	str	r1, [r7, #0]
 80078fa:	71fb      	strb	r3, [r7, #7]
 80078fc:	4613      	mov	r3, r2
 80078fe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007900:	79fb      	ldrb	r3, [r7, #7]
 8007902:	2b23      	cmp	r3, #35	@ 0x23
 8007904:	d84a      	bhi.n	800799c <CDC_Control_FS+0xac>
 8007906:	a201      	add	r2, pc, #4	@ (adr r2, 800790c <CDC_Control_FS+0x1c>)
 8007908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800790c:	0800799d 	.word	0x0800799d
 8007910:	0800799d 	.word	0x0800799d
 8007914:	0800799d 	.word	0x0800799d
 8007918:	0800799d 	.word	0x0800799d
 800791c:	0800799d 	.word	0x0800799d
 8007920:	0800799d 	.word	0x0800799d
 8007924:	0800799d 	.word	0x0800799d
 8007928:	0800799d 	.word	0x0800799d
 800792c:	0800799d 	.word	0x0800799d
 8007930:	0800799d 	.word	0x0800799d
 8007934:	0800799d 	.word	0x0800799d
 8007938:	0800799d 	.word	0x0800799d
 800793c:	0800799d 	.word	0x0800799d
 8007940:	0800799d 	.word	0x0800799d
 8007944:	0800799d 	.word	0x0800799d
 8007948:	0800799d 	.word	0x0800799d
 800794c:	0800799d 	.word	0x0800799d
 8007950:	0800799d 	.word	0x0800799d
 8007954:	0800799d 	.word	0x0800799d
 8007958:	0800799d 	.word	0x0800799d
 800795c:	0800799d 	.word	0x0800799d
 8007960:	0800799d 	.word	0x0800799d
 8007964:	0800799d 	.word	0x0800799d
 8007968:	0800799d 	.word	0x0800799d
 800796c:	0800799d 	.word	0x0800799d
 8007970:	0800799d 	.word	0x0800799d
 8007974:	0800799d 	.word	0x0800799d
 8007978:	0800799d 	.word	0x0800799d
 800797c:	0800799d 	.word	0x0800799d
 8007980:	0800799d 	.word	0x0800799d
 8007984:	0800799d 	.word	0x0800799d
 8007988:	0800799d 	.word	0x0800799d
 800798c:	0800799d 	.word	0x0800799d
 8007990:	0800799d 	.word	0x0800799d
 8007994:	0800799d 	.word	0x0800799d
 8007998:	0800799d 	.word	0x0800799d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800799c:	bf00      	nop
  }

  return (USBD_OK);
 800799e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	370c      	adds	r7, #12
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b082      	sub	sp, #8
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80079b6:	6879      	ldr	r1, [r7, #4]
 80079b8:	4805      	ldr	r0, [pc, #20]	@ (80079d0 <CDC_Receive_FS+0x24>)
 80079ba:	f7fe fc03 	bl	80061c4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80079be:	4804      	ldr	r0, [pc, #16]	@ (80079d0 <CDC_Receive_FS+0x24>)
 80079c0:	f7fe fc1e 	bl	8006200 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80079c4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3708      	adds	r7, #8
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	20000250 	.word	0x20000250

080079d4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b087      	sub	sp, #28
 80079d8:	af00      	add	r7, sp, #0
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	4613      	mov	r3, r2
 80079e0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80079e2:	2300      	movs	r3, #0
 80079e4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80079e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	371c      	adds	r7, #28
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr
	...

080079f8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b083      	sub	sp, #12
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	4603      	mov	r3, r0
 8007a00:	6039      	str	r1, [r7, #0]
 8007a02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	2212      	movs	r2, #18
 8007a08:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007a0a:	4b03      	ldr	r3, [pc, #12]	@ (8007a18 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr
 8007a18:	200000c8 	.word	0x200000c8

08007a1c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	4603      	mov	r3, r0
 8007a24:	6039      	str	r1, [r7, #0]
 8007a26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	2204      	movs	r2, #4
 8007a2c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007a2e:	4b03      	ldr	r3, [pc, #12]	@ (8007a3c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	370c      	adds	r7, #12
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr
 8007a3c:	200000dc 	.word	0x200000dc

08007a40 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	4603      	mov	r3, r0
 8007a48:	6039      	str	r1, [r7, #0]
 8007a4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a4c:	79fb      	ldrb	r3, [r7, #7]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d105      	bne.n	8007a5e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a52:	683a      	ldr	r2, [r7, #0]
 8007a54:	4907      	ldr	r1, [pc, #28]	@ (8007a74 <USBD_FS_ProductStrDescriptor+0x34>)
 8007a56:	4808      	ldr	r0, [pc, #32]	@ (8007a78 <USBD_FS_ProductStrDescriptor+0x38>)
 8007a58:	f7ff fe1e 	bl	8007698 <USBD_GetString>
 8007a5c:	e004      	b.n	8007a68 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a5e:	683a      	ldr	r2, [r7, #0]
 8007a60:	4904      	ldr	r1, [pc, #16]	@ (8007a74 <USBD_FS_ProductStrDescriptor+0x34>)
 8007a62:	4805      	ldr	r0, [pc, #20]	@ (8007a78 <USBD_FS_ProductStrDescriptor+0x38>)
 8007a64:	f7ff fe18 	bl	8007698 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a68:	4b02      	ldr	r3, [pc, #8]	@ (8007a74 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3708      	adds	r7, #8
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop
 8007a74:	2000152c 	.word	0x2000152c
 8007a78:	0800829c 	.word	0x0800829c

08007a7c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	4603      	mov	r3, r0
 8007a84:	6039      	str	r1, [r7, #0]
 8007a86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007a88:	683a      	ldr	r2, [r7, #0]
 8007a8a:	4904      	ldr	r1, [pc, #16]	@ (8007a9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007a8c:	4804      	ldr	r0, [pc, #16]	@ (8007aa0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007a8e:	f7ff fe03 	bl	8007698 <USBD_GetString>
  return USBD_StrDesc;
 8007a92:	4b02      	ldr	r3, [pc, #8]	@ (8007a9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3708      	adds	r7, #8
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}
 8007a9c:	2000152c 	.word	0x2000152c
 8007aa0:	080082b4 	.word	0x080082b4

08007aa4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b082      	sub	sp, #8
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	4603      	mov	r3, r0
 8007aac:	6039      	str	r1, [r7, #0]
 8007aae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	221a      	movs	r2, #26
 8007ab4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007ab6:	f000 f843 	bl	8007b40 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007aba:	4b02      	ldr	r3, [pc, #8]	@ (8007ac4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3708      	adds	r7, #8
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}
 8007ac4:	200000e0 	.word	0x200000e0

08007ac8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	4603      	mov	r3, r0
 8007ad0:	6039      	str	r1, [r7, #0]
 8007ad2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007ad4:	79fb      	ldrb	r3, [r7, #7]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d105      	bne.n	8007ae6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007ada:	683a      	ldr	r2, [r7, #0]
 8007adc:	4907      	ldr	r1, [pc, #28]	@ (8007afc <USBD_FS_ConfigStrDescriptor+0x34>)
 8007ade:	4808      	ldr	r0, [pc, #32]	@ (8007b00 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ae0:	f7ff fdda 	bl	8007698 <USBD_GetString>
 8007ae4:	e004      	b.n	8007af0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007ae6:	683a      	ldr	r2, [r7, #0]
 8007ae8:	4904      	ldr	r1, [pc, #16]	@ (8007afc <USBD_FS_ConfigStrDescriptor+0x34>)
 8007aea:	4805      	ldr	r0, [pc, #20]	@ (8007b00 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007aec:	f7ff fdd4 	bl	8007698 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007af0:	4b02      	ldr	r3, [pc, #8]	@ (8007afc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3708      	adds	r7, #8
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	bf00      	nop
 8007afc:	2000152c 	.word	0x2000152c
 8007b00:	080082c8 	.word	0x080082c8

08007b04 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	6039      	str	r1, [r7, #0]
 8007b0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b10:	79fb      	ldrb	r3, [r7, #7]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d105      	bne.n	8007b22 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b16:	683a      	ldr	r2, [r7, #0]
 8007b18:	4907      	ldr	r1, [pc, #28]	@ (8007b38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b1a:	4808      	ldr	r0, [pc, #32]	@ (8007b3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b1c:	f7ff fdbc 	bl	8007698 <USBD_GetString>
 8007b20:	e004      	b.n	8007b2c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b22:	683a      	ldr	r2, [r7, #0]
 8007b24:	4904      	ldr	r1, [pc, #16]	@ (8007b38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b26:	4805      	ldr	r0, [pc, #20]	@ (8007b3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b28:	f7ff fdb6 	bl	8007698 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b2c:	4b02      	ldr	r3, [pc, #8]	@ (8007b38 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3708      	adds	r7, #8
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	2000152c 	.word	0x2000152c
 8007b3c:	080082d4 	.word	0x080082d4

08007b40 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007b46:	4b0f      	ldr	r3, [pc, #60]	@ (8007b84 <Get_SerialNum+0x44>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8007b88 <Get_SerialNum+0x48>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007b52:	4b0e      	ldr	r3, [pc, #56]	@ (8007b8c <Get_SerialNum+0x4c>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d009      	beq.n	8007b7a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007b66:	2208      	movs	r2, #8
 8007b68:	4909      	ldr	r1, [pc, #36]	@ (8007b90 <Get_SerialNum+0x50>)
 8007b6a:	68f8      	ldr	r0, [r7, #12]
 8007b6c:	f000 f814 	bl	8007b98 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007b70:	2204      	movs	r2, #4
 8007b72:	4908      	ldr	r1, [pc, #32]	@ (8007b94 <Get_SerialNum+0x54>)
 8007b74:	68b8      	ldr	r0, [r7, #8]
 8007b76:	f000 f80f 	bl	8007b98 <IntToUnicode>
  }
}
 8007b7a:	bf00      	nop
 8007b7c:	3710      	adds	r7, #16
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	bf00      	nop
 8007b84:	1fff7a10 	.word	0x1fff7a10
 8007b88:	1fff7a14 	.word	0x1fff7a14
 8007b8c:	1fff7a18 	.word	0x1fff7a18
 8007b90:	200000e2 	.word	0x200000e2
 8007b94:	200000f2 	.word	0x200000f2

08007b98 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b087      	sub	sp, #28
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	60b9      	str	r1, [r7, #8]
 8007ba2:	4613      	mov	r3, r2
 8007ba4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007baa:	2300      	movs	r3, #0
 8007bac:	75fb      	strb	r3, [r7, #23]
 8007bae:	e027      	b.n	8007c00 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	0f1b      	lsrs	r3, r3, #28
 8007bb4:	2b09      	cmp	r3, #9
 8007bb6:	d80b      	bhi.n	8007bd0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	0f1b      	lsrs	r3, r3, #28
 8007bbc:	b2da      	uxtb	r2, r3
 8007bbe:	7dfb      	ldrb	r3, [r7, #23]
 8007bc0:	005b      	lsls	r3, r3, #1
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	440b      	add	r3, r1
 8007bc8:	3230      	adds	r2, #48	@ 0x30
 8007bca:	b2d2      	uxtb	r2, r2
 8007bcc:	701a      	strb	r2, [r3, #0]
 8007bce:	e00a      	b.n	8007be6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	0f1b      	lsrs	r3, r3, #28
 8007bd4:	b2da      	uxtb	r2, r3
 8007bd6:	7dfb      	ldrb	r3, [r7, #23]
 8007bd8:	005b      	lsls	r3, r3, #1
 8007bda:	4619      	mov	r1, r3
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	440b      	add	r3, r1
 8007be0:	3237      	adds	r2, #55	@ 0x37
 8007be2:	b2d2      	uxtb	r2, r2
 8007be4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	011b      	lsls	r3, r3, #4
 8007bea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007bec:	7dfb      	ldrb	r3, [r7, #23]
 8007bee:	005b      	lsls	r3, r3, #1
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	68ba      	ldr	r2, [r7, #8]
 8007bf4:	4413      	add	r3, r2
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007bfa:	7dfb      	ldrb	r3, [r7, #23]
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	75fb      	strb	r3, [r7, #23]
 8007c00:	7dfa      	ldrb	r2, [r7, #23]
 8007c02:	79fb      	ldrb	r3, [r7, #7]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d3d3      	bcc.n	8007bb0 <IntToUnicode+0x18>
  }
}
 8007c08:	bf00      	nop
 8007c0a:	bf00      	nop
 8007c0c:	371c      	adds	r7, #28
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr
	...

08007c18 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b08a      	sub	sp, #40	@ 0x28
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c20:	f107 0314 	add.w	r3, r7, #20
 8007c24:	2200      	movs	r2, #0
 8007c26:	601a      	str	r2, [r3, #0]
 8007c28:	605a      	str	r2, [r3, #4]
 8007c2a:	609a      	str	r2, [r3, #8]
 8007c2c:	60da      	str	r2, [r3, #12]
 8007c2e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007c38:	d13a      	bne.n	8007cb0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	613b      	str	r3, [r7, #16]
 8007c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8007cb8 <HAL_PCD_MspInit+0xa0>)
 8007c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c42:	4a1d      	ldr	r2, [pc, #116]	@ (8007cb8 <HAL_PCD_MspInit+0xa0>)
 8007c44:	f043 0301 	orr.w	r3, r3, #1
 8007c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8007c4a:	4b1b      	ldr	r3, [pc, #108]	@ (8007cb8 <HAL_PCD_MspInit+0xa0>)
 8007c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c4e:	f003 0301 	and.w	r3, r3, #1
 8007c52:	613b      	str	r3, [r7, #16]
 8007c54:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007c56:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c5c:	2302      	movs	r3, #2
 8007c5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c60:	2300      	movs	r3, #0
 8007c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c64:	2303      	movs	r3, #3
 8007c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007c68:	230a      	movs	r3, #10
 8007c6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c6c:	f107 0314 	add.w	r3, r7, #20
 8007c70:	4619      	mov	r1, r3
 8007c72:	4812      	ldr	r0, [pc, #72]	@ (8007cbc <HAL_PCD_MspInit+0xa4>)
 8007c74:	f7f9 fcdc 	bl	8001630 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007c78:	4b0f      	ldr	r3, [pc, #60]	@ (8007cb8 <HAL_PCD_MspInit+0xa0>)
 8007c7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c7c:	4a0e      	ldr	r2, [pc, #56]	@ (8007cb8 <HAL_PCD_MspInit+0xa0>)
 8007c7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c82:	6353      	str	r3, [r2, #52]	@ 0x34
 8007c84:	2300      	movs	r3, #0
 8007c86:	60fb      	str	r3, [r7, #12]
 8007c88:	4b0b      	ldr	r3, [pc, #44]	@ (8007cb8 <HAL_PCD_MspInit+0xa0>)
 8007c8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c8c:	4a0a      	ldr	r2, [pc, #40]	@ (8007cb8 <HAL_PCD_MspInit+0xa0>)
 8007c8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007c92:	6453      	str	r3, [r2, #68]	@ 0x44
 8007c94:	4b08      	ldr	r3, [pc, #32]	@ (8007cb8 <HAL_PCD_MspInit+0xa0>)
 8007c96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c9c:	60fb      	str	r3, [r7, #12]
 8007c9e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	2043      	movs	r0, #67	@ 0x43
 8007ca6:	f7f9 fc8c 	bl	80015c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007caa:	2043      	movs	r0, #67	@ 0x43
 8007cac:	f7f9 fca5 	bl	80015fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007cb0:	bf00      	nop
 8007cb2:	3728      	adds	r7, #40	@ 0x28
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	40023800 	.word	0x40023800
 8007cbc:	40020000 	.word	0x40020000

08007cc0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	4610      	mov	r0, r2
 8007cd8:	f7fe fb7b 	bl	80063d2 <USBD_LL_SetupStage>
}
 8007cdc:	bf00      	nop
 8007cde:	3708      	adds	r7, #8
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	460b      	mov	r3, r1
 8007cee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007cf6:	78fa      	ldrb	r2, [r7, #3]
 8007cf8:	6879      	ldr	r1, [r7, #4]
 8007cfa:	4613      	mov	r3, r2
 8007cfc:	00db      	lsls	r3, r3, #3
 8007cfe:	4413      	add	r3, r2
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	440b      	add	r3, r1
 8007d04:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	78fb      	ldrb	r3, [r7, #3]
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	f7fe fbb5 	bl	800647c <USBD_LL_DataOutStage>
}
 8007d12:	bf00      	nop
 8007d14:	3708      	adds	r7, #8
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}

08007d1a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d1a:	b580      	push	{r7, lr}
 8007d1c:	b082      	sub	sp, #8
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
 8007d22:	460b      	mov	r3, r1
 8007d24:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007d2c:	78fa      	ldrb	r2, [r7, #3]
 8007d2e:	6879      	ldr	r1, [r7, #4]
 8007d30:	4613      	mov	r3, r2
 8007d32:	00db      	lsls	r3, r3, #3
 8007d34:	4413      	add	r3, r2
 8007d36:	009b      	lsls	r3, r3, #2
 8007d38:	440b      	add	r3, r1
 8007d3a:	3320      	adds	r3, #32
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	78fb      	ldrb	r3, [r7, #3]
 8007d40:	4619      	mov	r1, r3
 8007d42:	f7fe fc4e 	bl	80065e2 <USBD_LL_DataInStage>
}
 8007d46:	bf00      	nop
 8007d48:	3708      	adds	r7, #8
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}

08007d4e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b082      	sub	sp, #8
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f7fe fd88 	bl	8006872 <USBD_LL_SOF>
}
 8007d62:	bf00      	nop
 8007d64:	3708      	adds	r7, #8
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b084      	sub	sp, #16
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007d72:	2301      	movs	r3, #1
 8007d74:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	79db      	ldrb	r3, [r3, #7]
 8007d7a:	2b02      	cmp	r3, #2
 8007d7c:	d001      	beq.n	8007d82 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007d7e:	f7f8 fd43 	bl	8000808 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007d88:	7bfa      	ldrb	r2, [r7, #15]
 8007d8a:	4611      	mov	r1, r2
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f7fe fd2c 	bl	80067ea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f7fe fcd4 	bl	8006746 <USBD_LL_Reset>
}
 8007d9e:	bf00      	nop
 8007da0:	3710      	adds	r7, #16
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
	...

08007da8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007db6:	4618      	mov	r0, r3
 8007db8:	f7fe fd27 	bl	800680a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	6812      	ldr	r2, [r2, #0]
 8007dca:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007dce:	f043 0301 	orr.w	r3, r3, #1
 8007dd2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	7adb      	ldrb	r3, [r3, #11]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d005      	beq.n	8007de8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007ddc:	4b04      	ldr	r3, [pc, #16]	@ (8007df0 <HAL_PCD_SuspendCallback+0x48>)
 8007dde:	691b      	ldr	r3, [r3, #16]
 8007de0:	4a03      	ldr	r2, [pc, #12]	@ (8007df0 <HAL_PCD_SuspendCallback+0x48>)
 8007de2:	f043 0306 	orr.w	r3, r3, #6
 8007de6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007de8:	bf00      	nop
 8007dea:	3708      	adds	r7, #8
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	e000ed00 	.word	0xe000ed00

08007df4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b082      	sub	sp, #8
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007e02:	4618      	mov	r0, r3
 8007e04:	f7fe fd1d 	bl	8006842 <USBD_LL_Resume>
}
 8007e08:	bf00      	nop
 8007e0a:	3708      	adds	r7, #8
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	460b      	mov	r3, r1
 8007e1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007e22:	78fa      	ldrb	r2, [r7, #3]
 8007e24:	4611      	mov	r1, r2
 8007e26:	4618      	mov	r0, r3
 8007e28:	f7fe fd75 	bl	8006916 <USBD_LL_IsoOUTIncomplete>
}
 8007e2c:	bf00      	nop
 8007e2e:	3708      	adds	r7, #8
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007e46:	78fa      	ldrb	r2, [r7, #3]
 8007e48:	4611      	mov	r1, r2
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7fe fd31 	bl	80068b2 <USBD_LL_IsoINIncomplete>
}
 8007e50:	bf00      	nop
 8007e52:	3708      	adds	r7, #8
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007e66:	4618      	mov	r0, r3
 8007e68:	f7fe fd87 	bl	800697a <USBD_LL_DevConnected>
}
 8007e6c:	bf00      	nop
 8007e6e:	3708      	adds	r7, #8
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007e82:	4618      	mov	r0, r3
 8007e84:	f7fe fd84 	bl	8006990 <USBD_LL_DevDisconnected>
}
 8007e88:	bf00      	nop
 8007e8a:	3708      	adds	r7, #8
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d13c      	bne.n	8007f1a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007ea0:	4a20      	ldr	r2, [pc, #128]	@ (8007f24 <USBD_LL_Init+0x94>)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	4a1e      	ldr	r2, [pc, #120]	@ (8007f24 <USBD_LL_Init+0x94>)
 8007eac:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007eb0:	4b1c      	ldr	r3, [pc, #112]	@ (8007f24 <USBD_LL_Init+0x94>)
 8007eb2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007eb6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007eb8:	4b1a      	ldr	r3, [pc, #104]	@ (8007f24 <USBD_LL_Init+0x94>)
 8007eba:	2204      	movs	r2, #4
 8007ebc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007ebe:	4b19      	ldr	r3, [pc, #100]	@ (8007f24 <USBD_LL_Init+0x94>)
 8007ec0:	2202      	movs	r2, #2
 8007ec2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007ec4:	4b17      	ldr	r3, [pc, #92]	@ (8007f24 <USBD_LL_Init+0x94>)
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007eca:	4b16      	ldr	r3, [pc, #88]	@ (8007f24 <USBD_LL_Init+0x94>)
 8007ecc:	2202      	movs	r2, #2
 8007ece:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007ed0:	4b14      	ldr	r3, [pc, #80]	@ (8007f24 <USBD_LL_Init+0x94>)
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007ed6:	4b13      	ldr	r3, [pc, #76]	@ (8007f24 <USBD_LL_Init+0x94>)
 8007ed8:	2200      	movs	r2, #0
 8007eda:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007edc:	4b11      	ldr	r3, [pc, #68]	@ (8007f24 <USBD_LL_Init+0x94>)
 8007ede:	2200      	movs	r2, #0
 8007ee0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007ee2:	4b10      	ldr	r3, [pc, #64]	@ (8007f24 <USBD_LL_Init+0x94>)
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007ee8:	4b0e      	ldr	r3, [pc, #56]	@ (8007f24 <USBD_LL_Init+0x94>)
 8007eea:	2200      	movs	r2, #0
 8007eec:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007eee:	480d      	ldr	r0, [pc, #52]	@ (8007f24 <USBD_LL_Init+0x94>)
 8007ef0:	f7f9 fd3b 	bl	800196a <HAL_PCD_Init>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d001      	beq.n	8007efe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007efa:	f7f8 fc85 	bl	8000808 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007efe:	2180      	movs	r1, #128	@ 0x80
 8007f00:	4808      	ldr	r0, [pc, #32]	@ (8007f24 <USBD_LL_Init+0x94>)
 8007f02:	f7fa ff66 	bl	8002dd2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007f06:	2240      	movs	r2, #64	@ 0x40
 8007f08:	2100      	movs	r1, #0
 8007f0a:	4806      	ldr	r0, [pc, #24]	@ (8007f24 <USBD_LL_Init+0x94>)
 8007f0c:	f7fa ff1a 	bl	8002d44 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007f10:	2280      	movs	r2, #128	@ 0x80
 8007f12:	2101      	movs	r1, #1
 8007f14:	4803      	ldr	r0, [pc, #12]	@ (8007f24 <USBD_LL_Init+0x94>)
 8007f16:	f7fa ff15 	bl	8002d44 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007f1a:	2300      	movs	r3, #0
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3708      	adds	r7, #8
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}
 8007f24:	2000172c 	.word	0x2000172c

08007f28 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f30:	2300      	movs	r3, #0
 8007f32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f34:	2300      	movs	r3, #0
 8007f36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f7f9 fe22 	bl	8001b88 <HAL_PCD_Start>
 8007f44:	4603      	mov	r3, r0
 8007f46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f48:	7bfb      	ldrb	r3, [r7, #15]
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f000 f942 	bl	80081d4 <USBD_Get_USB_Status>
 8007f50:	4603      	mov	r3, r0
 8007f52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f54:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3710      	adds	r7, #16
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b084      	sub	sp, #16
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
 8007f66:	4608      	mov	r0, r1
 8007f68:	4611      	mov	r1, r2
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	70fb      	strb	r3, [r7, #3]
 8007f70:	460b      	mov	r3, r1
 8007f72:	70bb      	strb	r3, [r7, #2]
 8007f74:	4613      	mov	r3, r2
 8007f76:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007f86:	78bb      	ldrb	r3, [r7, #2]
 8007f88:	883a      	ldrh	r2, [r7, #0]
 8007f8a:	78f9      	ldrb	r1, [r7, #3]
 8007f8c:	f7fa faf6 	bl	800257c <HAL_PCD_EP_Open>
 8007f90:	4603      	mov	r3, r0
 8007f92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f94:	7bfb      	ldrb	r3, [r7, #15]
 8007f96:	4618      	mov	r0, r3
 8007f98:	f000 f91c 	bl	80081d4 <USBD_Get_USB_Status>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fa0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3710      	adds	r7, #16
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007faa:	b580      	push	{r7, lr}
 8007fac:	b084      	sub	sp, #16
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007fc4:	78fa      	ldrb	r2, [r7, #3]
 8007fc6:	4611      	mov	r1, r2
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f7fa fb3f 	bl	800264c <HAL_PCD_EP_Close>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fd2:	7bfb      	ldrb	r3, [r7, #15]
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f000 f8fd 	bl	80081d4 <USBD_Get_USB_Status>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fde:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3710      	adds	r7, #16
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008002:	78fa      	ldrb	r2, [r7, #3]
 8008004:	4611      	mov	r1, r2
 8008006:	4618      	mov	r0, r3
 8008008:	f7fa fbf7 	bl	80027fa <HAL_PCD_EP_SetStall>
 800800c:	4603      	mov	r3, r0
 800800e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008010:	7bfb      	ldrb	r3, [r7, #15]
 8008012:	4618      	mov	r0, r3
 8008014:	f000 f8de 	bl	80081d4 <USBD_Get_USB_Status>
 8008018:	4603      	mov	r3, r0
 800801a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800801c:	7bbb      	ldrb	r3, [r7, #14]
}
 800801e:	4618      	mov	r0, r3
 8008020:	3710      	adds	r7, #16
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}

08008026 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008026:	b580      	push	{r7, lr}
 8008028:	b084      	sub	sp, #16
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
 800802e:	460b      	mov	r3, r1
 8008030:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008032:	2300      	movs	r3, #0
 8008034:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008036:	2300      	movs	r3, #0
 8008038:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008040:	78fa      	ldrb	r2, [r7, #3]
 8008042:	4611      	mov	r1, r2
 8008044:	4618      	mov	r0, r3
 8008046:	f7fa fc3b 	bl	80028c0 <HAL_PCD_EP_ClrStall>
 800804a:	4603      	mov	r3, r0
 800804c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800804e:	7bfb      	ldrb	r3, [r7, #15]
 8008050:	4618      	mov	r0, r3
 8008052:	f000 f8bf 	bl	80081d4 <USBD_Get_USB_Status>
 8008056:	4603      	mov	r3, r0
 8008058:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800805a:	7bbb      	ldrb	r3, [r7, #14]
}
 800805c:	4618      	mov	r0, r3
 800805e:	3710      	adds	r7, #16
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008064:	b480      	push	{r7}
 8008066:	b085      	sub	sp, #20
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	460b      	mov	r3, r1
 800806e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008076:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008078:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800807c:	2b00      	cmp	r3, #0
 800807e:	da0b      	bge.n	8008098 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008080:	78fb      	ldrb	r3, [r7, #3]
 8008082:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008086:	68f9      	ldr	r1, [r7, #12]
 8008088:	4613      	mov	r3, r2
 800808a:	00db      	lsls	r3, r3, #3
 800808c:	4413      	add	r3, r2
 800808e:	009b      	lsls	r3, r3, #2
 8008090:	440b      	add	r3, r1
 8008092:	3316      	adds	r3, #22
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	e00b      	b.n	80080b0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008098:	78fb      	ldrb	r3, [r7, #3]
 800809a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800809e:	68f9      	ldr	r1, [r7, #12]
 80080a0:	4613      	mov	r3, r2
 80080a2:	00db      	lsls	r3, r3, #3
 80080a4:	4413      	add	r3, r2
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	440b      	add	r3, r1
 80080aa:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80080ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3714      	adds	r7, #20
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr

080080bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b084      	sub	sp, #16
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	460b      	mov	r3, r1
 80080c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080c8:	2300      	movs	r3, #0
 80080ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080cc:	2300      	movs	r3, #0
 80080ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80080d6:	78fa      	ldrb	r2, [r7, #3]
 80080d8:	4611      	mov	r1, r2
 80080da:	4618      	mov	r0, r3
 80080dc:	f7fa fa2a 	bl	8002534 <HAL_PCD_SetAddress>
 80080e0:	4603      	mov	r3, r0
 80080e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080e4:	7bfb      	ldrb	r3, [r7, #15]
 80080e6:	4618      	mov	r0, r3
 80080e8:	f000 f874 	bl	80081d4 <USBD_Get_USB_Status>
 80080ec:	4603      	mov	r3, r0
 80080ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3710      	adds	r7, #16
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}

080080fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80080fa:	b580      	push	{r7, lr}
 80080fc:	b086      	sub	sp, #24
 80080fe:	af00      	add	r7, sp, #0
 8008100:	60f8      	str	r0, [r7, #12]
 8008102:	607a      	str	r2, [r7, #4]
 8008104:	603b      	str	r3, [r7, #0]
 8008106:	460b      	mov	r3, r1
 8008108:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800810a:	2300      	movs	r3, #0
 800810c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800810e:	2300      	movs	r3, #0
 8008110:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008118:	7af9      	ldrb	r1, [r7, #11]
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	f7fa fb32 	bl	8002786 <HAL_PCD_EP_Transmit>
 8008122:	4603      	mov	r3, r0
 8008124:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008126:	7dfb      	ldrb	r3, [r7, #23]
 8008128:	4618      	mov	r0, r3
 800812a:	f000 f853 	bl	80081d4 <USBD_Get_USB_Status>
 800812e:	4603      	mov	r3, r0
 8008130:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008132:	7dbb      	ldrb	r3, [r7, #22]
}
 8008134:	4618      	mov	r0, r3
 8008136:	3718      	adds	r7, #24
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b086      	sub	sp, #24
 8008140:	af00      	add	r7, sp, #0
 8008142:	60f8      	str	r0, [r7, #12]
 8008144:	607a      	str	r2, [r7, #4]
 8008146:	603b      	str	r3, [r7, #0]
 8008148:	460b      	mov	r3, r1
 800814a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800814c:	2300      	movs	r3, #0
 800814e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008150:	2300      	movs	r3, #0
 8008152:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800815a:	7af9      	ldrb	r1, [r7, #11]
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	f7fa fabe 	bl	80026e0 <HAL_PCD_EP_Receive>
 8008164:	4603      	mov	r3, r0
 8008166:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008168:	7dfb      	ldrb	r3, [r7, #23]
 800816a:	4618      	mov	r0, r3
 800816c:	f000 f832 	bl	80081d4 <USBD_Get_USB_Status>
 8008170:	4603      	mov	r3, r0
 8008172:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008174:	7dbb      	ldrb	r3, [r7, #22]
}
 8008176:	4618      	mov	r0, r3
 8008178:	3718      	adds	r7, #24
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}

0800817e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800817e:	b580      	push	{r7, lr}
 8008180:	b082      	sub	sp, #8
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]
 8008186:	460b      	mov	r3, r1
 8008188:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008190:	78fa      	ldrb	r2, [r7, #3]
 8008192:	4611      	mov	r1, r2
 8008194:	4618      	mov	r0, r3
 8008196:	f7fa fade 	bl	8002756 <HAL_PCD_EP_GetRxCount>
 800819a:	4603      	mov	r3, r0
}
 800819c:	4618      	mov	r0, r3
 800819e:	3708      	adds	r7, #8
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80081ac:	4b03      	ldr	r3, [pc, #12]	@ (80081bc <USBD_static_malloc+0x18>)
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	370c      	adds	r7, #12
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr
 80081ba:	bf00      	nop
 80081bc:	20001c10 	.word	0x20001c10

080081c0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]

}
 80081c8:	bf00      	nop
 80081ca:	370c      	adds	r7, #12
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b085      	sub	sp, #20
 80081d8:	af00      	add	r7, sp, #0
 80081da:	4603      	mov	r3, r0
 80081dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081de:	2300      	movs	r3, #0
 80081e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80081e2:	79fb      	ldrb	r3, [r7, #7]
 80081e4:	2b03      	cmp	r3, #3
 80081e6:	d817      	bhi.n	8008218 <USBD_Get_USB_Status+0x44>
 80081e8:	a201      	add	r2, pc, #4	@ (adr r2, 80081f0 <USBD_Get_USB_Status+0x1c>)
 80081ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ee:	bf00      	nop
 80081f0:	08008201 	.word	0x08008201
 80081f4:	08008207 	.word	0x08008207
 80081f8:	0800820d 	.word	0x0800820d
 80081fc:	08008213 	.word	0x08008213
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008200:	2300      	movs	r3, #0
 8008202:	73fb      	strb	r3, [r7, #15]
    break;
 8008204:	e00b      	b.n	800821e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008206:	2303      	movs	r3, #3
 8008208:	73fb      	strb	r3, [r7, #15]
    break;
 800820a:	e008      	b.n	800821e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800820c:	2301      	movs	r3, #1
 800820e:	73fb      	strb	r3, [r7, #15]
    break;
 8008210:	e005      	b.n	800821e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008212:	2303      	movs	r3, #3
 8008214:	73fb      	strb	r3, [r7, #15]
    break;
 8008216:	e002      	b.n	800821e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008218:	2303      	movs	r3, #3
 800821a:	73fb      	strb	r3, [r7, #15]
    break;
 800821c:	bf00      	nop
  }
  return usb_status;
 800821e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008220:	4618      	mov	r0, r3
 8008222:	3714      	adds	r7, #20
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr

0800822c <memset>:
 800822c:	4402      	add	r2, r0
 800822e:	4603      	mov	r3, r0
 8008230:	4293      	cmp	r3, r2
 8008232:	d100      	bne.n	8008236 <memset+0xa>
 8008234:	4770      	bx	lr
 8008236:	f803 1b01 	strb.w	r1, [r3], #1
 800823a:	e7f9      	b.n	8008230 <memset+0x4>

0800823c <__libc_init_array>:
 800823c:	b570      	push	{r4, r5, r6, lr}
 800823e:	4d0d      	ldr	r5, [pc, #52]	@ (8008274 <__libc_init_array+0x38>)
 8008240:	4c0d      	ldr	r4, [pc, #52]	@ (8008278 <__libc_init_array+0x3c>)
 8008242:	1b64      	subs	r4, r4, r5
 8008244:	10a4      	asrs	r4, r4, #2
 8008246:	2600      	movs	r6, #0
 8008248:	42a6      	cmp	r6, r4
 800824a:	d109      	bne.n	8008260 <__libc_init_array+0x24>
 800824c:	4d0b      	ldr	r5, [pc, #44]	@ (800827c <__libc_init_array+0x40>)
 800824e:	4c0c      	ldr	r4, [pc, #48]	@ (8008280 <__libc_init_array+0x44>)
 8008250:	f000 f818 	bl	8008284 <_init>
 8008254:	1b64      	subs	r4, r4, r5
 8008256:	10a4      	asrs	r4, r4, #2
 8008258:	2600      	movs	r6, #0
 800825a:	42a6      	cmp	r6, r4
 800825c:	d105      	bne.n	800826a <__libc_init_array+0x2e>
 800825e:	bd70      	pop	{r4, r5, r6, pc}
 8008260:	f855 3b04 	ldr.w	r3, [r5], #4
 8008264:	4798      	blx	r3
 8008266:	3601      	adds	r6, #1
 8008268:	e7ee      	b.n	8008248 <__libc_init_array+0xc>
 800826a:	f855 3b04 	ldr.w	r3, [r5], #4
 800826e:	4798      	blx	r3
 8008270:	3601      	adds	r6, #1
 8008272:	e7f2      	b.n	800825a <__libc_init_array+0x1e>
 8008274:	080082fc 	.word	0x080082fc
 8008278:	080082fc 	.word	0x080082fc
 800827c:	080082fc 	.word	0x080082fc
 8008280:	08008300 	.word	0x08008300

08008284 <_init>:
 8008284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008286:	bf00      	nop
 8008288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800828a:	bc08      	pop	{r3}
 800828c:	469e      	mov	lr, r3
 800828e:	4770      	bx	lr

08008290 <_fini>:
 8008290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008292:	bf00      	nop
 8008294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008296:	bc08      	pop	{r3}
 8008298:	469e      	mov	lr, r3
 800829a:	4770      	bx	lr
